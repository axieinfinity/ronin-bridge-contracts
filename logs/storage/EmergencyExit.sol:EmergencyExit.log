src/ronin/validator/EmergencyExit.sol:EmergencyExit:_numberOfBlocksInEpoch (storage_slot: 0) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_lastUpdatedBlock (storage_slot: 1) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_lastUpdatedPeriod (storage_slot: 2) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_currentPeriodStartAtBlock (storage_slot: 3) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_periodOf (storage_slot: 4) (offset: 0) (type: mapping(uint256 => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______gap (storage_slot: 5) (offset: 0) (type: uint256[49]) (numberOfBytes: 1568)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_miningRewardDeprecatedAtPeriod (storage_slot: 54) (offset: 0) (type: mapping(address => mapping(uint256 => bool))) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_miningRewardBailoutCutOffAtPeriod (storage_slot: 55) (offset: 0) (type: mapping(address => mapping(uint256 => bool))) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______deprecatedBridgeRewardDeprecatedAtPeriod (storage_slot: 56) (offset: 0) (type: mapping(address => mapping(uint256 => bool))) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_blockProducerJailedBlock (storage_slot: 57) (offset: 0) (type: mapping(address => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_emergencyExitJailedTimestamp (storage_slot: 58) (offset: 0) (type: mapping(address => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_cannotBailoutUntilBlock (storage_slot: 59) (offset: 0) (type: mapping(address => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______gap (storage_slot: 60) (offset: 0) (type: uint256[48]) (numberOfBytes: 1536)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______deprecatedStakingContract (storage_slot: 108) (offset: 0) (type: address) (numberOfBytes: 20)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_maxValidatorCandidate (storage_slot: 109) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_candidates (storage_slot: 110) (offset: 0) (type: address[]) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_candidateIndex (storage_slot: 111) (offset: 0) (type: mapping(address => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_candidateInfo (storage_slot: 112) (offset: 0) (type: mapping(address => struct ICandidateManager.ValidatorCandidate)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_minEffectiveDaysOnwards (storage_slot: 113) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_candidateCommissionChangeSchedule (storage_slot: 114) (offset: 0) (type: mapping(address => struct ICandidateManager.CommissionSchedule)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______gap (storage_slot: 115) (offset: 0) (type: uint256[48]) (numberOfBytes: 1536)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______deprecatedTrustedOrg (storage_slot: 163) (offset: 0) (type: address) (numberOfBytes: 20)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_maxValidatorNumber (storage_slot: 164) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:validatorCount (storage_slot: 165) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_validators (storage_slot: 166) (offset: 0) (type: mapping(uint256 => address)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_validatorMap (storage_slot: 167) (offset: 0) (type: mapping(address => enum EnumFlags.ValidatorFlag)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_maxPrioritizedValidatorNumber (storage_slot: 168) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______gap (storage_slot: 169) (offset: 0) (type: uint256[50]) (numberOfBytes: 1600)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_miningReward (storage_slot: 219) (offset: 0) (type: mapping(address => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_delegatingReward (storage_slot: 220) (offset: 0) (type: mapping(address => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_totalFastFinalityReward (storage_slot: 221) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_fastFinalityReward (storage_slot: 222) (offset: 0) (type: mapping(address => uint256)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_totalDeprecatedReward (storage_slot: 223) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_emergencyExitLockedAmount (storage_slot: 224) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_emergencyExpiryDuration (storage_slot: 225) (offset: 0) (type: uint256) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_lockedConsensusList (storage_slot: 226) (offset: 0) (type: address[]) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_exitInfo (storage_slot: 227) (offset: 0) (type: mapping(address => struct ICommonInfo.EmergencyExitInfo)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:_lockedFundReleased (storage_slot: 228) (offset: 0) (type: mapping(address => bool)) (numberOfBytes: 32)
src/ronin/validator/EmergencyExit.sol:EmergencyExit:______gap (storage_slot: 229) (offset: 0) (type: uint256[44]) (numberOfBytes: 1408)