/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OwnerStruct = {
  addr: string;
  tokenAddr: string;
  chainId: BigNumberish;
};

export type OwnerStructOutput = [string, string, BigNumber] & {
  addr: string;
  tokenAddr: string;
  chainId: BigNumber;
};

export type InfoStruct = {
  erc: BigNumberish;
  id: BigNumberish;
  quantity: BigNumberish;
};

export type InfoStructOutput = [number, BigNumber, BigNumber] & {
  erc: number;
  id: BigNumber;
  quantity: BigNumber;
};

export type ReceiptStruct = {
  id: BigNumberish;
  kind: BigNumberish;
  mainchain: OwnerStruct;
  ronin: OwnerStruct;
  info: InfoStruct;
};

export type ReceiptStructOutput = [
  BigNumber,
  number,
  OwnerStructOutput,
  OwnerStructOutput,
  InfoStructOutput
] & {
  id: BigNumber;
  kind: number;
  mainchain: OwnerStructOutput;
  ronin: OwnerStructOutput;
  info: InfoStructOutput;
};

export type RequestStruct = {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStruct;
};

export type RequestStructOutput = [string, string, InfoStructOutput] & {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStructOutput;
};

export type MappedTokenStruct = { erc: BigNumberish; tokenAddr: string };

export type MappedTokenStructOutput = [number, string] & {
  erc: number;
  tokenAddr: string;
};

export interface MockRoninGatewayV3ExtendedInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "bulkRequestWithdrawalFor((address,address,(uint8,uint256,uint256))[],uint256)": FunctionFragment;
    "bulkSubmitWithdrawalSignatures(uint256[],bytes[])": FunctionFragment;
    "checkThreshold(uint256)": FunctionFragment;
    "depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": FunctionFragment;
    "depositVote(uint256,uint256)": FunctionFragment;
    "depositVoted(uint256,uint256,address)": FunctionFragment;
    "emergencyPauser()": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getDepositVoteWeight(uint256,uint256,bytes32)": FunctionFragment;
    "getMainchainToken(address,uint256)": FunctionFragment;
    "getMainchainWithdrewVoteWeight(uint256,bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "getTrustedThreshold()": FunctionFragment;
    "getWithdrawalSignatures(uint256,address[])": FunctionFragment;
    "getWithdrawalStatVoteWeight(uint256,bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256,address[],address[][2],uint256[][2],uint8[])": FunctionFragment;
    "initializeV2()": FunctionFragment;
    "initializeV3(address)": FunctionFragment;
    "mainchainWithdrew(uint256)": FunctionFragment;
    "mainchainWithdrewVote(uint256)": FunctionFragment;
    "mainchainWithdrewVoted(uint256,address)": FunctionFragment;
    "mapTokens(address[],address[],uint256[],uint8[])": FunctionFragment;
    "minimumThreshold(address)": FunctionFragment;
    "minimumVoteWeight()": FunctionFragment;
    "nonce()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestWithdrawalFor((address,address,(uint8,uint256,uint256)),uint256)": FunctionFragment;
    "requestWithdrawalSignatures(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setEmergencyPauser(address)": FunctionFragment;
    "setMinimumThresholds(address[],uint256[])": FunctionFragment;
    "setThreshold(uint256,uint256)": FunctionFragment;
    "setTrustedThreshold(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tryBulkAcknowledgeMainchainWithdrew(uint256[])": FunctionFragment;
    "tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawal(uint256)": FunctionFragment;
    "withdrawalCount()": FunctionFragment;
    "withdrawalStatVote(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkRequestWithdrawalFor",
    values: [RequestStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkSubmitWithdrawalSignatures",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [ReceiptStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVoted",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositVoteWeight",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainchainToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainchainWithdrewVoteWeight",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalSignatures",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalStatVoteWeight",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      [string[], string[]],
      [BigNumberish[], BigNumberish[]],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV3",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainchainWithdrew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mainchainWithdrewVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mainchainWithdrewVoted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mapTokens",
    values: [string[], string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumThreshold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVoteWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalFor",
    values: [RequestStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumThresholds",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBulkAcknowledgeMainchainWithdrew",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBulkDepositFor",
    values: [ReceiptStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalStatVote",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkRequestWithdrawalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkSubmitWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainchainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainchainWithdrewVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalStatVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainchainWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainchainWithdrewVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainchainWithdrewVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBulkAcknowledgeMainchainWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBulkDepositFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalStatVote",
    data: BytesLike
  ): Result;

  events: {
    "ContractUpdated(uint8,address)": EventFragment;
    "DepositVoted(address,uint256,uint256,bytes32)": EventFragment;
    "Deposited(bytes32,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MainchainWithdrew(bytes32,tuple)": EventFragment;
    "MinimumThresholdsUpdated(address[],uint256[])": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "TokenMapped(address[],address[],uint256[],uint8[])": EventFragment;
    "TrustedThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawalRequested(bytes32,tuple)": EventFragment;
    "WithdrawalSignaturesRequested(bytes32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainchainWithdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumThresholdsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequested"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawalSignaturesRequested"
  ): EventFragment;
}

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type DepositVotedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  {
    bridgeOperator: string;
    id: BigNumber;
    chainId: BigNumber;
    receiptHash: string;
  }
>;

export type DepositVotedEventFilter = TypedEventFilter<DepositVotedEvent>;

export type DepositedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type MainchainWithdrewEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type MainchainWithdrewEventFilter =
  TypedEventFilter<MainchainWithdrewEvent>;

export type MinimumThresholdsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; threshold: BigNumber[] }
>;

export type MinimumThresholdsUpdatedEventFilter =
  TypedEventFilter<MinimumThresholdsUpdatedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type ThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type ThresholdUpdatedEventFilter =
  TypedEventFilter<ThresholdUpdatedEvent>;

export type TokenMappedEvent = TypedEvent<
  [string[], string[], BigNumber[], number[]],
  {
    roninTokens: string[];
    mainchainTokens: string[];
    chainIds: BigNumber[];
    standards: number[];
  }
>;

export type TokenMappedEventFilter = TypedEventFilter<TokenMappedEvent>;

export type TrustedThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type TrustedThresholdUpdatedEventFilter =
  TypedEventFilter<TrustedThresholdUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawalRequestedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; arg1: ReceiptStructOutput }
>;

export type WithdrawalRequestedEventFilter =
  TypedEventFilter<WithdrawalRequestedEvent>;

export type WithdrawalSignaturesRequestedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; arg1: ReceiptStructOutput }
>;

export type WithdrawalSignaturesRequestedEventFilter =
  TypedEventFilter<WithdrawalSignaturesRequestedEvent>;

export interface MockRoninGatewayV3Extended extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockRoninGatewayV3ExtendedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkSubmitWithdrawalSignatures(
      withdrawals: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositVote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        finalHash: string;
        expiredAt: BigNumber;
        createdAt: BigNumber;
      }
    >;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emergencyPauser(overrides?: CallOverrides): Promise<[string]>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getDepositVoteWeight(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalWeight: BigNumber }>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MappedTokenStructOutput] & { _token: MappedTokenStructOutput }>;

    getMainchainWithdrewVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalWeight: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    getTrustedThreshold(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        trustedNum_: BigNumber;
        trustedDenom_: BigNumber;
      }
    >;

    getWithdrawalSignatures(
      withdrawalId: BigNumberish,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { _signatures: string[] }>;

    getWithdrawalStatVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalWeight: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _roleSetter: string,
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      arg5: string[],
      _packedAddresses: [string[], string[]],
      _packedNumbers: [BigNumberish[], BigNumberish[]],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeV3(
      bridgeAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainchainWithdrewVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        finalHash: string;
        expiredAt: BigNumber;
        createdAt: BigNumber;
      }
    >;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      _chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedThreshold(
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        OwnerStructOutput,
        OwnerStructOutput,
        InfoStructOutput
      ] & {
        id: BigNumber;
        kind: number;
        mainchain: OwnerStructOutput;
        ronin: OwnerStructOutput;
        info: InfoStructOutput;
      }
    >;

    withdrawalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalStatVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        finalHash: string;
        expiredAt: BigNumber;
        createdAt: BigNumber;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  bulkRequestWithdrawalFor(
    _requests: RequestStruct[],
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkSubmitWithdrawalSignatures(
    withdrawals: BigNumberish[],
    signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  depositFor(
    _receipt: ReceiptStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositVote(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber] & {
      status: number;
      finalHash: string;
      expiredAt: BigNumber;
      createdAt: BigNumber;
    }
  >;

  depositVoted(
    _chainId: BigNumberish,
    _depositId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  emergencyPauser(overrides?: CallOverrides): Promise<string>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDepositVoteWeight(
    _chainId: BigNumberish,
    _depositId: BigNumberish,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMainchainToken(
    _roninToken: string,
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MappedTokenStructOutput>;

  getMainchainWithdrewVoteWeight(
    _withdrawalId: BigNumberish,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

  getTrustedThreshold(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      trustedNum_: BigNumber;
      trustedDenom_: BigNumber;
    }
  >;

  getWithdrawalSignatures(
    withdrawalId: BigNumberish,
    operators: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getWithdrawalStatVoteWeight(
    _withdrawalId: BigNumberish,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _roleSetter: string,
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    _trustedNumerator: BigNumberish,
    _trustedDenominator: BigNumberish,
    arg5: string[],
    _packedAddresses: [string[], string[]],
    _packedNumbers: [BigNumberish[], BigNumberish[]],
    _standards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeV2(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeV3(
    bridgeAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainchainWithdrew(
    _withdrawalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainchainWithdrewVote(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber] & {
      status: number;
      finalHash: string;
      expiredAt: BigNumber;
      createdAt: BigNumber;
    }
  >;

  mainchainWithdrewVoted(
    _withdrawalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mapTokens(
    _roninTokens: string[],
    _mainchainTokens: string[],
    _chainIds: BigNumberish[],
    _standards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumThreshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalFor(
    _request: RequestStruct,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalSignatures(
    _withdrawalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyPauser(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedThreshold(
    _trustedNumerator: BigNumberish,
    _trustedDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tryBulkAcknowledgeMainchainWithdrew(
    _withdrawalIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryBulkDepositFor(
    _receipts: ReceiptStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawal(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      OwnerStructOutput,
      OwnerStructOutput,
      InfoStructOutput
    ] & {
      id: BigNumber;
      kind: number;
      mainchain: OwnerStructOutput;
      ronin: OwnerStructOutput;
      info: InfoStructOutput;
    }
  >;

  withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalStatVote(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber] & {
      status: number;
      finalHash: string;
      expiredAt: BigNumber;
      createdAt: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bulkSubmitWithdrawalSignatures(
      withdrawals: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositVote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        finalHash: string;
        expiredAt: BigNumber;
        createdAt: BigNumber;
      }
    >;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyPauser(overrides?: CallOverrides): Promise<string>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDepositVoteWeight(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MappedTokenStructOutput>;

    getMainchainWithdrewVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    getTrustedThreshold(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        trustedNum_: BigNumber;
        trustedDenom_: BigNumber;
      }
    >;

    getWithdrawalSignatures(
      withdrawalId: BigNumberish,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getWithdrawalStatVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _roleSetter: string,
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      arg5: string[],
      _packedAddresses: [string[], string[]],
      _packedNumbers: [BigNumberish[], BigNumberish[]],
      _standards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(overrides?: CallOverrides): Promise<void>;

    initializeV3(bridgeAdmin: string, overrides?: CallOverrides): Promise<void>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainchainWithdrewVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        finalHash: string;
        expiredAt: BigNumber;
        createdAt: BigNumber;
      }
    >;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      _chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyPauser(_addr: string, overrides?: CallOverrides): Promise<void>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setTrustedThreshold(
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        OwnerStructOutput,
        OwnerStructOutput,
        InfoStructOutput
      ] & {
        id: BigNumber;
        kind: number;
        mainchain: OwnerStructOutput;
        ronin: OwnerStructOutput;
        info: InfoStructOutput;
      }
    >;

    withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalStatVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        finalHash: string;
        expiredAt: BigNumber;
        createdAt: BigNumber;
      }
    >;
  };

  filters: {
    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "DepositVoted(address,uint256,uint256,bytes32)"(
      bridgeOperator?: string | null,
      id?: BigNumberish | null,
      chainId?: BigNumberish | null,
      receiptHash?: null
    ): DepositVotedEventFilter;
    DepositVoted(
      bridgeOperator?: string | null,
      id?: BigNumberish | null,
      chainId?: BigNumberish | null,
      receiptHash?: null
    ): DepositVotedEventFilter;

    "Deposited(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): DepositedEventFilter;
    Deposited(receiptHash?: null, receipt?: null): DepositedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MainchainWithdrew(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): MainchainWithdrewEventFilter;
    MainchainWithdrew(
      receiptHash?: null,
      receipt?: null
    ): MainchainWithdrewEventFilter;

    "MinimumThresholdsUpdated(address[],uint256[])"(
      tokens?: null,
      threshold?: null
    ): MinimumThresholdsUpdatedEventFilter;
    MinimumThresholdsUpdated(
      tokens?: null,
      threshold?: null
    ): MinimumThresholdsUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;
    ThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;

    "TokenMapped(address[],address[],uint256[],uint8[])"(
      roninTokens?: null,
      mainchainTokens?: null,
      chainIds?: null,
      standards?: null
    ): TokenMappedEventFilter;
    TokenMapped(
      roninTokens?: null,
      mainchainTokens?: null,
      chainIds?: null,
      standards?: null
    ): TokenMappedEventFilter;

    "TrustedThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): TrustedThresholdUpdatedEventFilter;
    TrustedThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): TrustedThresholdUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawalRequested(bytes32,tuple)"(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalRequestedEventFilter;
    WithdrawalRequested(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalRequestedEventFilter;

    "WithdrawalSignaturesRequested(bytes32,tuple)"(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalSignaturesRequestedEventFilter;
    WithdrawalSignaturesRequested(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalSignaturesRequestedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkSubmitWithdrawalSignatures(
      withdrawals: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositVote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyPauser(overrides?: CallOverrides): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositVoteWeight(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainchainWithdrewVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalSignatures(
      withdrawalId: BigNumberish,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalStatVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _roleSetter: string,
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      arg5: string[],
      _packedAddresses: [string[], string[]],
      _packedNumbers: [BigNumberish[], BigNumberish[]],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeV3(
      bridgeAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainchainWithdrewVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      _chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedThreshold(
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalStatVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkSubmitWithdrawalSignatures(
      withdrawals: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositVote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositVoteWeight(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainchainWithdrewVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalSignatures(
      withdrawalId: BigNumberish,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalStatVoteWeight(
      _withdrawalId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _roleSetter: string,
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      arg5: string[],
      _packedAddresses: [string[], string[]],
      _packedNumbers: [BigNumberish[], BigNumberish[]],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeV3(
      bridgeAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainchainWithdrewVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      _chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedThreshold(
      _trustedNumerator: BigNumberish,
      _trustedDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalStatVote(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
