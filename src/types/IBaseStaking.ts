/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBaseStakingInterface extends utils.Interface {
  functions: {
    "cooldownSecsToUndelegate()": FunctionFragment;
    "getManySelfStakings(address[])": FunctionFragment;
    "getPoolAddressOf(address)": FunctionFragment;
    "getPoolDetail(address)": FunctionFragment;
    "isAdminOfActivePool(address)": FunctionFragment;
    "setCooldownSecsToUndelegate(uint256)": FunctionFragment;
    "setWaitingSecsToRevoke(uint256)": FunctionFragment;
    "waitingSecsToRevoke()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cooldownSecsToUndelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManySelfStakings",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddressOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolDetail",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdminOfActivePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownSecsToUndelegate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWaitingSecsToRevoke",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "waitingSecsToRevoke",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cooldownSecsToUndelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManySelfStakings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddressOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdminOfActivePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownSecsToUndelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWaitingSecsToRevoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waitingSecsToRevoke",
    data: BytesLike
  ): Result;

  events: {
    "CooldownSecsToUndelegateUpdated(uint256)": EventFragment;
    "WaitingSecsToRevokeUpdated(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CooldownSecsToUndelegateUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WaitingSecsToRevokeUpdated"): EventFragment;
}

export type CooldownSecsToUndelegateUpdatedEvent = TypedEvent<
  [BigNumber],
  { minSecs: BigNumber }
>;

export type CooldownSecsToUndelegateUpdatedEventFilter =
  TypedEventFilter<CooldownSecsToUndelegateUpdatedEvent>;

export type WaitingSecsToRevokeUpdatedEvent = TypedEvent<
  [BigNumber],
  { secs: BigNumber }
>;

export type WaitingSecsToRevokeUpdatedEventFilter =
  TypedEventFilter<WaitingSecsToRevokeUpdatedEvent>;

export interface IBaseStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBaseStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cooldownSecsToUndelegate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getManySelfStakings(
      arg0: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPoolAddressOf(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolDetail(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        _admin: string;
        _stakingAmount: BigNumber;
        _stakingTotal: BigNumber;
      }
    >;

    isAdminOfActivePool(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setCooldownSecsToUndelegate(
      _cooldownSecs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWaitingSecsToRevoke(
      _secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    waitingSecsToRevoke(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cooldownSecsToUndelegate(overrides?: CallOverrides): Promise<BigNumber>;

  getManySelfStakings(
    arg0: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPoolAddressOf(
    _poolAdminAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolDetail(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      _admin: string;
      _stakingAmount: BigNumber;
      _stakingTotal: BigNumber;
    }
  >;

  isAdminOfActivePool(
    _poolAdminAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setCooldownSecsToUndelegate(
    _cooldownSecs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWaitingSecsToRevoke(
    _secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  waitingSecsToRevoke(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cooldownSecsToUndelegate(overrides?: CallOverrides): Promise<BigNumber>;

    getManySelfStakings(
      arg0: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPoolAddressOf(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolDetail(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        _admin: string;
        _stakingAmount: BigNumber;
        _stakingTotal: BigNumber;
      }
    >;

    isAdminOfActivePool(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setCooldownSecsToUndelegate(
      _cooldownSecs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWaitingSecsToRevoke(
      _secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    waitingSecsToRevoke(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CooldownSecsToUndelegateUpdated(uint256)"(
      minSecs?: null
    ): CooldownSecsToUndelegateUpdatedEventFilter;
    CooldownSecsToUndelegateUpdated(
      minSecs?: null
    ): CooldownSecsToUndelegateUpdatedEventFilter;

    "WaitingSecsToRevokeUpdated(uint256)"(
      secs?: null
    ): WaitingSecsToRevokeUpdatedEventFilter;
    WaitingSecsToRevokeUpdated(
      secs?: null
    ): WaitingSecsToRevokeUpdatedEventFilter;
  };

  estimateGas: {
    cooldownSecsToUndelegate(overrides?: CallOverrides): Promise<BigNumber>;

    getManySelfStakings(
      arg0: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAddressOf(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolDetail(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAdminOfActivePool(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCooldownSecsToUndelegate(
      _cooldownSecs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWaitingSecsToRevoke(
      _secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    waitingSecsToRevoke(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cooldownSecsToUndelegate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManySelfStakings(
      arg0: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAddressOf(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolDetail(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdminOfActivePool(
      _poolAdminAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCooldownSecsToUndelegate(
      _cooldownSecs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWaitingSecsToRevoke(
      _secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    waitingSecsToRevoke(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
