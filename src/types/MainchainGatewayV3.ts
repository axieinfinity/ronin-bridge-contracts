/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OwnerStruct = {
  addr: string;
  tokenAddr: string;
  chainId: BigNumberish;
};

export type OwnerStructOutput = [string, string, BigNumber] & {
  addr: string;
  tokenAddr: string;
  chainId: BigNumber;
};

export type InfoStruct = {
  erc: BigNumberish;
  id: BigNumberish;
  quantity: BigNumberish;
};

export type InfoStructOutput = [number, BigNumber, BigNumber] & {
  erc: number;
  id: BigNumber;
  quantity: BigNumber;
};

export type ReceiptStruct = {
  id: BigNumberish;
  kind: BigNumberish;
  mainchain: OwnerStruct;
  ronin: OwnerStruct;
  info: InfoStruct;
};

export type ReceiptStructOutput = [
  BigNumber,
  number,
  OwnerStructOutput,
  OwnerStructOutput,
  InfoStructOutput
] & {
  id: BigNumber;
  kind: number;
  mainchain: OwnerStructOutput;
  ronin: OwnerStructOutput;
  info: InfoStructOutput;
};

export type MappedTokenStruct = { erc: BigNumberish; tokenAddr: string };

export type MappedTokenStructOutput = [number, string] & {
  erc: number;
  tokenAddr: string;
};

export type RequestStruct = {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStruct;
};

export type RequestStructOutput = [string, string, InfoStructOutput] & {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStructOutput;
};

export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

export type SignatureStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export interface MainchainGatewayV3Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "WITHDRAWAL_UNLOCKER_ROLE()": FunctionFragment;
    "_MAX_PERCENTAGE()": FunctionFragment;
    "checkHighTierVoteWeightThreshold(uint256)": FunctionFragment;
    "checkThreshold(uint256)": FunctionFragment;
    "dailyWithdrawalLimit(address)": FunctionFragment;
    "depositCount()": FunctionFragment;
    "emergencyPauser()": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getHighTierVoteWeightThreshold()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoninToken(address)": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "highTierThreshold(address)": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,uint256,address[][3],uint256[][4],uint8[])": FunctionFragment;
    "initializeV2(address)": FunctionFragment;
    "lastDateSynced(address)": FunctionFragment;
    "lastSyncedWithdrawal(address)": FunctionFragment;
    "lockedThreshold(address)": FunctionFragment;
    "mapTokens(address[],address[],uint8[])": FunctionFragment;
    "mapTokensAndThresholds(address[],address[],uint8[],uint256[][4])": FunctionFragment;
    "minimumVoteWeight()": FunctionFragment;
    "nonce()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "reachedWithdrawalLimit(address,uint256)": FunctionFragment;
    "receiveEther()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestDepositFor((address,address,(uint8,uint256,uint256)))": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "roninChainId()": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setDailyWithdrawalLimits(address[],uint256[])": FunctionFragment;
    "setEmergencyPauser(address)": FunctionFragment;
    "setHighTierThresholds(address[],uint256[])": FunctionFragment;
    "setHighTierVoteWeightThreshold(uint256,uint256)": FunctionFragment;
    "setLockedThresholds(address[],uint256[])": FunctionFragment;
    "setThreshold(uint256,uint256)": FunctionFragment;
    "setUnlockFeePercentages(address[],uint256[])": FunctionFragment;
    "setWrappedNativeTokenContract(address)": FunctionFragment;
    "submitWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unlockFeePercentages(address)": FunctionFragment;
    "unlockWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawalHash(uint256)": FunctionFragment;
    "withdrawalLocked(uint256)": FunctionFragment;
    "wrappedNativeToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_UNLOCKER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkHighTierVoteWeightThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyWithdrawalLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighTierVoteWeightThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoninToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "highTierThreshold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [string[], string[], string[]],
      [BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDateSynced",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSyncedWithdrawal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedThreshold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mapTokens",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mapTokensAndThresholds",
    values: [
      string[],
      string[],
      BigNumberish[],
      [BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVoteWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reachedWithdrawalLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDepositFor",
    values: [RequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roninChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyWithdrawalLimits",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHighTierThresholds",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setHighTierVoteWeightThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedThresholds",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlockFeePercentages",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedNativeTokenContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawal",
    values: [ReceiptStruct, SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFeePercentages",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockWithdrawal",
    values: [ReceiptStruct]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNativeToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_UNLOCKER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkHighTierVoteWeightThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighTierVoteWeightThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoninToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highTierThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDateSynced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSyncedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mapTokensAndThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reachedWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDepositFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roninChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyWithdrawalLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHighTierThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHighTierVoteWeightThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockFeePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedNativeTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFeePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNativeToken",
    data: BytesLike
  ): Result;

  events: {
    "ContractUpdated(uint8,address)": EventFragment;
    "DailyWithdrawalLimitsUpdated(address[],uint256[])": EventFragment;
    "DepositRequested(bytes32,tuple)": EventFragment;
    "HighTierThresholdsUpdated(address[],uint256[])": EventFragment;
    "HighTierVoteWeightThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LockedThresholdsUpdated(address[],uint256[])": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "TokenMapped(address[],address[],uint8[])": EventFragment;
    "UnlockFeePercentagesUpdated(address[],uint256[])": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawalLocked(bytes32,tuple)": EventFragment;
    "WithdrawalUnlocked(bytes32,tuple)": EventFragment;
    "Withdrew(bytes32,tuple)": EventFragment;
    "WrappedNativeTokenContractUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DailyWithdrawalLimitsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighTierThresholdsUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "HighTierVoteWeightThresholdUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedThresholdsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapped"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnlockFeePercentagesUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WrappedNativeTokenContractUpdated"
  ): EventFragment;
}

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type DailyWithdrawalLimitsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; limits: BigNumber[] }
>;

export type DailyWithdrawalLimitsUpdatedEventFilter =
  TypedEventFilter<DailyWithdrawalLimitsUpdatedEvent>;

export type DepositRequestedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type DepositRequestedEventFilter =
  TypedEventFilter<DepositRequestedEvent>;

export type HighTierThresholdsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; thresholds: BigNumber[] }
>;

export type HighTierThresholdsUpdatedEventFilter =
  TypedEventFilter<HighTierThresholdsUpdatedEvent>;

export type HighTierVoteWeightThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type HighTierVoteWeightThresholdUpdatedEventFilter =
  TypedEventFilter<HighTierVoteWeightThresholdUpdatedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type LockedThresholdsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; thresholds: BigNumber[] }
>;

export type LockedThresholdsUpdatedEventFilter =
  TypedEventFilter<LockedThresholdsUpdatedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type ThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type ThresholdUpdatedEventFilter =
  TypedEventFilter<ThresholdUpdatedEvent>;

export type TokenMappedEvent = TypedEvent<
  [string[], string[], number[]],
  { mainchainTokens: string[]; roninTokens: string[]; standards: number[] }
>;

export type TokenMappedEventFilter = TypedEventFilter<TokenMappedEvent>;

export type UnlockFeePercentagesUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; percentages: BigNumber[] }
>;

export type UnlockFeePercentagesUpdatedEventFilter =
  TypedEventFilter<UnlockFeePercentagesUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawalLockedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type WithdrawalLockedEventFilter =
  TypedEventFilter<WithdrawalLockedEvent>;

export type WithdrawalUnlockedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type WithdrawalUnlockedEventFilter =
  TypedEventFilter<WithdrawalUnlockedEvent>;

export type WithdrewEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;

export type WrappedNativeTokenContractUpdatedEvent = TypedEvent<
  [string],
  { weth: string }
>;

export type WrappedNativeTokenContractUpdatedEventFilter =
  TypedEventFilter<WrappedNativeTokenContractUpdatedEvent>;

export interface MainchainGatewayV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainchainGatewayV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAWAL_UNLOCKER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyPauser(overrides?: CallOverrides): Promise<[string]>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<[MappedTokenStructOutput] & { _token: MappedTokenStructOutput }>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _roleSetter: string,
      _wrappedToken: string,
      _roninChainId: BigNumberish,
      _numerator: BigNumberish,
      _highTierVWNumerator: BigNumberish,
      _denominator: BigNumberish,
      _addresses: [string[], string[], string[]],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      _standards: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeV2(
      bridgeManagerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastDateSynced(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveEther(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roninChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawalLocked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  WITHDRAWAL_UNLOCKER_ROLE(overrides?: CallOverrides): Promise<string>;

  _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  checkHighTierVoteWeightThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dailyWithdrawalLimit(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositCount(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyPauser(overrides?: CallOverrides): Promise<string>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getHighTierVoteWeightThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoninToken(
    _mainchainToken: string,
    overrides?: CallOverrides
  ): Promise<MappedTokenStructOutput>;

  getThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  highTierThreshold(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _roleSetter: string,
    _wrappedToken: string,
    _roninChainId: BigNumberish,
    _numerator: BigNumberish,
    _highTierVWNumerator: BigNumberish,
    _denominator: BigNumberish,
    _addresses: [string[], string[], string[]],
    _thresholds: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ],
    _standards: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeV2(
    bridgeManagerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastDateSynced(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lastSyncedWithdrawal(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedThreshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mapTokens(
    _mainchainTokens: string[],
    _roninTokens: string[],
    _standards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mapTokensAndThresholds(
    _mainchainTokens: string[],
    _roninTokens: string[],
    _standards: BigNumberish[],
    _thresholds: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  reachedWithdrawalLimit(
    _token: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  receiveEther(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestDepositFor(
    _request: RequestStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDailyWithdrawalLimits(
    _tokens: string[],
    _limits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyPauser(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHighTierThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHighTierVoteWeightThreshold(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockedThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnlockFeePercentages(
    _tokens: string[],
    _percentages: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrappedNativeTokenContract(
    _wrappedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitWithdrawal(
    _receipt: ReceiptStruct,
    _signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unlockFeePercentages(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockWithdrawal(
    _receipt: ReceiptStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalHash(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawalLocked(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wrappedNativeToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    WITHDRAWAL_UNLOCKER_ROLE(overrides?: CallOverrides): Promise<string>;

    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyPauser(overrides?: CallOverrides): Promise<string>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<MappedTokenStructOutput>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _roleSetter: string,
      _wrappedToken: string,
      _roninChainId: BigNumberish,
      _numerator: BigNumberish,
      _highTierVWNumerator: BigNumberish,
      _denominator: BigNumberish,
      _addresses: [string[], string[], string[]],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      _standards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(
      bridgeManagerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastDateSynced(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveEther(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyPauser(_addr: string, overrides?: CallOverrides): Promise<void>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _previousNum: BigNumber;
        _previousDenom: BigNumber;
      }
    >;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _previousNum: BigNumber;
        _previousDenom: BigNumber;
      }
    >;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawalHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawalLocked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "DailyWithdrawalLimitsUpdated(address[],uint256[])"(
      tokens?: null,
      limits?: null
    ): DailyWithdrawalLimitsUpdatedEventFilter;
    DailyWithdrawalLimitsUpdated(
      tokens?: null,
      limits?: null
    ): DailyWithdrawalLimitsUpdatedEventFilter;

    "DepositRequested(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): DepositRequestedEventFilter;
    DepositRequested(
      receiptHash?: null,
      receipt?: null
    ): DepositRequestedEventFilter;

    "HighTierThresholdsUpdated(address[],uint256[])"(
      tokens?: null,
      thresholds?: null
    ): HighTierThresholdsUpdatedEventFilter;
    HighTierThresholdsUpdated(
      tokens?: null,
      thresholds?: null
    ): HighTierThresholdsUpdatedEventFilter;

    "HighTierVoteWeightThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): HighTierVoteWeightThresholdUpdatedEventFilter;
    HighTierVoteWeightThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): HighTierVoteWeightThresholdUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LockedThresholdsUpdated(address[],uint256[])"(
      tokens?: null,
      thresholds?: null
    ): LockedThresholdsUpdatedEventFilter;
    LockedThresholdsUpdated(
      tokens?: null,
      thresholds?: null
    ): LockedThresholdsUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;
    ThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;

    "TokenMapped(address[],address[],uint8[])"(
      mainchainTokens?: null,
      roninTokens?: null,
      standards?: null
    ): TokenMappedEventFilter;
    TokenMapped(
      mainchainTokens?: null,
      roninTokens?: null,
      standards?: null
    ): TokenMappedEventFilter;

    "UnlockFeePercentagesUpdated(address[],uint256[])"(
      tokens?: null,
      percentages?: null
    ): UnlockFeePercentagesUpdatedEventFilter;
    UnlockFeePercentagesUpdated(
      tokens?: null,
      percentages?: null
    ): UnlockFeePercentagesUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawalLocked(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalLockedEventFilter;
    WithdrawalLocked(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalLockedEventFilter;

    "WithdrawalUnlocked(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalUnlockedEventFilter;
    WithdrawalUnlocked(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalUnlockedEventFilter;

    "Withdrew(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): WithdrewEventFilter;
    Withdrew(receiptHash?: null, receipt?: null): WithdrewEventFilter;

    "WrappedNativeTokenContractUpdated(address)"(
      weth?: null
    ): WrappedNativeTokenContractUpdatedEventFilter;
    WrappedNativeTokenContractUpdated(
      weth?: null
    ): WrappedNativeTokenContractUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_UNLOCKER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyPauser(overrides?: CallOverrides): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _roleSetter: string,
      _wrappedToken: string,
      _roninChainId: BigNumberish,
      _numerator: BigNumberish,
      _highTierVWNumerator: BigNumberish,
      _denominator: BigNumberish,
      _addresses: [string[], string[], string[]],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      _standards: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeV2(
      bridgeManagerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastDateSynced(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveEther(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalLocked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAWAL_UNLOCKER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _roleSetter: string,
      _wrappedToken: string,
      _roninChainId: BigNumberish,
      _numerator: BigNumberish,
      _highTierVWNumerator: BigNumberish,
      _denominator: BigNumberish,
      _addresses: [string[], string[], string[]],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      _standards: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeV2(
      bridgeManagerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastDateSynced(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveEther(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roninChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalLocked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedNativeToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
