/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OwnerStruct = {
  addr: string;
  tokenAddr: string;
  chainId: BigNumberish;
};

export type OwnerStructOutput = [string, string, BigNumber] & {
  addr: string;
  tokenAddr: string;
  chainId: BigNumber;
};

export type InfoStruct = {
  erc: BigNumberish;
  id: BigNumberish;
  quantity: BigNumberish;
};

export type InfoStructOutput = [number, BigNumber, BigNumber] & {
  erc: number;
  id: BigNumber;
  quantity: BigNumber;
};

export type ReceiptStruct = {
  id: BigNumberish;
  kind: BigNumberish;
  mainchain: OwnerStruct;
  ronin: OwnerStruct;
  info: InfoStruct;
};

export type ReceiptStructOutput = [
  BigNumber,
  number,
  OwnerStructOutput,
  OwnerStructOutput,
  InfoStructOutput
] & {
  id: BigNumber;
  kind: number;
  mainchain: OwnerStructOutput;
  ronin: OwnerStructOutput;
  info: InfoStructOutput;
};

export type RequestStruct = {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStruct;
};

export type RequestStructOutput = [string, string, InfoStructOutput] & {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStructOutput;
};

export type MappedTokenStruct = { erc: BigNumberish; tokenAddr: string };

export type MappedTokenStructOutput = [number, string] & {
  erc: number;
  tokenAddr: string;
};

export interface IRoninGatewayV3Interface extends utils.Interface {
  functions: {
    "bulkRequestWithdrawalFor((address,address,(uint8,uint256,uint256))[],uint256)": FunctionFragment;
    "bulkSubmitWithdrawalSignatures(uint256[],bytes[])": FunctionFragment;
    "depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": FunctionFragment;
    "depositVoted(uint256,uint256,address)": FunctionFragment;
    "getMainchainToken(address,uint256)": FunctionFragment;
    "getWithdrawalSignatures(uint256,address[])": FunctionFragment;
    "mainchainWithdrew(uint256)": FunctionFragment;
    "mainchainWithdrewVoted(uint256,address)": FunctionFragment;
    "mapTokens(address[],address[],uint256[],uint8[])": FunctionFragment;
    "requestWithdrawalFor((address,address,(uint8,uint256,uint256)),uint256)": FunctionFragment;
    "requestWithdrawalSignatures(uint256)": FunctionFragment;
    "tryBulkAcknowledgeMainchainWithdrew(uint256[])": FunctionFragment;
    "tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])": FunctionFragment;
    "withdrawalCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bulkRequestWithdrawalFor",
    values: [RequestStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkSubmitWithdrawalSignatures",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [ReceiptStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVoted",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainchainToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalSignatures",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mainchainWithdrew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mainchainWithdrewVoted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mapTokens",
    values: [string[], string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalFor",
    values: [RequestStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBulkAcknowledgeMainchainWithdrew",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBulkDepositFor",
    values: [ReceiptStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bulkRequestWithdrawalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkSubmitWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainchainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainchainWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainchainWithdrewVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBulkAcknowledgeMainchainWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBulkDepositFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalCount",
    data: BytesLike
  ): Result;

  events: {
    "DepositVoted(address,uint256,uint256,bytes32)": EventFragment;
    "Deposited(bytes32,tuple)": EventFragment;
    "MainchainWithdrew(bytes32,tuple)": EventFragment;
    "TokenMapped(address[],address[],uint256[],uint8[])": EventFragment;
    "TrustedThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawalRequested(bytes32,tuple)": EventFragment;
    "WithdrawalSignaturesRequested(bytes32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainchainWithdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequested"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawalSignaturesRequested"
  ): EventFragment;
}

export type DepositVotedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  {
    bridgeOperator: string;
    id: BigNumber;
    chainId: BigNumber;
    receiptHash: string;
  }
>;

export type DepositVotedEventFilter = TypedEventFilter<DepositVotedEvent>;

export type DepositedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type MainchainWithdrewEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type MainchainWithdrewEventFilter =
  TypedEventFilter<MainchainWithdrewEvent>;

export type TokenMappedEvent = TypedEvent<
  [string[], string[], BigNumber[], number[]],
  {
    roninTokens: string[];
    mainchainTokens: string[];
    chainIds: BigNumber[];
    standards: number[];
  }
>;

export type TokenMappedEventFilter = TypedEventFilter<TokenMappedEvent>;

export type TrustedThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type TrustedThresholdUpdatedEventFilter =
  TypedEventFilter<TrustedThresholdUpdatedEvent>;

export type WithdrawalRequestedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; arg1: ReceiptStructOutput }
>;

export type WithdrawalRequestedEventFilter =
  TypedEventFilter<WithdrawalRequestedEvent>;

export type WithdrawalSignaturesRequestedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; arg1: ReceiptStructOutput }
>;

export type WithdrawalSignaturesRequestedEventFilter =
  TypedEventFilter<WithdrawalSignaturesRequestedEvent>;

export interface IRoninGatewayV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRoninGatewayV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkSubmitWithdrawalSignatures(
      _withdrawals: BigNumberish[],
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MappedTokenStructOutput] & { _token: MappedTokenStructOutput }>;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bulkRequestWithdrawalFor(
    _requests: RequestStruct[],
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkSubmitWithdrawalSignatures(
    _withdrawals: BigNumberish[],
    _signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    _receipt: ReceiptStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositVoted(
    _chainId: BigNumberish,
    _depositId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMainchainToken(
    _roninToken: string,
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MappedTokenStructOutput>;

  getWithdrawalSignatures(
    _withdrawalId: BigNumberish,
    _validators: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  mainchainWithdrew(
    _withdrawalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainchainWithdrewVoted(
    _withdrawalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mapTokens(
    _roninTokens: string[],
    _mainchainTokens: string[],
    chainIds: BigNumberish[],
    _standards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalFor(
    _request: RequestStruct,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalSignatures(
    _withdrawalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryBulkAcknowledgeMainchainWithdrew(
    _withdrawalIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryBulkDepositFor(
    _receipts: ReceiptStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bulkSubmitWithdrawalSignatures(
      _withdrawals: BigNumberish[],
      _signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MappedTokenStructOutput>;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DepositVoted(address,uint256,uint256,bytes32)"(
      bridgeOperator?: string | null,
      id?: BigNumberish | null,
      chainId?: BigNumberish | null,
      receiptHash?: null
    ): DepositVotedEventFilter;
    DepositVoted(
      bridgeOperator?: string | null,
      id?: BigNumberish | null,
      chainId?: BigNumberish | null,
      receiptHash?: null
    ): DepositVotedEventFilter;

    "Deposited(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): DepositedEventFilter;
    Deposited(receiptHash?: null, receipt?: null): DepositedEventFilter;

    "MainchainWithdrew(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): MainchainWithdrewEventFilter;
    MainchainWithdrew(
      receiptHash?: null,
      receipt?: null
    ): MainchainWithdrewEventFilter;

    "TokenMapped(address[],address[],uint256[],uint8[])"(
      roninTokens?: null,
      mainchainTokens?: null,
      chainIds?: null,
      standards?: null
    ): TokenMappedEventFilter;
    TokenMapped(
      roninTokens?: null,
      mainchainTokens?: null,
      chainIds?: null,
      standards?: null
    ): TokenMappedEventFilter;

    "TrustedThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): TrustedThresholdUpdatedEventFilter;
    TrustedThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): TrustedThresholdUpdatedEventFilter;

    "WithdrawalRequested(bytes32,tuple)"(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalRequestedEventFilter;
    WithdrawalRequested(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalRequestedEventFilter;

    "WithdrawalSignaturesRequested(bytes32,tuple)"(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalSignaturesRequestedEventFilter;
    WithdrawalSignaturesRequested(
      receiptHash?: null,
      undefined?: null
    ): WithdrawalSignaturesRequestedEventFilter;
  };

  estimateGas: {
    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkSubmitWithdrawalSignatures(
      _withdrawals: BigNumberish[],
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bulkRequestWithdrawalFor(
      _requests: RequestStruct[],
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkSubmitWithdrawalSignatures(
      _withdrawals: BigNumberish[],
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositVoted(
      _chainId: BigNumberish,
      _depositId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainchainToken(
      _roninToken: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainchainWithdrew(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainchainWithdrewVoted(
      _withdrawalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapTokens(
      _roninTokens: string[],
      _mainchainTokens: string[],
      chainIds: BigNumberish[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalFor(
      _request: RequestStruct,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryBulkAcknowledgeMainchainWithdrew(
      _withdrawalIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryBulkDepositFor(
      _receipts: ReceiptStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
