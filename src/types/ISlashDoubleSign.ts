/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ISlashDoubleSignInterface extends utils.Interface {
  functions: {
    "getDoubleSignSlashingConfigs()": FunctionFragment;
    "setDoubleSignSlashingConfigs(uint256,uint256,uint256)": FunctionFragment;
    "slashDoubleSign(address,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDoubleSignSlashingConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDoubleSignSlashingConfigs",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashDoubleSign",
    values: [string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDoubleSignSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDoubleSignSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashDoubleSign",
    data: BytesLike
  ): Result;

  events: {
    "DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)": EventFragment;
    "Slashed(address,uint8,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DoubleSignSlashingConfigsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
}

export type DoubleSignSlashingConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    slashDoubleSignAmount: BigNumber;
    doubleSigningJailUntilBlock: BigNumber;
    doubleSigningOffsetLimitBlock: BigNumber;
  }
>;

export type DoubleSignSlashingConfigsUpdatedEventFilter =
  TypedEventFilter<DoubleSignSlashingConfigsUpdatedEvent>;

export type SlashedEvent = TypedEvent<
  [string, number, BigNumber],
  { validator: string; slashType: number; period: BigNumber }
>;

export type SlashedEventFilter = TypedEventFilter<SlashedEvent>;

export interface ISlashDoubleSign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISlashDoubleSignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDoubleSignSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _slashDoubleSignAmount: BigNumber;
        _doubleSigningJailUntilBlock: BigNumber;
        _doubleSigningOffsetLimitBlock: BigNumber;
      }
    >;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _doubleSigningOffsetLimitBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashDoubleSign(
      _validatorAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getDoubleSignSlashingConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _slashDoubleSignAmount: BigNumber;
      _doubleSigningJailUntilBlock: BigNumber;
      _doubleSigningOffsetLimitBlock: BigNumber;
    }
  >;

  setDoubleSignSlashingConfigs(
    _slashAmount: BigNumberish,
    _jailUntilBlock: BigNumberish,
    _doubleSigningOffsetLimitBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashDoubleSign(
    _validatorAddr: string,
    _header1: BytesLike,
    _header2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDoubleSignSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _slashDoubleSignAmount: BigNumber;
        _doubleSigningJailUntilBlock: BigNumber;
        _doubleSigningOffsetLimitBlock: BigNumber;
      }
    >;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _doubleSigningOffsetLimitBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashDoubleSign(
      _validatorAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)"(
      slashDoubleSignAmount?: null,
      doubleSigningJailUntilBlock?: null,
      doubleSigningOffsetLimitBlock?: null
    ): DoubleSignSlashingConfigsUpdatedEventFilter;
    DoubleSignSlashingConfigsUpdated(
      slashDoubleSignAmount?: null,
      doubleSigningJailUntilBlock?: null,
      doubleSigningOffsetLimitBlock?: null
    ): DoubleSignSlashingConfigsUpdatedEventFilter;

    "Slashed(address,uint8,uint256)"(
      validator?: string | null,
      slashType?: null,
      period?: null
    ): SlashedEventFilter;
    Slashed(
      validator?: string | null,
      slashType?: null,
      period?: null
    ): SlashedEventFilter;
  };

  estimateGas: {
    getDoubleSignSlashingConfigs(overrides?: CallOverrides): Promise<BigNumber>;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _doubleSigningOffsetLimitBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashDoubleSign(
      _validatorAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDoubleSignSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _doubleSigningOffsetLimitBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashDoubleSign(
      _validatorAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
