/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type EmergencyExitInfoStruct = {
  lockedAmount: BigNumberish;
  recyclingAt: BigNumberish;
};

export type EmergencyExitInfoStructOutput = [BigNumber, BigNumber] & {
  lockedAmount: BigNumber;
  recyclingAt: BigNumber;
};

export interface SlashingExecutionInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADDITION_GAS()": FunctionFragment;
    "PERIOD_DURATION()": FunctionFragment;
    "checkJailed(address)": FunctionFragment;
    "checkJailedAtBlock(address,uint256)": FunctionFragment;
    "checkManyJailed(address[])": FunctionFragment;
    "checkMiningRewardDeprecated(address)": FunctionFragment;
    "checkMiningRewardDeprecatedAtPeriod(address,uint256)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "currentPeriodStartAtBlock()": FunctionFragment;
    "epochEndingAt(uint256)": FunctionFragment;
    "epochOf(uint256)": FunctionFragment;
    "execBailOut(address,uint256)": FunctionFragment;
    "execSlash(address,uint256,uint256,bool)": FunctionFragment;
    "getBlockProducers()": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getEmergencyExitInfo(address)": FunctionFragment;
    "getJailedTimeLeft(address)": FunctionFragment;
    "getJailedTimeLeftAtBlock(address,uint256)": FunctionFragment;
    "getLastUpdatedBlock()": FunctionFragment;
    "getValidators()": FunctionFragment;
    "isBlockProducer(address)": FunctionFragment;
    "isPeriodEnding()": FunctionFragment;
    "maxPrioritizedValidatorNumber()": FunctionFragment;
    "maxValidatorNumber()": FunctionFragment;
    "numberOfBlocksInEpoch()": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setMaxPrioritizedValidatorNumber(uint256)": FunctionFragment;
    "setMaxValidatorNumber(uint256)": FunctionFragment;
    "totalBlockProducers()": FunctionFragment;
    "totalDeprecatedReward()": FunctionFragment;
    "tryGetPeriodOfEpoch(uint256)": FunctionFragment;
    "validatorCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADDITION_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERIOD_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "checkJailed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkJailedAtBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkManyJailed",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMiningRewardDeprecated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMiningRewardDeprecatedAtPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriodStartAtBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochEndingAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execBailOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execSlash",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockProducers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyExitInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJailedTimeLeft",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJailedTimeLeftAtBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlockProducer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPeriodEnding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPrioritizedValidatorNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxValidatorNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfBlocksInEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPrioritizedValidatorNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxValidatorNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlockProducers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeprecatedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryGetPeriodOfEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADDITION_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERIOD_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkJailedAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkManyJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMiningRewardDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMiningRewardDeprecatedAtPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriodStartAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochEndingAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execBailOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execSlash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyExitInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJailedTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJailedTimeLeftAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlockProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPeriodEnding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPrioritizedValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfBlocksInEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPrioritizedValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlockProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeprecatedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryGetPeriodOfEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;

  events: {
    "ContractUpdated(uint8,address)": EventFragment;
    "DeprecatedRewardRecycleFailed(address,uint256,uint256)": EventFragment;
    "DeprecatedRewardRecycled(address,uint256)": EventFragment;
    "MaxPrioritizedValidatorNumberUpdated(uint256)": EventFragment;
    "MaxValidatorNumberUpdated(uint256)": EventFragment;
    "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)": EventFragment;
    "ValidatorUnjailed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DeprecatedRewardRecycleFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeprecatedRewardRecycled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxPrioritizedValidatorNumberUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxValidatorNumberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorPunished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorUnjailed"): EventFragment;
}

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type DeprecatedRewardRecycleFailedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipientAddr: string; amount: BigNumber; balance: BigNumber }
>;

export type DeprecatedRewardRecycleFailedEventFilter =
  TypedEventFilter<DeprecatedRewardRecycleFailedEvent>;

export type DeprecatedRewardRecycledEvent = TypedEvent<
  [string, BigNumber],
  { recipientAddr: string; amount: BigNumber }
>;

export type DeprecatedRewardRecycledEventFilter =
  TypedEventFilter<DeprecatedRewardRecycledEvent>;

export type MaxPrioritizedValidatorNumberUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type MaxPrioritizedValidatorNumberUpdatedEventFilter =
  TypedEventFilter<MaxPrioritizedValidatorNumberUpdatedEvent>;

export type MaxValidatorNumberUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type MaxValidatorNumberUpdatedEventFilter =
  TypedEventFilter<MaxValidatorNumberUpdatedEvent>;

export type ValidatorPunishedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, boolean],
  {
    consensusAddr: string;
    period: BigNumber;
    jailedUntil: BigNumber;
    deductedStakingAmount: BigNumber;
    blockProducerRewardDeprecated: boolean;
    bridgeOperatorRewardDeprecated: boolean;
  }
>;

export type ValidatorPunishedEventFilter =
  TypedEventFilter<ValidatorPunishedEvent>;

export type ValidatorUnjailedEvent = TypedEvent<
  [string, BigNumber],
  { validator: string; period: BigNumber }
>;

export type ValidatorUnjailedEventFilter =
  TypedEventFilter<ValidatorUnjailedEvent>;

export interface SlashingExecution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SlashingExecutionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkJailed(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { _result: boolean[] }>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _result: boolean }>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _result: boolean }>;

    currentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    execBailOut(
      validatorAddr: string,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockProducers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _result: string[] }>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<
      [EmergencyExitInfoStructOutput] & { _info: EmergencyExitInfoStructOutput }
    >;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidators(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _validatorList: string[] }>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPeriodEnding(overrides?: CallOverrides): Promise<[boolean]>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maximumPrioritizedValidatorNumber: BigNumber }>;

    maxValidatorNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maximumValidatorNumber: BigNumber }>;

    numberOfBlocksInEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _numberOfBlocks: BigNumber }>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBlockProducers(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _total: BigNumber }>;

    totalDeprecatedReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
    >;

    validatorCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  checkJailed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  checkJailedAtBlock(
    _addr: string,
    _blockNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkManyJailed(
    _addrList: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  checkMiningRewardDeprecated(
    _blockProducer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkMiningRewardDeprecatedAtPeriod(
    _blockProducer: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

  epochEndingAt(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  epochOf(_block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  execBailOut(
    validatorAddr: string,
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execSlash(
    validatorAddr: string,
    newJailedUntil: BigNumberish,
    slashAmount: BigNumberish,
    cannotBailout: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockProducers(overrides?: CallOverrides): Promise<string[]>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEmergencyExitInfo(
    _consensusAddr: string,
    overrides?: CallOverrides
  ): Promise<EmergencyExitInfoStructOutput>;

  getJailedTimeLeft(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isJailed_: boolean;
      blockLeft_: BigNumber;
      epochLeft_: BigNumber;
    }
  >;

  getJailedTimeLeftAtBlock(
    _addr: string,
    _blockNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isJailed_: boolean;
      blockLeft_: BigNumber;
      epochLeft_: BigNumber;
    }
  >;

  getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getValidators(overrides?: CallOverrides): Promise<string[]>;

  isBlockProducer(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isPeriodEnding(overrides?: CallOverrides): Promise<boolean>;

  maxPrioritizedValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

  maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPrioritizedValidatorNumber(
    _number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxValidatorNumber(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeprecatedReward(overrides?: CallOverrides): Promise<BigNumber>;

  tryGetPeriodOfEpoch(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
  >;

  validatorCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    checkJailed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execBailOut(
      validatorAddr: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlockProducers(overrides?: CallOverrides): Promise<string[]>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<EmergencyExitInfoStructOutput>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<string[]>;

    isBlockProducer(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isPeriodEnding(overrides?: CallOverrides): Promise<boolean>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeprecatedReward(overrides?: CallOverrides): Promise<BigNumber>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
    >;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "DeprecatedRewardRecycleFailed(address,uint256,uint256)"(
      recipientAddr?: string | null,
      amount?: null,
      balance?: null
    ): DeprecatedRewardRecycleFailedEventFilter;
    DeprecatedRewardRecycleFailed(
      recipientAddr?: string | null,
      amount?: null,
      balance?: null
    ): DeprecatedRewardRecycleFailedEventFilter;

    "DeprecatedRewardRecycled(address,uint256)"(
      recipientAddr?: string | null,
      amount?: null
    ): DeprecatedRewardRecycledEventFilter;
    DeprecatedRewardRecycled(
      recipientAddr?: string | null,
      amount?: null
    ): DeprecatedRewardRecycledEventFilter;

    "MaxPrioritizedValidatorNumberUpdated(uint256)"(
      undefined?: null
    ): MaxPrioritizedValidatorNumberUpdatedEventFilter;
    MaxPrioritizedValidatorNumberUpdated(
      undefined?: null
    ): MaxPrioritizedValidatorNumberUpdatedEventFilter;

    "MaxValidatorNumberUpdated(uint256)"(
      undefined?: null
    ): MaxValidatorNumberUpdatedEventFilter;
    MaxValidatorNumberUpdated(
      undefined?: null
    ): MaxValidatorNumberUpdatedEventFilter;

    "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)"(
      consensusAddr?: string | null,
      period?: BigNumberish | null,
      jailedUntil?: null,
      deductedStakingAmount?: null,
      blockProducerRewardDeprecated?: null,
      bridgeOperatorRewardDeprecated?: null
    ): ValidatorPunishedEventFilter;
    ValidatorPunished(
      consensusAddr?: string | null,
      period?: BigNumberish | null,
      jailedUntil?: null,
      deductedStakingAmount?: null,
      blockProducerRewardDeprecated?: null,
      bridgeOperatorRewardDeprecated?: null
    ): ValidatorPunishedEventFilter;

    "ValidatorUnjailed(address,uint256)"(
      validator?: string | null,
      period?: null
    ): ValidatorUnjailedEventFilter;
    ValidatorUnjailed(
      validator?: string | null,
      period?: null
    ): ValidatorUnjailedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    checkJailed(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execBailOut(
      validatorAddr: string,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPeriodEnding(overrides?: CallOverrides): Promise<BigNumber>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeprecatedReward(overrides?: CallOverrides): Promise<BigNumber>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADDITION_GAS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkJailed(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPeriodStartAtBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execBailOut(
      validatorAddr: string,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockProducers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUpdatedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPeriodEnding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxValidatorNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfBlocksInEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBlockProducers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDeprecatedReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
