/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface JailingStorageInterface extends utils.Interface {
  functions: {
    "checkJailed(address)": FunctionFragment;
    "checkJailedAtBlock(address,uint256)": FunctionFragment;
    "checkManyJailed(address[])": FunctionFragment;
    "checkMiningRewardDeprecated(address)": FunctionFragment;
    "checkMiningRewardDeprecatedAtPeriod(address,uint256)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "epochOf(uint256)": FunctionFragment;
    "getJailedTimeLeft(address)": FunctionFragment;
    "getJailedTimeLeftAtBlock(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "checkJailed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkJailedAtBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkManyJailed",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMiningRewardDeprecated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMiningRewardDeprecatedAtPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJailedTimeLeft",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJailedTimeLeftAtBlock",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkJailedAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkManyJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMiningRewardDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMiningRewardDeprecatedAtPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJailedTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJailedTimeLeftAtBlock",
    data: BytesLike
  ): Result;

  events: {};
}

export interface JailingStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JailingStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkJailed(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { _result: boolean[] }>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _result: boolean }>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _result: boolean }>;

    currentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;
  };

  checkJailed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  checkJailedAtBlock(
    _addr: string,
    _blockNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkManyJailed(
    _addrList: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  checkMiningRewardDeprecated(
    _blockProducer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkMiningRewardDeprecatedAtPeriod(
    _blockProducer: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  epochOf(_block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getJailedTimeLeft(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isJailed_: boolean;
      blockLeft_: BigNumber;
      epochLeft_: BigNumber;
    }
  >;

  getJailedTimeLeftAtBlock(
    _addr: string,
    _blockNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isJailed_: boolean;
      blockLeft_: BigNumber;
      epochLeft_: BigNumber;
    }
  >;

  callStatic: {
    checkJailed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    checkJailed(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkJailed(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
