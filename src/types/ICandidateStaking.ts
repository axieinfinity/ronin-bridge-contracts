/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICandidateStakingInterface extends utils.Interface {
  functions: {
    "applyValidatorCandidate(address,address,address,uint256)": FunctionFragment;
    "execDeprecatePools(address[],uint256)": FunctionFragment;
    "getCommissionRateRange()": FunctionFragment;
    "getManyStakingAmounts(address[],address[])": FunctionFragment;
    "getManyStakingTotals(address[])": FunctionFragment;
    "getReward(address,address)": FunctionFragment;
    "getStakingAmount(address,address)": FunctionFragment;
    "getStakingTotal(address)": FunctionFragment;
    "minValidatorStakingAmount()": FunctionFragment;
    "requestEmergencyExit(address)": FunctionFragment;
    "requestRenounce(address)": FunctionFragment;
    "requestUpdateCommissionRate(address,uint256,uint256)": FunctionFragment;
    "setCommissionRateRange(uint256,uint256)": FunctionFragment;
    "setMinValidatorStakingAmount(uint256)": FunctionFragment;
    "stake(address)": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyValidatorCandidate",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execDeprecatePools",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionRateRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManyStakingAmounts",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getManyStakingTotals",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingTotal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minValidatorStakingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEmergencyExit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRenounce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUpdateCommissionRate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionRateRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinValidatorStakingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execDeprecatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionRateRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManyStakingAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManyStakingTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minValidatorStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEmergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRenounce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUpdateCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionRateRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinValidatorStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "CommissionRateRangeUpdated(uint256,uint256)": EventFragment;
    "MinValidatorStakingAmountUpdated(uint256)": EventFragment;
    "PoolApproved(address,address)": EventFragment;
    "PoolSharesUpdated(uint256,address,uint256)": EventFragment;
    "PoolsDeprecated(address[])": EventFragment;
    "PoolsUpdateConflicted(uint256,address[])": EventFragment;
    "PoolsUpdateFailed(uint256,address[],uint256[])": EventFragment;
    "PoolsUpdated(uint256,address[],uint256[],uint256[])": EventFragment;
    "RewardClaimed(address,address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "StakingAmountDeductFailed(address,address,uint256,uint256)": EventFragment;
    "StakingAmountTransferFailed(address,address,uint256,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "UserRewardUpdated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommissionRateRangeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinValidatorStakingAmountUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolSharesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsUpdateConflicted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsUpdateFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingAmountDeductFailed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakingAmountTransferFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRewardUpdated"): EventFragment;
}

export type CommissionRateRangeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { minRate: BigNumber; maxRate: BigNumber }
>;

export type CommissionRateRangeUpdatedEventFilter =
  TypedEventFilter<CommissionRateRangeUpdatedEvent>;

export type MinValidatorStakingAmountUpdatedEvent = TypedEvent<
  [BigNumber],
  { threshold: BigNumber }
>;

export type MinValidatorStakingAmountUpdatedEventFilter =
  TypedEventFilter<MinValidatorStakingAmountUpdatedEvent>;

export type PoolApprovedEvent = TypedEvent<
  [string, string],
  { validator: string; admin: string }
>;

export type PoolApprovedEventFilter = TypedEventFilter<PoolApprovedEvent>;

export type PoolSharesUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; poolAddr: string; shares: BigNumber }
>;

export type PoolSharesUpdatedEventFilter =
  TypedEventFilter<PoolSharesUpdatedEvent>;

export type PoolsDeprecatedEvent = TypedEvent<
  [string[]],
  { validator: string[] }
>;

export type PoolsDeprecatedEventFilter = TypedEventFilter<PoolsDeprecatedEvent>;

export type PoolsUpdateConflictedEvent = TypedEvent<
  [BigNumber, string[]],
  { period: BigNumber; poolAddrs: string[] }
>;

export type PoolsUpdateConflictedEventFilter =
  TypedEventFilter<PoolsUpdateConflictedEvent>;

export type PoolsUpdateFailedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  { period: BigNumber; poolAddrs: string[]; rewards: BigNumber[] }
>;

export type PoolsUpdateFailedEventFilter =
  TypedEventFilter<PoolsUpdateFailedEvent>;

export type PoolsUpdatedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], BigNumber[]],
  {
    period: BigNumber;
    poolAddrs: string[];
    aRps: BigNumber[];
    shares: BigNumber[];
  }
>;

export type PoolsUpdatedEventFilter = TypedEventFilter<PoolsUpdatedEvent>;

export type RewardClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  { poolAddr: string; user: string; amount: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber],
  { consensuAddr: string; amount: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type StakingAmountDeductFailedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    validator: string;
    recipient: string;
    amount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type StakingAmountDeductFailedEventFilter =
  TypedEventFilter<StakingAmountDeductFailedEvent>;

export type StakingAmountTransferFailedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    validator: string;
    admin: string;
    amount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type StakingAmountTransferFailedEventFilter =
  TypedEventFilter<StakingAmountTransferFailedEvent>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber],
  { consensuAddr: string; amount: BigNumber }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export type UserRewardUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  { poolAddr: string; user: string; debited: BigNumber }
>;

export type UserRewardUpdatedEventFilter =
  TypedEventFilter<UserRewardUpdatedEvent>;

export interface ICandidateStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICandidateStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execDeprecatePools(
      _pools: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCommissionRateRange(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _minRange: BigNumber; _maxRange: BigNumber }
    >;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minValidatorStakingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestEmergencyExit(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRenounce(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommissionRateRange(
      _minRate: BigNumberish,
      _maxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinValidatorStakingAmount(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _consensusAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applyValidatorCandidate(
    _candidateAdmin: string,
    _consensusAddr: string,
    _treasuryAddr: string,
    _commissionRate: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execDeprecatePools(
    _pools: string[],
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCommissionRateRange(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _minRange: BigNumber; _maxRange: BigNumber }
  >;

  getManyStakingAmounts(
    _poolAddrs: string[],
    _userList: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getManyStakingTotals(
    _poolAddrs: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getReward(
    _poolAddr: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingAmount(
    _poolAddr: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingTotal(
    _poolAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minValidatorStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  requestEmergencyExit(
    _consensusAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRenounce(
    _consensusAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestUpdateCommissionRate(
    _consensusAddr: string,
    _effectiveDaysOnwards: BigNumberish,
    _commissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommissionRateRange(
    _minRate: BigNumberish,
    _maxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinValidatorStakingAmount(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _consensusAddr: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _consensusAddr: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execDeprecatePools(
      _pools: string[],
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCommissionRateRange(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _minRange: BigNumber; _maxRange: BigNumber }
    >;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minValidatorStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    requestEmergencyExit(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRenounce(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommissionRateRange(
      _minRate: BigNumberish,
      _maxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinValidatorStakingAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_consensusAddr: string, overrides?: CallOverrides): Promise<void>;

    unstake(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CommissionRateRangeUpdated(uint256,uint256)"(
      minRate?: null,
      maxRate?: null
    ): CommissionRateRangeUpdatedEventFilter;
    CommissionRateRangeUpdated(
      minRate?: null,
      maxRate?: null
    ): CommissionRateRangeUpdatedEventFilter;

    "MinValidatorStakingAmountUpdated(uint256)"(
      threshold?: null
    ): MinValidatorStakingAmountUpdatedEventFilter;
    MinValidatorStakingAmountUpdated(
      threshold?: null
    ): MinValidatorStakingAmountUpdatedEventFilter;

    "PoolApproved(address,address)"(
      validator?: string | null,
      admin?: string | null
    ): PoolApprovedEventFilter;
    PoolApproved(
      validator?: string | null,
      admin?: string | null
    ): PoolApprovedEventFilter;

    "PoolSharesUpdated(uint256,address,uint256)"(
      period?: BigNumberish | null,
      poolAddr?: string | null,
      shares?: null
    ): PoolSharesUpdatedEventFilter;
    PoolSharesUpdated(
      period?: BigNumberish | null,
      poolAddr?: string | null,
      shares?: null
    ): PoolSharesUpdatedEventFilter;

    "PoolsDeprecated(address[])"(validator?: null): PoolsDeprecatedEventFilter;
    PoolsDeprecated(validator?: null): PoolsDeprecatedEventFilter;

    "PoolsUpdateConflicted(uint256,address[])"(
      period?: BigNumberish | null,
      poolAddrs?: null
    ): PoolsUpdateConflictedEventFilter;
    PoolsUpdateConflicted(
      period?: BigNumberish | null,
      poolAddrs?: null
    ): PoolsUpdateConflictedEventFilter;

    "PoolsUpdateFailed(uint256,address[],uint256[])"(
      period?: BigNumberish | null,
      poolAddrs?: null,
      rewards?: null
    ): PoolsUpdateFailedEventFilter;
    PoolsUpdateFailed(
      period?: BigNumberish | null,
      poolAddrs?: null,
      rewards?: null
    ): PoolsUpdateFailedEventFilter;

    "PoolsUpdated(uint256,address[],uint256[],uint256[])"(
      period?: BigNumberish | null,
      poolAddrs?: null,
      aRps?: null,
      shares?: null
    ): PoolsUpdatedEventFilter;
    PoolsUpdated(
      period?: BigNumberish | null,
      poolAddrs?: null,
      aRps?: null,
      shares?: null
    ): PoolsUpdatedEventFilter;

    "RewardClaimed(address,address,uint256)"(
      poolAddr?: string | null,
      user?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      poolAddr?: string | null,
      user?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;

    "Staked(address,uint256)"(
      consensuAddr?: string | null,
      amount?: null
    ): StakedEventFilter;
    Staked(consensuAddr?: string | null, amount?: null): StakedEventFilter;

    "StakingAmountDeductFailed(address,address,uint256,uint256)"(
      validator?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): StakingAmountDeductFailedEventFilter;
    StakingAmountDeductFailed(
      validator?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): StakingAmountDeductFailedEventFilter;

    "StakingAmountTransferFailed(address,address,uint256,uint256)"(
      validator?: string | null,
      admin?: string | null,
      amount?: null,
      contractBalance?: null
    ): StakingAmountTransferFailedEventFilter;
    StakingAmountTransferFailed(
      validator?: string | null,
      admin?: string | null,
      amount?: null,
      contractBalance?: null
    ): StakingAmountTransferFailedEventFilter;

    "Unstaked(address,uint256)"(
      consensuAddr?: string | null,
      amount?: null
    ): UnstakedEventFilter;
    Unstaked(consensuAddr?: string | null, amount?: null): UnstakedEventFilter;

    "UserRewardUpdated(address,address,uint256)"(
      poolAddr?: string | null,
      user?: string | null,
      debited?: null
    ): UserRewardUpdatedEventFilter;
    UserRewardUpdated(
      poolAddr?: string | null,
      user?: string | null,
      debited?: null
    ): UserRewardUpdatedEventFilter;
  };

  estimateGas: {
    applyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execDeprecatePools(
      _pools: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCommissionRateRange(overrides?: CallOverrides): Promise<BigNumber>;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minValidatorStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    requestEmergencyExit(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRenounce(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommissionRateRange(
      _minRate: BigNumberish,
      _maxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinValidatorStakingAmount(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _consensusAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execDeprecatePools(
      _pools: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCommissionRateRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minValidatorStakingAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestEmergencyExit(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRenounce(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommissionRateRange(
      _minRate: BigNumberish,
      _maxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinValidatorStakingAmount(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _consensusAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
