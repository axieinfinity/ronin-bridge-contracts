/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type CandidateProfileStruct = {
  id: string;
  consensus: string;
  admin: string;
  treasury: string;
  governor: string;
  pubkey: BytesLike;
};

export type CandidateProfileStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string
] & {
  id: string;
  consensus: string;
  admin: string;
  treasury: string;
  governor: string;
  pubkey: string;
};

export interface ProfileStorageInterface extends utils.Interface {
  functions: {
    "addNewProfile((address,address,address,address,address,bytes))": FunctionFragment;
    "changePubkey(address,bytes)": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getId2Profile(address)": FunctionFragment;
    "registerProfile((address,address,address,address,address,bytes))": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNewProfile",
    values: [CandidateProfileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "changePubkey",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getId2Profile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProfile",
    values: [CandidateProfileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePubkey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getId2Profile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;

  events: {
    "ContractUpdated(uint8,address)": EventFragment;
    "ProfileAdded(address)": EventFragment;
    "ProfileAddressChanged(address,uint8)": EventFragment;
    "PubkeyChanged(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;
}

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type ProfileAddedEvent = TypedEvent<[string], { id: string }>;

export type ProfileAddedEventFilter = TypedEventFilter<ProfileAddedEvent>;

export type ProfileAddressChangedEvent = TypedEvent<
  [string, number],
  { id: string; addressType: number }
>;

export type ProfileAddressChangedEventFilter =
  TypedEventFilter<ProfileAddressChangedEvent>;

export type PubkeyChangedEvent = TypedEvent<
  [string, string],
  { id: string; pubkey: string }
>;

export type PubkeyChangedEventFilter = TypedEventFilter<PubkeyChangedEvent>;

export interface ProfileStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProfileStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewProfile(
      profile: CandidateProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePubkey(
      id: string,
      pubkey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getId2Profile(
      id: string,
      overrides?: CallOverrides
    ): Promise<
      [CandidateProfileStructOutput] & { profile: CandidateProfileStructOutput }
    >;

    registerProfile(
      profile: CandidateProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addNewProfile(
    profile: CandidateProfileStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePubkey(
    id: string,
    pubkey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getId2Profile(
    id: string,
    overrides?: CallOverrides
  ): Promise<CandidateProfileStructOutput>;

  registerProfile(
    profile: CandidateProfileStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNewProfile(
      profile: CandidateProfileStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    changePubkey(
      id: string,
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getId2Profile(
      id: string,
      overrides?: CallOverrides
    ): Promise<CandidateProfileStructOutput>;

    registerProfile(
      profile: CandidateProfileStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "ProfileAdded(address)"(id?: string | null): ProfileAddedEventFilter;
    ProfileAdded(id?: string | null): ProfileAddedEventFilter;

    "ProfileAddressChanged(address,uint8)"(
      id?: string | null,
      addressType?: BigNumberish | null
    ): ProfileAddressChangedEventFilter;
    ProfileAddressChanged(
      id?: string | null,
      addressType?: BigNumberish | null
    ): ProfileAddressChangedEventFilter;

    "PubkeyChanged(address,bytes)"(
      id?: string | null,
      pubkey?: null
    ): PubkeyChangedEventFilter;
    PubkeyChanged(id?: string | null, pubkey?: null): PubkeyChangedEventFilter;
  };

  estimateGas: {
    addNewProfile(
      profile: CandidateProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePubkey(
      id: string,
      pubkey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId2Profile(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerProfile(
      profile: CandidateProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewProfile(
      profile: CandidateProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePubkey(
      id: string,
      pubkey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId2Profile(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerProfile(
      profile: CandidateProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
