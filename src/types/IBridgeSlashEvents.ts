/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBridgeSlashEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "RemovalRequested(uint256,address)": EventFragment;
    "Slashed(uint8,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RemovalRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
}

export type RemovalRequestedEvent = TypedEvent<
  [BigNumber, string],
  { period: BigNumber; bridgeOperator: string }
>;

export type RemovalRequestedEventFilter =
  TypedEventFilter<RemovalRequestedEvent>;

export type SlashedEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  {
    tier: number;
    bridgeOperator: string;
    period: BigNumber;
    slashUntilPeriod: BigNumber;
  }
>;

export type SlashedEventFilter = TypedEventFilter<SlashedEvent>;

export interface IBridgeSlashEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeSlashEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "RemovalRequested(uint256,address)"(
      period?: BigNumberish | null,
      bridgeOperator?: string | null
    ): RemovalRequestedEventFilter;
    RemovalRequested(
      period?: BigNumberish | null,
      bridgeOperator?: string | null
    ): RemovalRequestedEventFilter;

    "Slashed(uint8,address,uint256,uint256)"(
      tier?: BigNumberish | null,
      bridgeOperator?: string | null,
      period?: BigNumberish | null,
      slashUntilPeriod?: null
    ): SlashedEventFilter;
    Slashed(
      tier?: BigNumberish | null,
      bridgeOperator?: string | null,
      period?: BigNumberish | null,
      slashUntilPeriod?: null
    ): SlashedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
