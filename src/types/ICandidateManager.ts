/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ValidatorCandidateStruct = {
  admin: string;
  consensusAddr: string;
  treasuryAddr: string;
  ______deprecatedbridgeOperatorAddr: string;
  commissionRate: BigNumberish;
  revokingTimestamp: BigNumberish;
  topupDeadline: BigNumberish;
};

export type ValidatorCandidateStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  admin: string;
  consensusAddr: string;
  treasuryAddr: string;
  ______deprecatedbridgeOperatorAddr: string;
  commissionRate: BigNumber;
  revokingTimestamp: BigNumber;
  topupDeadline: BigNumber;
};

export type CommissionScheduleStruct = {
  effectiveTimestamp: BigNumberish;
  commissionRate: BigNumberish;
};

export type CommissionScheduleStructOutput = [BigNumber, BigNumber] & {
  effectiveTimestamp: BigNumber;
  commissionRate: BigNumber;
};

export interface ICandidateManagerInterface extends utils.Interface {
  functions: {
    "execApplyValidatorCandidate(address,address,address,uint256)": FunctionFragment;
    "execRequestRenounceCandidate(address,uint256)": FunctionFragment;
    "execRequestUpdateCommissionRate(address,uint256,uint256)": FunctionFragment;
    "getCandidateInfo(address)": FunctionFragment;
    "getCandidateInfos()": FunctionFragment;
    "getCommissionChangeSchedule(address)": FunctionFragment;
    "getValidatorCandidates()": FunctionFragment;
    "isCandidateAdmin(address,address)": FunctionFragment;
    "isValidatorCandidate(address)": FunctionFragment;
    "maxValidatorCandidate()": FunctionFragment;
    "minEffectiveDaysOnwards()": FunctionFragment;
    "setMaxValidatorCandidate(uint256)": FunctionFragment;
    "setMinEffectiveDaysOnwards(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "execApplyValidatorCandidate",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execRequestRenounceCandidate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execRequestUpdateCommissionRate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionChangeSchedule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCandidateAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxValidatorCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minEffectiveDaysOnwards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxValidatorCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinEffectiveDaysOnwards",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "execApplyValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execRequestRenounceCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execRequestUpdateCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionChangeSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCandidateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minEffectiveDaysOnwards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinEffectiveDaysOnwards",
    data: BytesLike
  ): Result;

  events: {
    "CandidateGranted(address,address,address)": EventFragment;
    "CandidateRevokingTimestampUpdated(address,uint256)": EventFragment;
    "CandidateTopupDeadlineUpdated(address,uint256)": EventFragment;
    "CandidatesRevoked(address[])": EventFragment;
    "CommissionRateUpdateScheduled(address,uint256,uint256)": EventFragment;
    "CommissionRateUpdated(address,uint256)": EventFragment;
    "MaxValidatorCandidateUpdated(uint256)": EventFragment;
    "MinEffectiveDaysOnwardsUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CandidateGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CandidateRevokingTimestampUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CandidateTopupDeadlineUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidatesRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommissionRateUpdateScheduled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommissionRateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxValidatorCandidateUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinEffectiveDaysOnwardsUpdated"
  ): EventFragment;
}

export type CandidateGrantedEvent = TypedEvent<
  [string, string, string],
  { consensusAddr: string; treasuryAddr: string; admin: string }
>;

export type CandidateGrantedEventFilter =
  TypedEventFilter<CandidateGrantedEvent>;

export type CandidateRevokingTimestampUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; revokingTimestamp: BigNumber }
>;

export type CandidateRevokingTimestampUpdatedEventFilter =
  TypedEventFilter<CandidateRevokingTimestampUpdatedEvent>;

export type CandidateTopupDeadlineUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; topupDeadline: BigNumber }
>;

export type CandidateTopupDeadlineUpdatedEventFilter =
  TypedEventFilter<CandidateTopupDeadlineUpdatedEvent>;

export type CandidatesRevokedEvent = TypedEvent<
  [string[]],
  { consensusAddrs: string[] }
>;

export type CandidatesRevokedEventFilter =
  TypedEventFilter<CandidatesRevokedEvent>;

export type CommissionRateUpdateScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { consensusAddr: string; effectiveTimestamp: BigNumber; rate: BigNumber }
>;

export type CommissionRateUpdateScheduledEventFilter =
  TypedEventFilter<CommissionRateUpdateScheduledEvent>;

export type CommissionRateUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; rate: BigNumber }
>;

export type CommissionRateUpdatedEventFilter =
  TypedEventFilter<CommissionRateUpdatedEvent>;

export type MaxValidatorCandidateUpdatedEvent = TypedEvent<
  [BigNumber],
  { threshold: BigNumber }
>;

export type MaxValidatorCandidateUpdatedEventFilter =
  TypedEventFilter<MaxValidatorCandidateUpdatedEvent>;

export type MinEffectiveDaysOnwardsUpdatedEvent = TypedEvent<
  [BigNumber],
  { numOfDays: BigNumber }
>;

export type MinEffectiveDaysOnwardsUpdatedEventFilter =
  TypedEventFilter<MinEffectiveDaysOnwardsUpdatedEvent>;

export interface ICandidateManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICandidateManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execApplyValidatorCandidate(
      _admin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execRequestRenounceCandidate(
      arg0: string,
      _secsLeft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveTimestamp: BigNumberish,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<[ValidatorCandidateStructOutput]>;

    getCandidateInfos(
      overrides?: CallOverrides
    ): Promise<[ValidatorCandidateStructOutput[]]>;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<[CommissionScheduleStructOutput]>;

    getValidatorCandidates(overrides?: CallOverrides): Promise<[string[]]>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxValidatorCandidate(overrides?: CallOverrides): Promise<[BigNumber]>;

    minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMaxValidatorCandidate(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  execApplyValidatorCandidate(
    _admin: string,
    _consensusAddr: string,
    _treasuryAddr: string,
    _commissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execRequestRenounceCandidate(
    arg0: string,
    _secsLeft: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execRequestUpdateCommissionRate(
    _consensusAddr: string,
    _effectiveTimestamp: BigNumberish,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCandidateInfo(
    _candidate: string,
    overrides?: CallOverrides
  ): Promise<ValidatorCandidateStructOutput>;

  getCandidateInfos(
    overrides?: CallOverrides
  ): Promise<ValidatorCandidateStructOutput[]>;

  getCommissionChangeSchedule(
    _candidate: string,
    overrides?: CallOverrides
  ): Promise<CommissionScheduleStructOutput>;

  getValidatorCandidates(overrides?: CallOverrides): Promise<string[]>;

  isCandidateAdmin(
    _candidate: string,
    _admin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidatorCandidate(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxValidatorCandidate(overrides?: CallOverrides): Promise<BigNumber>;

  minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxValidatorCandidate(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinEffectiveDaysOnwards(
    _numOfDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    execApplyValidatorCandidate(
      _admin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execRequestRenounceCandidate(
      arg0: string,
      _secsLeft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveTimestamp: BigNumberish,
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<ValidatorCandidateStructOutput>;

    getCandidateInfos(
      overrides?: CallOverrides
    ): Promise<ValidatorCandidateStructOutput[]>;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<CommissionScheduleStructOutput>;

    getValidatorCandidates(overrides?: CallOverrides): Promise<string[]>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxValidatorCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxValidatorCandidate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CandidateGranted(address,address,address)"(
      consensusAddr?: string | null,
      treasuryAddr?: string | null,
      admin?: string | null
    ): CandidateGrantedEventFilter;
    CandidateGranted(
      consensusAddr?: string | null,
      treasuryAddr?: string | null,
      admin?: string | null
    ): CandidateGrantedEventFilter;

    "CandidateRevokingTimestampUpdated(address,uint256)"(
      consensusAddr?: string | null,
      revokingTimestamp?: null
    ): CandidateRevokingTimestampUpdatedEventFilter;
    CandidateRevokingTimestampUpdated(
      consensusAddr?: string | null,
      revokingTimestamp?: null
    ): CandidateRevokingTimestampUpdatedEventFilter;

    "CandidateTopupDeadlineUpdated(address,uint256)"(
      consensusAddr?: string | null,
      topupDeadline?: null
    ): CandidateTopupDeadlineUpdatedEventFilter;
    CandidateTopupDeadlineUpdated(
      consensusAddr?: string | null,
      topupDeadline?: null
    ): CandidateTopupDeadlineUpdatedEventFilter;

    "CandidatesRevoked(address[])"(
      consensusAddrs?: null
    ): CandidatesRevokedEventFilter;
    CandidatesRevoked(consensusAddrs?: null): CandidatesRevokedEventFilter;

    "CommissionRateUpdateScheduled(address,uint256,uint256)"(
      consensusAddr?: string | null,
      effectiveTimestamp?: null,
      rate?: null
    ): CommissionRateUpdateScheduledEventFilter;
    CommissionRateUpdateScheduled(
      consensusAddr?: string | null,
      effectiveTimestamp?: null,
      rate?: null
    ): CommissionRateUpdateScheduledEventFilter;

    "CommissionRateUpdated(address,uint256)"(
      consensusAddr?: string | null,
      rate?: null
    ): CommissionRateUpdatedEventFilter;
    CommissionRateUpdated(
      consensusAddr?: string | null,
      rate?: null
    ): CommissionRateUpdatedEventFilter;

    "MaxValidatorCandidateUpdated(uint256)"(
      threshold?: null
    ): MaxValidatorCandidateUpdatedEventFilter;
    MaxValidatorCandidateUpdated(
      threshold?: null
    ): MaxValidatorCandidateUpdatedEventFilter;

    "MinEffectiveDaysOnwardsUpdated(uint256)"(
      numOfDays?: null
    ): MinEffectiveDaysOnwardsUpdatedEventFilter;
    MinEffectiveDaysOnwardsUpdated(
      numOfDays?: null
    ): MinEffectiveDaysOnwardsUpdatedEventFilter;
  };

  estimateGas: {
    execApplyValidatorCandidate(
      _admin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execRequestRenounceCandidate(
      arg0: string,
      _secsLeft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveTimestamp: BigNumberish,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCandidateInfos(overrides?: CallOverrides): Promise<BigNumber>;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxValidatorCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxValidatorCandidate(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execApplyValidatorCandidate(
      _admin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execRequestRenounceCandidate(
      arg0: string,
      _secsLeft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveTimestamp: BigNumberish,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCandidateInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorCandidates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxValidatorCandidate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minEffectiveDaysOnwards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxValidatorCandidate(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
