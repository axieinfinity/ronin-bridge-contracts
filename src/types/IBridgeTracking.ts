/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBridgeTrackingInterface extends utils.Interface {
  functions: {
    "getManyTotalBallots(uint256,address[])": FunctionFragment;
    "handleVoteApproved(uint8,uint256)": FunctionFragment;
    "recordVote(uint8,uint256,address)": FunctionFragment;
    "startedAtBlock()": FunctionFragment;
    "totalBallot(uint256)": FunctionFragment;
    "totalBallotOf(uint256,address)": FunctionFragment;
    "totalVote(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getManyTotalBallots",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "handleVoteApproved",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordVote",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startedAtBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBallot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBallotOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVote",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getManyTotalBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleVoteApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recordVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startedAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBallotOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalVote", data: BytesLike): Result;

  events: {
    "ExternalCallFailed(address,bytes4,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExternalCallFailed"): EventFragment;
}

export type ExternalCallFailedEvent = TypedEvent<
  [string, string, string],
  { to: string; msgSig: string; reason: string }
>;

export type ExternalCallFailedEventFilter =
  TypedEventFilter<ExternalCallFailedEvent>;

export interface IBridgeTracking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeTrackingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getManyTotalBallots(
      _period: BigNumberish,
      _bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    handleVoteApproved(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recordVote(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startedAtBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBallot(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalBallotOf(
      _period: BigNumberish,
      _bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVote(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getManyTotalBallots(
    _period: BigNumberish,
    _bridgeOperators: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  handleVoteApproved(
    _kind: BigNumberish,
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recordVote(
    _kind: BigNumberish,
    _requestId: BigNumberish,
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalBallot(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalBallotOf(
    _period: BigNumberish,
    _bridgeOperator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVote(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getManyTotalBallots(
      _period: BigNumberish,
      _bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    handleVoteApproved(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recordVote(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalBallot(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBallotOf(
      _period: BigNumberish,
      _bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVote(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ExternalCallFailed(address,bytes4,bytes)"(
      to?: string | null,
      msgSig?: BytesLike | null,
      reason?: null
    ): ExternalCallFailedEventFilter;
    ExternalCallFailed(
      to?: string | null,
      msgSig?: BytesLike | null,
      reason?: null
    ): ExternalCallFailedEventFilter;
  };

  estimateGas: {
    getManyTotalBallots(
      _period: BigNumberish,
      _bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleVoteApproved(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recordVote(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalBallot(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBallotOf(
      _period: BigNumberish,
      _bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVote(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getManyTotalBallots(
      _period: BigNumberish,
      _bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleVoteApproved(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recordVote(
      _kind: BigNumberish,
      _requestId: BigNumberish,
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startedAtBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBallot(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBallotOf(
      _period: BigNumberish,
      _bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVote(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
