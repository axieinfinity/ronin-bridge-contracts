/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockTUint256SlotInterface extends utils.Interface {
  functions: {
    "addAssignCustomSlot(uint256)": FunctionFragment;
    "addAssignPrimitive(uint256)": FunctionFragment;
    "addCustomSlot(uint256)": FunctionFragment;
    "addPrimitive(uint256)": FunctionFragment;
    "divCustomSlot(uint256)": FunctionFragment;
    "divPrimitive(uint256)": FunctionFragment;
    "getCustomSlot()": FunctionFragment;
    "getPrimitive()": FunctionFragment;
    "mulCustomSlot(uint256)": FunctionFragment;
    "mulPrimitive(uint256)": FunctionFragment;
    "postDecrementCustomSlot()": FunctionFragment;
    "postDecrementPrimitive()": FunctionFragment;
    "postIncrementCustomSlot()": FunctionFragment;
    "postIncrementPrimitive()": FunctionFragment;
    "preDecrementCustomSlot()": FunctionFragment;
    "preDecrementPrimitive()": FunctionFragment;
    "preIncrementCustomSlot()": FunctionFragment;
    "preIncrementPrimitive()": FunctionFragment;
    "setCustomSlot(uint256)": FunctionFragment;
    "setPrimitive(uint256)": FunctionFragment;
    "subAssignCustomSlot(uint256)": FunctionFragment;
    "subAssignPrimitive(uint256)": FunctionFragment;
    "subCustomSlot(uint256)": FunctionFragment;
    "subPrimitive(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAssignCustomSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAssignPrimitive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCustomSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPrimitive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divCustomSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divPrimitive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimitive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mulCustomSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulPrimitive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postDecrementCustomSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postDecrementPrimitive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postIncrementCustomSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postIncrementPrimitive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preDecrementCustomSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preDecrementPrimitive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preIncrementCustomSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preIncrementPrimitive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimitive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subAssignCustomSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subAssignPrimitive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subCustomSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subPrimitive",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAssignCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssignPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postDecrementCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postDecrementPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postIncrementCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postIncrementPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preDecrementCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preDecrementPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preIncrementCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preIncrementPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subAssignCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subAssignPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subCustomSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subPrimitive",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockTUint256Slot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockTUint256SlotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAssignCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAssignPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    addPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    divCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    divPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    getCustomSlot(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrimitive(overrides?: CallOverrides): Promise<[BigNumber]>;

    mulCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    mulPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    postDecrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postDecrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postIncrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postIncrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preDecrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preDecrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preIncrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preIncrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subAssignCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subAssignPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    subPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;
  };

  addAssignCustomSlot(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAssignPrimitive(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCustomSlot(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addPrimitive(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  divCustomSlot(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  divPrimitive(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCustomSlot(overrides?: CallOverrides): Promise<BigNumber>;

  getPrimitive(overrides?: CallOverrides): Promise<BigNumber>;

  mulCustomSlot(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mulPrimitive(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  postDecrementCustomSlot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postDecrementPrimitive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postIncrementCustomSlot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postIncrementPrimitive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preDecrementCustomSlot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preDecrementPrimitive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preIncrementCustomSlot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preIncrementPrimitive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCustomSlot(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrimitive(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subAssignCustomSlot(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subAssignPrimitive(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subCustomSlot(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  subPrimitive(
    val: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addAssignCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAssignPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCustomSlot(overrides?: CallOverrides): Promise<BigNumber>;

    getPrimitive(overrides?: CallOverrides): Promise<BigNumber>;

    mulCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postDecrementCustomSlot(overrides?: CallOverrides): Promise<BigNumber>;

    postDecrementPrimitive(overrides?: CallOverrides): Promise<BigNumber>;

    postIncrementCustomSlot(overrides?: CallOverrides): Promise<BigNumber>;

    postIncrementPrimitive(overrides?: CallOverrides): Promise<BigNumber>;

    preDecrementCustomSlot(overrides?: CallOverrides): Promise<BigNumber>;

    preDecrementPrimitive(overrides?: CallOverrides): Promise<BigNumber>;

    preIncrementCustomSlot(overrides?: CallOverrides): Promise<BigNumber>;

    preIncrementPrimitive(overrides?: CallOverrides): Promise<BigNumber>;

    setCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subAssignCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subAssignPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addAssignCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAssignPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCustomSlot(overrides?: CallOverrides): Promise<BigNumber>;

    getPrimitive(overrides?: CallOverrides): Promise<BigNumber>;

    mulCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postDecrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postDecrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postIncrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postIncrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preDecrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preDecrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preIncrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preIncrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subAssignCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subAssignPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAssignCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAssignPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCustomSlot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrimitive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mulCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postDecrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postDecrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postIncrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postIncrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preDecrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preDecrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preIncrementCustomSlot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preIncrementPrimitive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subAssignCustomSlot(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subAssignPrimitive(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subCustomSlot(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subPrimitive(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
