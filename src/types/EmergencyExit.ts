/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ValidatorCandidateStruct = {
  admin: string;
  consensusAddr: string;
  treasuryAddr: string;
  ______deprecatedbridgeOperatorAddr: string;
  commissionRate: BigNumberish;
  revokingTimestamp: BigNumberish;
  topupDeadline: BigNumberish;
};

export type ValidatorCandidateStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  admin: string;
  consensusAddr: string;
  treasuryAddr: string;
  ______deprecatedbridgeOperatorAddr: string;
  commissionRate: BigNumber;
  revokingTimestamp: BigNumber;
  topupDeadline: BigNumber;
};

export type CommissionScheduleStruct = {
  effectiveTimestamp: BigNumberish;
  commissionRate: BigNumberish;
};

export type CommissionScheduleStructOutput = [BigNumber, BigNumber] & {
  effectiveTimestamp: BigNumber;
  commissionRate: BigNumber;
};

export type EmergencyExitInfoStruct = {
  lockedAmount: BigNumberish;
  recyclingAt: BigNumberish;
};

export type EmergencyExitInfoStructOutput = [BigNumber, BigNumber] & {
  lockedAmount: BigNumber;
  recyclingAt: BigNumber;
};

export interface EmergencyExitInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADDITION_GAS()": FunctionFragment;
    "PERIOD_DURATION()": FunctionFragment;
    "checkJailed(address)": FunctionFragment;
    "checkJailedAtBlock(address,uint256)": FunctionFragment;
    "checkManyJailed(address[])": FunctionFragment;
    "checkMiningRewardDeprecated(address)": FunctionFragment;
    "checkMiningRewardDeprecatedAtPeriod(address,uint256)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "currentPeriodStartAtBlock()": FunctionFragment;
    "emergencyExitLockedAmount()": FunctionFragment;
    "emergencyExpiryDuration()": FunctionFragment;
    "epochEndingAt(uint256)": FunctionFragment;
    "epochOf(uint256)": FunctionFragment;
    "execApplyValidatorCandidate(address,address,address,uint256)": FunctionFragment;
    "execEmergencyExit(address,uint256)": FunctionFragment;
    "execReleaseLockedFundForEmergencyExitRequest(address,address)": FunctionFragment;
    "execRequestRenounceCandidate(address,uint256)": FunctionFragment;
    "execRequestUpdateCommissionRate(address,uint256,uint256)": FunctionFragment;
    "getBlockProducers()": FunctionFragment;
    "getCandidateInfo(address)": FunctionFragment;
    "getCandidateInfos()": FunctionFragment;
    "getCommissionChangeSchedule(address)": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getEmergencyExitInfo(address)": FunctionFragment;
    "getJailedTimeLeft(address)": FunctionFragment;
    "getJailedTimeLeftAtBlock(address,uint256)": FunctionFragment;
    "getLastUpdatedBlock()": FunctionFragment;
    "getValidatorCandidates()": FunctionFragment;
    "getValidators()": FunctionFragment;
    "isBlockProducer(address)": FunctionFragment;
    "isCandidateAdmin(address,address)": FunctionFragment;
    "isPeriodEnding()": FunctionFragment;
    "isValidatorCandidate(address)": FunctionFragment;
    "maxPrioritizedValidatorNumber()": FunctionFragment;
    "maxValidatorCandidate()": FunctionFragment;
    "maxValidatorNumber()": FunctionFragment;
    "minEffectiveDaysOnwards()": FunctionFragment;
    "numberOfBlocksInEpoch()": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setEmergencyExitLockedAmount(uint256)": FunctionFragment;
    "setEmergencyExpiryDuration(uint256)": FunctionFragment;
    "setMaxPrioritizedValidatorNumber(uint256)": FunctionFragment;
    "setMaxValidatorCandidate(uint256)": FunctionFragment;
    "setMaxValidatorNumber(uint256)": FunctionFragment;
    "setMinEffectiveDaysOnwards(uint256)": FunctionFragment;
    "totalBlockProducers()": FunctionFragment;
    "totalDeprecatedReward()": FunctionFragment;
    "tryGetPeriodOfEpoch(uint256)": FunctionFragment;
    "validatorCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADDITION_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERIOD_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "checkJailed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkJailedAtBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkManyJailed",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMiningRewardDeprecated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMiningRewardDeprecatedAtPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriodStartAtBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExitLockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExpiryDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochEndingAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execApplyValidatorCandidate",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execEmergencyExit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execReleaseLockedFundForEmergencyExitRequest",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "execRequestRenounceCandidate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execRequestUpdateCommissionRate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockProducers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionChangeSchedule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyExitInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJailedTimeLeft",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJailedTimeLeftAtBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlockProducer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCandidateAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPeriodEnding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPrioritizedValidatorNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxValidatorCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxValidatorNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minEffectiveDaysOnwards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfBlocksInEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyExitLockedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyExpiryDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPrioritizedValidatorNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxValidatorCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxValidatorNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinEffectiveDaysOnwards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlockProducers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeprecatedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryGetPeriodOfEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADDITION_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERIOD_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkJailedAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkManyJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMiningRewardDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMiningRewardDeprecatedAtPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriodStartAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExitLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExpiryDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochEndingAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execApplyValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execEmergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execReleaseLockedFundForEmergencyExitRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execRequestRenounceCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execRequestUpdateCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionChangeSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyExitInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJailedTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJailedTimeLeftAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlockProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCandidateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPeriodEnding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPrioritizedValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minEffectiveDaysOnwards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfBlocksInEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyExitLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyExpiryDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPrioritizedValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinEffectiveDaysOnwards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlockProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeprecatedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryGetPeriodOfEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;

  events: {
    "CandidateGranted(address,address,address)": EventFragment;
    "CandidateRevokingTimestampUpdated(address,uint256)": EventFragment;
    "CandidateTopupDeadlineUpdated(address,uint256)": EventFragment;
    "CandidatesRevoked(address[])": EventFragment;
    "CommissionRateUpdateScheduled(address,uint256,uint256)": EventFragment;
    "CommissionRateUpdated(address,uint256)": EventFragment;
    "ContractUpdated(uint8,address)": EventFragment;
    "DeprecatedRewardRecycleFailed(address,uint256,uint256)": EventFragment;
    "DeprecatedRewardRecycled(address,uint256)": EventFragment;
    "EmergencyExitLockedAmountUpdated(uint256)": EventFragment;
    "EmergencyExitLockedFundReleased(address,address,uint256)": EventFragment;
    "EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)": EventFragment;
    "EmergencyExitRequested(address,uint256)": EventFragment;
    "EmergencyExpiryDurationUpdated(uint256)": EventFragment;
    "MaxPrioritizedValidatorNumberUpdated(uint256)": EventFragment;
    "MaxValidatorCandidateUpdated(uint256)": EventFragment;
    "MaxValidatorNumberUpdated(uint256)": EventFragment;
    "MinEffectiveDaysOnwardsUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CandidateGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CandidateRevokingTimestampUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CandidateTopupDeadlineUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidatesRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommissionRateUpdateScheduled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommissionRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DeprecatedRewardRecycleFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeprecatedRewardRecycled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyExitLockedAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyExitLockedFundReleased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyExitLockedFundReleasingFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitRequested"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyExpiryDurationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxPrioritizedValidatorNumberUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxValidatorCandidateUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxValidatorNumberUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinEffectiveDaysOnwardsUpdated"
  ): EventFragment;
}

export type CandidateGrantedEvent = TypedEvent<
  [string, string, string],
  { consensusAddr: string; treasuryAddr: string; admin: string }
>;

export type CandidateGrantedEventFilter =
  TypedEventFilter<CandidateGrantedEvent>;

export type CandidateRevokingTimestampUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; revokingTimestamp: BigNumber }
>;

export type CandidateRevokingTimestampUpdatedEventFilter =
  TypedEventFilter<CandidateRevokingTimestampUpdatedEvent>;

export type CandidateTopupDeadlineUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; topupDeadline: BigNumber }
>;

export type CandidateTopupDeadlineUpdatedEventFilter =
  TypedEventFilter<CandidateTopupDeadlineUpdatedEvent>;

export type CandidatesRevokedEvent = TypedEvent<
  [string[]],
  { consensusAddrs: string[] }
>;

export type CandidatesRevokedEventFilter =
  TypedEventFilter<CandidatesRevokedEvent>;

export type CommissionRateUpdateScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { consensusAddr: string; effectiveTimestamp: BigNumber; rate: BigNumber }
>;

export type CommissionRateUpdateScheduledEventFilter =
  TypedEventFilter<CommissionRateUpdateScheduledEvent>;

export type CommissionRateUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; rate: BigNumber }
>;

export type CommissionRateUpdatedEventFilter =
  TypedEventFilter<CommissionRateUpdatedEvent>;

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type DeprecatedRewardRecycleFailedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipientAddr: string; amount: BigNumber; balance: BigNumber }
>;

export type DeprecatedRewardRecycleFailedEventFilter =
  TypedEventFilter<DeprecatedRewardRecycleFailedEvent>;

export type DeprecatedRewardRecycledEvent = TypedEvent<
  [string, BigNumber],
  { recipientAddr: string; amount: BigNumber }
>;

export type DeprecatedRewardRecycledEventFilter =
  TypedEventFilter<DeprecatedRewardRecycledEvent>;

export type EmergencyExitLockedAmountUpdatedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type EmergencyExitLockedAmountUpdatedEventFilter =
  TypedEventFilter<EmergencyExitLockedAmountUpdatedEvent>;

export type EmergencyExitLockedFundReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  { consensusAddr: string; recipient: string; unlockedAmount: BigNumber }
>;

export type EmergencyExitLockedFundReleasedEventFilter =
  TypedEventFilter<EmergencyExitLockedFundReleasedEvent>;

export type EmergencyExitLockedFundReleasingFailedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    consensusAddr: string;
    recipient: string;
    unlockedAmount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type EmergencyExitLockedFundReleasingFailedEventFilter =
  TypedEventFilter<EmergencyExitLockedFundReleasingFailedEvent>;

export type EmergencyExitRequestedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; lockedAmount: BigNumber }
>;

export type EmergencyExitRequestedEventFilter =
  TypedEventFilter<EmergencyExitRequestedEvent>;

export type EmergencyExpiryDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type EmergencyExpiryDurationUpdatedEventFilter =
  TypedEventFilter<EmergencyExpiryDurationUpdatedEvent>;

export type MaxPrioritizedValidatorNumberUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type MaxPrioritizedValidatorNumberUpdatedEventFilter =
  TypedEventFilter<MaxPrioritizedValidatorNumberUpdatedEvent>;

export type MaxValidatorCandidateUpdatedEvent = TypedEvent<
  [BigNumber],
  { threshold: BigNumber }
>;

export type MaxValidatorCandidateUpdatedEventFilter =
  TypedEventFilter<MaxValidatorCandidateUpdatedEvent>;

export type MaxValidatorNumberUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type MaxValidatorNumberUpdatedEventFilter =
  TypedEventFilter<MaxValidatorNumberUpdatedEvent>;

export type MinEffectiveDaysOnwardsUpdatedEvent = TypedEvent<
  [BigNumber],
  { numOfDays: BigNumber }
>;

export type MinEffectiveDaysOnwardsUpdatedEventFilter =
  TypedEventFilter<MinEffectiveDaysOnwardsUpdatedEvent>;

export interface EmergencyExit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EmergencyExitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkJailed(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { _result: boolean[] }>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _result: boolean }>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _result: boolean }>;

    currentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyExitLockedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyExpiryDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    execApplyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execRequestRenounceCandidate(
      _consensusAddr: string,
      _secsLeft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockProducers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _result: string[] }>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<[ValidatorCandidateStructOutput]>;

    getCandidateInfos(
      overrides?: CallOverrides
    ): Promise<
      [ValidatorCandidateStructOutput[]] & {
        _list: ValidatorCandidateStructOutput[];
      }
    >;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<[CommissionScheduleStructOutput]>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<
      [EmergencyExitInfoStructOutput] & { _info: EmergencyExitInfoStructOutput }
    >;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidatorCandidates(overrides?: CallOverrides): Promise<[string[]]>;

    getValidators(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _validatorList: string[] }>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPeriodEnding(overrides?: CallOverrides): Promise<[boolean]>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maximumPrioritizedValidatorNumber: BigNumber }>;

    maxValidatorCandidate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxValidatorNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maximumValidatorNumber: BigNumber }>;

    minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfBlocksInEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _numberOfBlocks: BigNumber }>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxValidatorCandidate(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBlockProducers(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _total: BigNumber }>;

    totalDeprecatedReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
    >;

    validatorCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  checkJailed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  checkJailedAtBlock(
    _addr: string,
    _blockNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkManyJailed(
    _addrList: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  checkMiningRewardDeprecated(
    _blockProducer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkMiningRewardDeprecatedAtPeriod(
    _blockProducer: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyExitLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

  epochEndingAt(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  epochOf(_block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  execApplyValidatorCandidate(
    _candidateAdmin: string,
    _consensusAddr: string,
    _treasuryAddr: string,
    _commissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execEmergencyExit(
    _consensusAddr: string,
    _secLeftToRevoke: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execReleaseLockedFundForEmergencyExitRequest(
    _consensusAddr: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execRequestRenounceCandidate(
    _consensusAddr: string,
    _secsLeft: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execRequestUpdateCommissionRate(
    _consensusAddr: string,
    _effectiveDaysOnwards: BigNumberish,
    _commissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockProducers(overrides?: CallOverrides): Promise<string[]>;

  getCandidateInfo(
    _candidate: string,
    overrides?: CallOverrides
  ): Promise<ValidatorCandidateStructOutput>;

  getCandidateInfos(
    overrides?: CallOverrides
  ): Promise<ValidatorCandidateStructOutput[]>;

  getCommissionChangeSchedule(
    _candidate: string,
    overrides?: CallOverrides
  ): Promise<CommissionScheduleStructOutput>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEmergencyExitInfo(
    _consensusAddr: string,
    overrides?: CallOverrides
  ): Promise<EmergencyExitInfoStructOutput>;

  getJailedTimeLeft(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isJailed_: boolean;
      blockLeft_: BigNumber;
      epochLeft_: BigNumber;
    }
  >;

  getJailedTimeLeftAtBlock(
    _addr: string,
    _blockNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isJailed_: boolean;
      blockLeft_: BigNumber;
      epochLeft_: BigNumber;
    }
  >;

  getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorCandidates(overrides?: CallOverrides): Promise<string[]>;

  getValidators(overrides?: CallOverrides): Promise<string[]>;

  isBlockProducer(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isCandidateAdmin(
    _candidate: string,
    _admin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPeriodEnding(overrides?: CallOverrides): Promise<boolean>;

  isValidatorCandidate(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxPrioritizedValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

  maxValidatorCandidate(overrides?: CallOverrides): Promise<BigNumber>;

  maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

  minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyExitLockedAmount(
    _emergencyExitLockedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyExpiryDuration(
    _emergencyExpiryDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPrioritizedValidatorNumber(
    _number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxValidatorCandidate(
    _number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxValidatorNumber(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinEffectiveDaysOnwards(
    _numOfDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeprecatedReward(overrides?: CallOverrides): Promise<BigNumber>;

  tryGetPeriodOfEpoch(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
  >;

  validatorCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    checkJailed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExitLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execApplyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    execRequestRenounceCandidate(
      _consensusAddr: string,
      _secsLeft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlockProducers(overrides?: CallOverrides): Promise<string[]>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<ValidatorCandidateStructOutput>;

    getCandidateInfos(
      overrides?: CallOverrides
    ): Promise<ValidatorCandidateStructOutput[]>;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<CommissionScheduleStructOutput>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<EmergencyExitInfoStructOutput>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isJailed_: boolean;
        blockLeft_: BigNumber;
        epochLeft_: BigNumber;
      }
    >;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorCandidates(overrides?: CallOverrides): Promise<string[]>;

    getValidators(overrides?: CallOverrides): Promise<string[]>;

    isBlockProducer(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPeriodEnding(overrides?: CallOverrides): Promise<boolean>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxValidatorCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

    minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxValidatorCandidate(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeprecatedReward(overrides?: CallOverrides): Promise<BigNumber>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
    >;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CandidateGranted(address,address,address)"(
      consensusAddr?: string | null,
      treasuryAddr?: string | null,
      admin?: string | null
    ): CandidateGrantedEventFilter;
    CandidateGranted(
      consensusAddr?: string | null,
      treasuryAddr?: string | null,
      admin?: string | null
    ): CandidateGrantedEventFilter;

    "CandidateRevokingTimestampUpdated(address,uint256)"(
      consensusAddr?: string | null,
      revokingTimestamp?: null
    ): CandidateRevokingTimestampUpdatedEventFilter;
    CandidateRevokingTimestampUpdated(
      consensusAddr?: string | null,
      revokingTimestamp?: null
    ): CandidateRevokingTimestampUpdatedEventFilter;

    "CandidateTopupDeadlineUpdated(address,uint256)"(
      consensusAddr?: string | null,
      topupDeadline?: null
    ): CandidateTopupDeadlineUpdatedEventFilter;
    CandidateTopupDeadlineUpdated(
      consensusAddr?: string | null,
      topupDeadline?: null
    ): CandidateTopupDeadlineUpdatedEventFilter;

    "CandidatesRevoked(address[])"(
      consensusAddrs?: null
    ): CandidatesRevokedEventFilter;
    CandidatesRevoked(consensusAddrs?: null): CandidatesRevokedEventFilter;

    "CommissionRateUpdateScheduled(address,uint256,uint256)"(
      consensusAddr?: string | null,
      effectiveTimestamp?: null,
      rate?: null
    ): CommissionRateUpdateScheduledEventFilter;
    CommissionRateUpdateScheduled(
      consensusAddr?: string | null,
      effectiveTimestamp?: null,
      rate?: null
    ): CommissionRateUpdateScheduledEventFilter;

    "CommissionRateUpdated(address,uint256)"(
      consensusAddr?: string | null,
      rate?: null
    ): CommissionRateUpdatedEventFilter;
    CommissionRateUpdated(
      consensusAddr?: string | null,
      rate?: null
    ): CommissionRateUpdatedEventFilter;

    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "DeprecatedRewardRecycleFailed(address,uint256,uint256)"(
      recipientAddr?: string | null,
      amount?: null,
      balance?: null
    ): DeprecatedRewardRecycleFailedEventFilter;
    DeprecatedRewardRecycleFailed(
      recipientAddr?: string | null,
      amount?: null,
      balance?: null
    ): DeprecatedRewardRecycleFailedEventFilter;

    "DeprecatedRewardRecycled(address,uint256)"(
      recipientAddr?: string | null,
      amount?: null
    ): DeprecatedRewardRecycledEventFilter;
    DeprecatedRewardRecycled(
      recipientAddr?: string | null,
      amount?: null
    ): DeprecatedRewardRecycledEventFilter;

    "EmergencyExitLockedAmountUpdated(uint256)"(
      amount?: null
    ): EmergencyExitLockedAmountUpdatedEventFilter;
    EmergencyExitLockedAmountUpdated(
      amount?: null
    ): EmergencyExitLockedAmountUpdatedEventFilter;

    "EmergencyExitLockedFundReleased(address,address,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null
    ): EmergencyExitLockedFundReleasedEventFilter;
    EmergencyExitLockedFundReleased(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null
    ): EmergencyExitLockedFundReleasedEventFilter;

    "EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null,
      contractBalance?: null
    ): EmergencyExitLockedFundReleasingFailedEventFilter;
    EmergencyExitLockedFundReleasingFailed(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null,
      contractBalance?: null
    ): EmergencyExitLockedFundReleasingFailedEventFilter;

    "EmergencyExitRequested(address,uint256)"(
      consensusAddr?: string | null,
      lockedAmount?: null
    ): EmergencyExitRequestedEventFilter;
    EmergencyExitRequested(
      consensusAddr?: string | null,
      lockedAmount?: null
    ): EmergencyExitRequestedEventFilter;

    "EmergencyExpiryDurationUpdated(uint256)"(
      amount?: null
    ): EmergencyExpiryDurationUpdatedEventFilter;
    EmergencyExpiryDurationUpdated(
      amount?: null
    ): EmergencyExpiryDurationUpdatedEventFilter;

    "MaxPrioritizedValidatorNumberUpdated(uint256)"(
      undefined?: null
    ): MaxPrioritizedValidatorNumberUpdatedEventFilter;
    MaxPrioritizedValidatorNumberUpdated(
      undefined?: null
    ): MaxPrioritizedValidatorNumberUpdatedEventFilter;

    "MaxValidatorCandidateUpdated(uint256)"(
      threshold?: null
    ): MaxValidatorCandidateUpdatedEventFilter;
    MaxValidatorCandidateUpdated(
      threshold?: null
    ): MaxValidatorCandidateUpdatedEventFilter;

    "MaxValidatorNumberUpdated(uint256)"(
      undefined?: null
    ): MaxValidatorNumberUpdatedEventFilter;
    MaxValidatorNumberUpdated(
      undefined?: null
    ): MaxValidatorNumberUpdatedEventFilter;

    "MinEffectiveDaysOnwardsUpdated(uint256)"(
      numOfDays?: null
    ): MinEffectiveDaysOnwardsUpdatedEventFilter;
    MinEffectiveDaysOnwardsUpdated(
      numOfDays?: null
    ): MinEffectiveDaysOnwardsUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADDITION_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    checkJailed(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExitLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execApplyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execRequestRenounceCandidate(
      _consensusAddr: string,
      _secsLeft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCandidateInfos(overrides?: CallOverrides): Promise<BigNumber>;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPeriodEnding(overrides?: CallOverrides): Promise<BigNumber>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxValidatorCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

    minEffectiveDaysOnwards(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxValidatorCandidate(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeprecatedReward(overrides?: CallOverrides): Promise<BigNumber>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADDITION_GAS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkJailed(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkJailedAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkManyJailed(
      _addrList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMiningRewardDeprecated(
      _blockProducer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMiningRewardDeprecatedAtPeriod(
      _blockProducer: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPeriodStartAtBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyExitLockedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyExpiryDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execApplyValidatorCandidate(
      _candidateAdmin: string,
      _consensusAddr: string,
      _treasuryAddr: string,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execRequestRenounceCandidate(
      _consensusAddr: string,
      _secsLeft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execRequestUpdateCommissionRate(
      _consensusAddr: string,
      _effectiveDaysOnwards: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockProducers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCandidateInfo(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCandidateInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCommissionChangeSchedule(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmergencyExitInfo(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJailedTimeLeft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJailedTimeLeftAtBlock(
      _addr: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUpdatedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorCandidates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCandidateAdmin(
      _candidate: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPeriodEnding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidatorCandidate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxValidatorCandidate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxValidatorNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minEffectiveDaysOnwards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfBlocksInEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPrioritizedValidatorNumber(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxValidatorCandidate(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxValidatorNumber(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinEffectiveDaysOnwards(
      _numOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBlockProducers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDeprecatedReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
