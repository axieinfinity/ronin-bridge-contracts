/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBridgeManagerEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "BridgeOperatorUpdated(address,address,address)": EventFragment;
    "BridgeOperatorsAdded(bool[],uint96[],address[],address[])": EventFragment;
    "BridgeOperatorsRemoved(bool[],address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeOperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeOperatorsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeOperatorsRemoved"): EventFragment;
}

export type BridgeOperatorUpdatedEvent = TypedEvent<
  [string, string, string],
  { governor: string; fromBridgeOperator: string; toBridgeOperator: string }
>;

export type BridgeOperatorUpdatedEventFilter =
  TypedEventFilter<BridgeOperatorUpdatedEvent>;

export type BridgeOperatorsAddedEvent = TypedEvent<
  [boolean[], BigNumber[], string[], string[]],
  {
    statuses: boolean[];
    voteWeights: BigNumber[];
    governors: string[];
    bridgeOperators: string[];
  }
>;

export type BridgeOperatorsAddedEventFilter =
  TypedEventFilter<BridgeOperatorsAddedEvent>;

export type BridgeOperatorsRemovedEvent = TypedEvent<
  [boolean[], string[]],
  { statuses: boolean[]; bridgeOperators: string[] }
>;

export type BridgeOperatorsRemovedEventFilter =
  TypedEventFilter<BridgeOperatorsRemovedEvent>;

export interface IBridgeManagerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeManagerEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BridgeOperatorUpdated(address,address,address)"(
      governor?: string | null,
      fromBridgeOperator?: string | null,
      toBridgeOperator?: string | null
    ): BridgeOperatorUpdatedEventFilter;
    BridgeOperatorUpdated(
      governor?: string | null,
      fromBridgeOperator?: string | null,
      toBridgeOperator?: string | null
    ): BridgeOperatorUpdatedEventFilter;

    "BridgeOperatorsAdded(bool[],uint96[],address[],address[])"(
      statuses?: null,
      voteWeights?: null,
      governors?: null,
      bridgeOperators?: null
    ): BridgeOperatorsAddedEventFilter;
    BridgeOperatorsAdded(
      statuses?: null,
      voteWeights?: null,
      governors?: null,
      bridgeOperators?: null
    ): BridgeOperatorsAddedEventFilter;

    "BridgeOperatorsRemoved(bool[],address[])"(
      statuses?: null,
      bridgeOperators?: null
    ): BridgeOperatorsRemovedEventFilter;
    BridgeOperatorsRemoved(
      statuses?: null,
      bridgeOperators?: null
    ): BridgeOperatorsRemovedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
