/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IStakingVestingInterface extends utils.Interface {
  functions: {
    "blockProducerBlockBonus(uint256)": FunctionFragment;
    "bridgeOperatorBlockBonus(uint256)": FunctionFragment;
    "fastFinalityRewardPercentage()": FunctionFragment;
    "lastBlockSendingBonus()": FunctionFragment;
    "receiveRON()": FunctionFragment;
    "requestBonus(bool,bool)": FunctionFragment;
    "setBlockProducerBonusPerBlock(uint256)": FunctionFragment;
    "setBridgeOperatorBonusPerBlock(uint256)": FunctionFragment;
    "setFastFinalityRewardPercentage(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockProducerBlockBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeOperatorBlockBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fastFinalityRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBlockSendingBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBonus",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockProducerBonusPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeOperatorBonusPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFastFinalityRewardPercentage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockProducerBlockBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeOperatorBlockBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fastFinalityRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBlockSendingBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveRON", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockProducerBonusPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeOperatorBonusPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFastFinalityRewardPercentage",
    data: BytesLike
  ): Result;

  events: {
    "BlockProducerBonusPerBlockUpdated(uint256)": EventFragment;
    "BonusTransferFailed(uint256,address,uint256,uint256,uint256)": EventFragment;
    "BonusTransferred(uint256,address,uint256,uint256)": EventFragment;
    "BridgeOperatorBonusPerBlockUpdated(uint256)": EventFragment;
    "FastFinalityRewardPercentageUpdated(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BlockProducerBonusPerBlockUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonusTransferFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonusTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BridgeOperatorBonusPerBlockUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FastFinalityRewardPercentageUpdated"
  ): EventFragment;
}

export type BlockProducerBonusPerBlockUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type BlockProducerBonusPerBlockUpdatedEventFilter =
  TypedEventFilter<BlockProducerBonusPerBlockUpdatedEvent>;

export type BonusTransferFailedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    blockNumber: BigNumber;
    recipient: string;
    blockProducerAmount: BigNumber;
    bridgeOperatorAmount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type BonusTransferFailedEventFilter =
  TypedEventFilter<BonusTransferFailedEvent>;

export type BonusTransferredEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    blockNumber: BigNumber;
    recipient: string;
    blockProducerAmount: BigNumber;
    bridgeOperatorAmount: BigNumber;
  }
>;

export type BonusTransferredEventFilter =
  TypedEventFilter<BonusTransferredEvent>;

export type BridgeOperatorBonusPerBlockUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type BridgeOperatorBonusPerBlockUpdatedEventFilter =
  TypedEventFilter<BridgeOperatorBonusPerBlockUpdatedEvent>;

export type FastFinalityRewardPercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type FastFinalityRewardPercentageUpdatedEventFilter =
  TypedEventFilter<FastFinalityRewardPercentageUpdatedEvent>;

export interface IStakingVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockProducerBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bridgeOperatorBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fastFinalityRewardPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastBlockSendingBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveRON(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestBonus(
      forBlockProducer: boolean,
      forBridgeOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlockProducerBonusPerBlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBridgeOperatorBonusPerBlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFastFinalityRewardPercentage(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  blockProducerBlockBonus(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bridgeOperatorBlockBonus(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fastFinalityRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  lastBlockSendingBonus(overrides?: CallOverrides): Promise<BigNumber>;

  receiveRON(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestBonus(
    forBlockProducer: boolean,
    forBridgeOperator: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlockProducerBonusPerBlock(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBridgeOperatorBonusPerBlock(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFastFinalityRewardPercentage(
    _percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blockProducerBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeOperatorBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fastFinalityRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlockSendingBonus(overrides?: CallOverrides): Promise<BigNumber>;

    receiveRON(overrides?: CallOverrides): Promise<void>;

    requestBonus(
      forBlockProducer: boolean,
      forBridgeOperator: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        success: boolean;
        blockProducerBonus: BigNumber;
        bridgeOperatorBonus: BigNumber;
        fastFinalityRewardPercentage: BigNumber;
      }
    >;

    setBlockProducerBonusPerBlock(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeOperatorBonusPerBlock(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFastFinalityRewardPercentage(
      _percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlockProducerBonusPerBlockUpdated(uint256)"(
      undefined?: null
    ): BlockProducerBonusPerBlockUpdatedEventFilter;
    BlockProducerBonusPerBlockUpdated(
      undefined?: null
    ): BlockProducerBonusPerBlockUpdatedEventFilter;

    "BonusTransferFailed(uint256,address,uint256,uint256,uint256)"(
      blockNumber?: BigNumberish | null,
      recipient?: string | null,
      blockProducerAmount?: null,
      bridgeOperatorAmount?: null,
      contractBalance?: null
    ): BonusTransferFailedEventFilter;
    BonusTransferFailed(
      blockNumber?: BigNumberish | null,
      recipient?: string | null,
      blockProducerAmount?: null,
      bridgeOperatorAmount?: null,
      contractBalance?: null
    ): BonusTransferFailedEventFilter;

    "BonusTransferred(uint256,address,uint256,uint256)"(
      blockNumber?: BigNumberish | null,
      recipient?: string | null,
      blockProducerAmount?: null,
      bridgeOperatorAmount?: null
    ): BonusTransferredEventFilter;
    BonusTransferred(
      blockNumber?: BigNumberish | null,
      recipient?: string | null,
      blockProducerAmount?: null,
      bridgeOperatorAmount?: null
    ): BonusTransferredEventFilter;

    "BridgeOperatorBonusPerBlockUpdated(uint256)"(
      undefined?: null
    ): BridgeOperatorBonusPerBlockUpdatedEventFilter;
    BridgeOperatorBonusPerBlockUpdated(
      undefined?: null
    ): BridgeOperatorBonusPerBlockUpdatedEventFilter;

    "FastFinalityRewardPercentageUpdated(uint256)"(
      undefined?: null
    ): FastFinalityRewardPercentageUpdatedEventFilter;
    FastFinalityRewardPercentageUpdated(
      undefined?: null
    ): FastFinalityRewardPercentageUpdatedEventFilter;
  };

  estimateGas: {
    blockProducerBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeOperatorBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fastFinalityRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlockSendingBonus(overrides?: CallOverrides): Promise<BigNumber>;

    receiveRON(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestBonus(
      forBlockProducer: boolean,
      forBridgeOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlockProducerBonusPerBlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBridgeOperatorBonusPerBlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFastFinalityRewardPercentage(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockProducerBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeOperatorBlockBonus(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fastFinalityRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastBlockSendingBonus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveRON(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestBonus(
      forBlockProducer: boolean,
      forBridgeOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlockProducerBonusPerBlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeOperatorBonusPerBlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFastFinalityRewardPercentage(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
