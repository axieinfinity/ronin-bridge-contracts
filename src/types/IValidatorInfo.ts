/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IValidatorInfoInterface extends utils.Interface {
  functions: {
    "getBlockProducers()": FunctionFragment;
    "getBridgeOperators()": FunctionFragment;
    "getBridgeOperatorsOf(address[])": FunctionFragment;
    "getValidators()": FunctionFragment;
    "isBlockProducer(address)": FunctionFragment;
    "isBridgeOperator(address)": FunctionFragment;
    "isOperatingBridge(address)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "maxPrioritizedValidatorNumber()": FunctionFragment;
    "maxValidatorNumber()": FunctionFragment;
    "setMaxPrioritizedValidatorNumber(uint256)": FunctionFragment;
    "setMaxValidatorNumber(uint256)": FunctionFragment;
    "totalBlockProducers()": FunctionFragment;
    "totalBridgeOperators()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBlockProducers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperatorsOf",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlockProducer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBridgeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatingBridge",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxPrioritizedValidatorNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxValidatorNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPrioritizedValidatorNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxValidatorNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlockProducers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBridgeOperators",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperatorsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlockProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBridgeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatingBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPrioritizedValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPrioritizedValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxValidatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlockProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBridgeOperators",
    data: BytesLike
  ): Result;

  events: {
    "MaxPrioritizedValidatorNumberUpdated(uint256)": EventFragment;
    "MaxValidatorNumberUpdated(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "MaxPrioritizedValidatorNumberUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxValidatorNumberUpdated"): EventFragment;
}

export type MaxPrioritizedValidatorNumberUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type MaxPrioritizedValidatorNumberUpdatedEventFilter =
  TypedEventFilter<MaxPrioritizedValidatorNumberUpdatedEvent>;

export type MaxValidatorNumberUpdatedEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type MaxValidatorNumberUpdatedEventFilter =
  TypedEventFilter<MaxValidatorNumberUpdatedEvent>;

export interface IValidatorInfo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IValidatorInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBlockProducers(overrides?: CallOverrides): Promise<[string[]]>;

    getBridgeOperators(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & {
        bridgeOperatorList: string[];
        validatorList: string[];
      }
    >;

    getBridgeOperatorsOf(
      _validatorAddrs: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { bridgeOperatorList: string[] }>;

    getValidators(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], number[]] & {
        _validatorList: string[];
        _bridgeOperators: string[];
        _flags: number[];
      }
    >;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBridgeOperator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOperator: boolean }>;

    isOperatingBridge(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidator(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maximumPrioritizedValidatorNumber: BigNumber }>;

    maxValidatorNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maximumValidatorNumber: BigNumber }>;

    setMaxPrioritizedValidatorNumber(
      _maxPrioritizedValidatorNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxValidatorNumber(
      _maxValidatorNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBlockProducers(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getBlockProducers(overrides?: CallOverrides): Promise<string[]>;

  getBridgeOperators(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & {
      bridgeOperatorList: string[];
      validatorList: string[];
    }
  >;

  getBridgeOperatorsOf(
    _validatorAddrs: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getValidators(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], number[]] & {
      _validatorList: string[];
      _bridgeOperators: string[];
      _flags: number[];
    }
  >;

  isBlockProducer(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isBridgeOperator(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isOperatingBridge(
    _consensusAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  maxPrioritizedValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

  maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxPrioritizedValidatorNumber(
    _maxPrioritizedValidatorNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxValidatorNumber(
    _maxValidatorNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

  totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getBlockProducers(overrides?: CallOverrides): Promise<string[]>;

    getBridgeOperators(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & {
        bridgeOperatorList: string[];
        validatorList: string[];
      }
    >;

    getBridgeOperatorsOf(
      _validatorAddrs: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getValidators(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], number[]] & {
        _validatorList: string[];
        _bridgeOperators: string[];
        _flags: number[];
      }
    >;

    isBlockProducer(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isBridgeOperator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatingBridge(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxPrioritizedValidatorNumber(
      _maxPrioritizedValidatorNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxValidatorNumber(
      _maxValidatorNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MaxPrioritizedValidatorNumberUpdated(uint256)"(
      undefined?: null
    ): MaxPrioritizedValidatorNumberUpdatedEventFilter;
    MaxPrioritizedValidatorNumberUpdated(
      undefined?: null
    ): MaxPrioritizedValidatorNumberUpdatedEventFilter;

    "MaxValidatorNumberUpdated(uint256)"(
      undefined?: null
    ): MaxValidatorNumberUpdatedEventFilter;
    MaxValidatorNumberUpdated(
      undefined?: null
    ): MaxValidatorNumberUpdatedEventFilter;
  };

  estimateGas: {
    getBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeOperatorsOf(
      _validatorAddrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBridgeOperator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatingBridge(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxValidatorNumber(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxPrioritizedValidatorNumber(
      _maxPrioritizedValidatorNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxValidatorNumber(
      _maxValidatorNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBlockProducers(overrides?: CallOverrides): Promise<BigNumber>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBlockProducers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBridgeOperators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeOperatorsOf(
      _validatorAddrs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlockProducer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBridgeOperator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatingBridge(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPrioritizedValidatorNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxValidatorNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxPrioritizedValidatorNumber(
      _maxPrioritizedValidatorNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxValidatorNumber(
      _maxValidatorNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBlockProducers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBridgeOperators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
