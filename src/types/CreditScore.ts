/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CreditScoreInterface extends utils.Interface {
  functions: {
    "bailOut(address)": FunctionFragment;
    "checkBailedOutAtPeriod(address,uint256)": FunctionFragment;
    "execResetCreditScores(address[])": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getCreditScore(address)": FunctionFragment;
    "getCreditScoreConfigs()": FunctionFragment;
    "getManyCreditScores(address[])": FunctionFragment;
    "getUnavailabilityIndicator(address,uint256)": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setCreditScoreConfigs(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateCreditScores(address[],uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bailOut", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkBailedOutAtPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execResetCreditScores",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditScore",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditScoreConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManyCreditScores",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnavailabilityIndicator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditScoreConfigs",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreditScores",
    values: [string[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bailOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkBailedOutAtPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execResetCreditScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditScoreConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManyCreditScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnavailabilityIndicator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditScoreConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreditScores",
    data: BytesLike
  ): Result;

  events: {
    "BailedOut(address,uint256,uint256)": EventFragment;
    "ContractUpdated(uint8,address)": EventFragment;
    "CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "CreditScoresUpdated(address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BailedOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditScoreConfigsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditScoresUpdated"): EventFragment;
}

export type BailedOutEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { validator: string; period: BigNumber; usedCreditScore: BigNumber }
>;

export type BailedOutEventFilter = TypedEventFilter<BailedOutEvent>;

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type CreditScoreConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    gainCreditScore: BigNumber;
    maxCreditScore: BigNumber;
    bailOutCostMultiplier: BigNumber;
    cutOffPercentageAfterBailout: BigNumber;
  }
>;

export type CreditScoreConfigsUpdatedEventFilter =
  TypedEventFilter<CreditScoreConfigsUpdatedEvent>;

export type CreditScoresUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { validators: string[]; creditScores: BigNumber[] }
>;

export type CreditScoresUpdatedEventFilter =
  TypedEventFilter<CreditScoresUpdatedEvent>;

export interface CreditScore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditScoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bailOut(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    execResetCreditScores(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreditScoreConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        gainCreditScore_: BigNumber;
        maxCreditScore_: BigNumber;
        bailOutCostMultiplier_: BigNumber;
        cutOffPercentageAfterBailout_: BigNumber;
      }
    >;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _resultList: BigNumber[] }>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bailOut(
    _consensusAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkBailedOutAtPeriod(
    _validator: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  execResetCreditScores(
    _validators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreditScore(
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreditScoreConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      gainCreditScore_: BigNumber;
      maxCreditScore_: BigNumber;
      bailOutCostMultiplier_: BigNumber;
      cutOffPercentageAfterBailout_: BigNumber;
    }
  >;

  getManyCreditScores(
    _validators: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUnavailabilityIndicator(
    _validator: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditScoreConfigs(
    _gainScore: BigNumberish,
    _maxScore: BigNumberish,
    _bailOutMultiplier: BigNumberish,
    _cutOffPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreditScores(
    _validators: string[],
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bailOut(_consensusAddr: string, overrides?: CallOverrides): Promise<void>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execResetCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditScoreConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        gainCreditScore_: BigNumber;
        maxCreditScore_: BigNumber;
        bailOutCostMultiplier_: BigNumber;
        cutOffPercentageAfterBailout_: BigNumber;
      }
    >;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BailedOut(address,uint256,uint256)"(
      validator?: string | null,
      period?: null,
      usedCreditScore?: null
    ): BailedOutEventFilter;
    BailedOut(
      validator?: string | null,
      period?: null,
      usedCreditScore?: null
    ): BailedOutEventFilter;

    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)"(
      gainCreditScore?: null,
      maxCreditScore?: null,
      bailOutCostMultiplier?: null,
      cutOffPercentageAfterBailout?: null
    ): CreditScoreConfigsUpdatedEventFilter;
    CreditScoreConfigsUpdated(
      gainCreditScore?: null,
      maxCreditScore?: null,
      bailOutCostMultiplier?: null,
      cutOffPercentageAfterBailout?: null
    ): CreditScoreConfigsUpdatedEventFilter;

    "CreditScoresUpdated(address[],uint256[])"(
      validators?: null,
      creditScores?: null
    ): CreditScoresUpdatedEventFilter;
    CreditScoresUpdated(
      validators?: null,
      creditScores?: null
    ): CreditScoresUpdatedEventFilter;
  };

  estimateGas: {
    bailOut(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execResetCreditScores(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditScoreConfigs(overrides?: CallOverrides): Promise<BigNumber>;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bailOut(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execResetCreditScores(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditScoreConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
