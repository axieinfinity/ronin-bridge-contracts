/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OwnerStruct = {
  addr: string;
  tokenAddr: string;
  chainId: BigNumberish;
};

export type OwnerStructOutput = [string, string, BigNumber] & {
  addr: string;
  tokenAddr: string;
  chainId: BigNumber;
};

export type InfoStruct = {
  erc: BigNumberish;
  id: BigNumberish;
  quantity: BigNumberish;
};

export type InfoStructOutput = [number, BigNumber, BigNumber] & {
  erc: number;
  id: BigNumber;
  quantity: BigNumber;
};

export type ReceiptStruct = {
  id: BigNumberish;
  kind: BigNumberish;
  mainchain: OwnerStruct;
  ronin: OwnerStruct;
  info: InfoStruct;
};

export type ReceiptStructOutput = [
  BigNumber,
  number,
  OwnerStructOutput,
  OwnerStructOutput,
  InfoStructOutput
] & {
  id: BigNumber;
  kind: number;
  mainchain: OwnerStructOutput;
  ronin: OwnerStructOutput;
  info: InfoStructOutput;
};

export type MappedTokenStruct = { erc: BigNumberish; tokenAddr: string };

export type MappedTokenStructOutput = [number, string] & {
  erc: number;
  tokenAddr: string;
};

export type RequestStruct = {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStruct;
};

export type RequestStructOutput = [string, string, InfoStructOutput] & {
  recipientAddr: string;
  tokenAddr: string;
  info: InfoStructOutput;
};

export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

export type SignatureStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export interface IMainchainGatewayV3Interface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "depositCount()": FunctionFragment;
    "getRoninToken(address)": FunctionFragment;
    "mapTokens(address[],address[],uint8[])": FunctionFragment;
    "mapTokensAndThresholds(address[],address[],uint8[],uint256[][4])": FunctionFragment;
    "requestDepositFor((address,address,(uint8,uint256,uint256)))": FunctionFragment;
    "setWrappedNativeTokenContract(address)": FunctionFragment;
    "submitWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "unlockWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": FunctionFragment;
    "withdrawalHash(uint256)": FunctionFragment;
    "withdrawalLocked(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoninToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mapTokens",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mapTokensAndThresholds",
    values: [
      string[],
      string[],
      BigNumberish[],
      [BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDepositFor",
    values: [RequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedNativeTokenContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawal",
    values: [ReceiptStruct, SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockWithdrawal",
    values: [ReceiptStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalLocked",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoninToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mapTokensAndThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDepositFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedNativeTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalLocked",
    data: BytesLike
  ): Result;

  events: {
    "DepositRequested(bytes32,tuple)": EventFragment;
    "TokenMapped(address[],address[],uint8[])": EventFragment;
    "WithdrawalLocked(bytes32,tuple)": EventFragment;
    "WithdrawalUnlocked(bytes32,tuple)": EventFragment;
    "Withdrew(bytes32,tuple)": EventFragment;
    "WrappedNativeTokenContractUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WrappedNativeTokenContractUpdated"
  ): EventFragment;
}

export type DepositRequestedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type DepositRequestedEventFilter =
  TypedEventFilter<DepositRequestedEvent>;

export type TokenMappedEvent = TypedEvent<
  [string[], string[], number[]],
  { mainchainTokens: string[]; roninTokens: string[]; standards: number[] }
>;

export type TokenMappedEventFilter = TypedEventFilter<TokenMappedEvent>;

export type WithdrawalLockedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type WithdrawalLockedEventFilter =
  TypedEventFilter<WithdrawalLockedEvent>;

export type WithdrawalUnlockedEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type WithdrawalUnlockedEventFilter =
  TypedEventFilter<WithdrawalUnlockedEvent>;

export type WithdrewEvent = TypedEvent<
  [string, ReceiptStructOutput],
  { receiptHash: string; receipt: ReceiptStructOutput }
>;

export type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;

export type WrappedNativeTokenContractUpdatedEvent = TypedEvent<
  [string],
  { weth: string }
>;

export type WrappedNativeTokenContractUpdatedEventFilter =
  TypedEventFilter<WrappedNativeTokenContractUpdatedEvent>;

export interface IMainchainGatewayV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMainchainGatewayV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    depositCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<[MappedTokenStructOutput] & { _token: MappedTokenStructOutput }>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalHash(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawalLocked(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  depositCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRoninToken(
    _mainchainToken: string,
    overrides?: CallOverrides
  ): Promise<MappedTokenStructOutput>;

  mapTokens(
    _mainchainTokens: string[],
    _roninTokens: string[],
    _standards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mapTokensAndThresholds(
    _mainchainTokens: string[],
    _roninTokens: string[],
    _standards: BigNumberish[],
    _thresholds: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestDepositFor(
    _request: RequestStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrappedNativeTokenContract(
    _wrappedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitWithdrawal(
    _receipt: ReceiptStruct,
    _signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockWithdrawal(
    _receipt: ReceiptStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalHash(
    withdrawalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawalLocked(
    withdrawalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<MappedTokenStructOutput>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalHash(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawalLocked(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DepositRequested(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): DepositRequestedEventFilter;
    DepositRequested(
      receiptHash?: null,
      receipt?: null
    ): DepositRequestedEventFilter;

    "TokenMapped(address[],address[],uint8[])"(
      mainchainTokens?: null,
      roninTokens?: null,
      standards?: null
    ): TokenMappedEventFilter;
    TokenMapped(
      mainchainTokens?: null,
      roninTokens?: null,
      standards?: null
    ): TokenMappedEventFilter;

    "WithdrawalLocked(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalLockedEventFilter;
    WithdrawalLocked(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalLockedEventFilter;

    "WithdrawalUnlocked(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalUnlockedEventFilter;
    WithdrawalUnlocked(
      receiptHash?: null,
      receipt?: null
    ): WithdrawalUnlockedEventFilter;

    "Withdrew(bytes32,tuple)"(
      receiptHash?: null,
      receipt?: null
    ): WithdrewEventFilter;
    Withdrew(receiptHash?: null, receipt?: null): WithdrewEventFilter;

    "WrappedNativeTokenContractUpdated(address)"(
      weth?: null
    ): WrappedNativeTokenContractUpdatedEventFilter;
    WrappedNativeTokenContractUpdated(
      weth?: null
    ): WrappedNativeTokenContractUpdatedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalHash(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalLocked(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoninToken(
      _mainchainToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapTokens(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mapTokensAndThresholds(
      _mainchainTokens: string[],
      _roninTokens: string[],
      _standards: BigNumberish[],
      _thresholds: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestDepositFor(
      _request: RequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedNativeTokenContract(
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitWithdrawal(
      _receipt: ReceiptStruct,
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockWithdrawal(
      _receipt: ReceiptStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalHash(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalLocked(
      withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
