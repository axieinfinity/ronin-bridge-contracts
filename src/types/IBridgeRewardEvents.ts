/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBridgeRewardEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "BridgeRewardScatterFailed(uint256,address,uint256)": EventFragment;
    "BridgeRewardScattered(uint256,address,uint256)": EventFragment;
    "BridgeRewardSlashed(uint256,address,uint256)": EventFragment;
    "BridgeRewardSyncTooFarPeriod(uint256,uint256)": EventFragment;
    "SafeReceived(address,uint256,uint256)": EventFragment;
    "UpdatedRewardPerPeriod(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeRewardScatterFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeRewardScattered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeRewardSlashed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BridgeRewardSyncTooFarPeriod"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRewardPerPeriod"): EventFragment;
}

export type BridgeRewardScatterFailedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; operator: string; amount: BigNumber }
>;

export type BridgeRewardScatterFailedEventFilter =
  TypedEventFilter<BridgeRewardScatterFailedEvent>;

export type BridgeRewardScatteredEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; operator: string; amount: BigNumber }
>;

export type BridgeRewardScatteredEventFilter =
  TypedEventFilter<BridgeRewardScatteredEvent>;

export type BridgeRewardSlashedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; operator: string; amount: BigNumber }
>;

export type BridgeRewardSlashedEventFilter =
  TypedEventFilter<BridgeRewardSlashedEvent>;

export type BridgeRewardSyncTooFarPeriodEvent = TypedEvent<
  [BigNumber, BigNumber],
  { requestingPeriod: BigNumber; latestPeriod: BigNumber }
>;

export type BridgeRewardSyncTooFarPeriodEventFilter =
  TypedEventFilter<BridgeRewardSyncTooFarPeriodEvent>;

export type SafeReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; balanceBefore: BigNumber; amount: BigNumber }
>;

export type SafeReceivedEventFilter = TypedEventFilter<SafeReceivedEvent>;

export type UpdatedRewardPerPeriodEvent = TypedEvent<
  [BigNumber],
  { newRewardPerPeriod: BigNumber }
>;

export type UpdatedRewardPerPeriodEventFilter =
  TypedEventFilter<UpdatedRewardPerPeriodEvent>;

export interface IBridgeRewardEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeRewardEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BridgeRewardScatterFailed(uint256,address,uint256)"(
      period?: BigNumberish | null,
      operator?: null,
      amount?: null
    ): BridgeRewardScatterFailedEventFilter;
    BridgeRewardScatterFailed(
      period?: BigNumberish | null,
      operator?: null,
      amount?: null
    ): BridgeRewardScatterFailedEventFilter;

    "BridgeRewardScattered(uint256,address,uint256)"(
      period?: BigNumberish | null,
      operator?: null,
      amount?: null
    ): BridgeRewardScatteredEventFilter;
    BridgeRewardScattered(
      period?: BigNumberish | null,
      operator?: null,
      amount?: null
    ): BridgeRewardScatteredEventFilter;

    "BridgeRewardSlashed(uint256,address,uint256)"(
      period?: BigNumberish | null,
      operator?: null,
      amount?: null
    ): BridgeRewardSlashedEventFilter;
    BridgeRewardSlashed(
      period?: BigNumberish | null,
      operator?: null,
      amount?: null
    ): BridgeRewardSlashedEventFilter;

    "BridgeRewardSyncTooFarPeriod(uint256,uint256)"(
      requestingPeriod?: null,
      latestPeriod?: null
    ): BridgeRewardSyncTooFarPeriodEventFilter;
    BridgeRewardSyncTooFarPeriod(
      requestingPeriod?: null,
      latestPeriod?: null
    ): BridgeRewardSyncTooFarPeriodEventFilter;

    "SafeReceived(address,uint256,uint256)"(
      from?: string | null,
      balanceBefore?: null,
      amount?: null
    ): SafeReceivedEventFilter;
    SafeReceived(
      from?: string | null,
      balanceBefore?: null,
      amount?: null
    ): SafeReceivedEventFilter;

    "UpdatedRewardPerPeriod(uint256)"(
      newRewardPerPeriod?: null
    ): UpdatedRewardPerPeriodEventFilter;
    UpdatedRewardPerPeriod(
      newRewardPerPeriod?: null
    ): UpdatedRewardPerPeriodEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
