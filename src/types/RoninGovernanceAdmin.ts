/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ProposalDetailStruct = {
  nonce: BigNumberish;
  chainId: BigNumberish;
  expiryTimestamp: BigNumberish;
  targets: string[];
  values: BigNumberish[];
  calldatas: BytesLike[];
  gasAmounts: BigNumberish[];
};

export type ProposalDetailStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  BigNumber[],
  string[],
  BigNumber[]
] & {
  nonce: BigNumber;
  chainId: BigNumber;
  expiryTimestamp: BigNumber;
  targets: string[];
  values: BigNumber[];
  calldatas: string[];
  gasAmounts: BigNumber[];
};

export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

export type SignatureStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export interface RoninGovernanceAdminInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": FunctionFragment;
    "castProposalVoteForCurrentNetwork((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8)": FunctionFragment;
    "changeProxyAdmin(address,address)": FunctionFragment;
    "createEmergencyExitPoll(address,address,uint256,uint256)": FunctionFragment;
    "deleteExpired(uint256,uint256)": FunctionFragment;
    "emergencyPollVoted(bytes32,address)": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getProposalExpiryDuration()": FunctionFragment;
    "getProposalSignatures(uint256,uint256)": FunctionFragment;
    "getProxyAdmin(address)": FunctionFragment;
    "getProxyImplementation(address)": FunctionFragment;
    "proposalVoted(uint256,uint256,address)": FunctionFragment;
    "propose(uint256,uint256,address[],uint256[],bytes[],uint256[])": FunctionFragment;
    "proposeProposalForCurrentNetwork(uint256,address[],uint256[],bytes[],uint256[],uint8)": FunctionFragment;
    "proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": FunctionFragment;
    "roninChainId()": FunctionFragment;
    "round(uint256)": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setProposalExpiryDuration(uint256)": FunctionFragment;
    "vote(uint256,uint256)": FunctionFragment;
    "voteEmergencyExit(bytes32,address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castProposalBySignatures",
    values: [ProposalDetailStruct, BigNumberish[], SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castProposalVoteForCurrentNetwork",
    values: [ProposalDetailStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProxyAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEmergencyExitPoll",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteExpired",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPollVoted",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalExpiryDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalSignatures",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVoted",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeProposalForCurrentNetwork",
    values: [
      BigNumberish,
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeProposalStructAndCastVotes",
    values: [ProposalDetailStruct, BigNumberish[], SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "roninChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "round", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalExpiryDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteEmergencyExit",
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castProposalBySignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castProposalVoteForCurrentNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEmergencyExitPoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPollVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalExpiryDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeProposalForCurrentNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeProposalStructAndCastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roninChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "round", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalExpiryDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteEmergencyExit",
    data: BytesLike
  ): Result;

  events: {
    "ContractUpdated(uint8,address)": EventFragment;
    "EmergencyExitPollApproved(bytes32)": EventFragment;
    "EmergencyExitPollCreated(bytes32,address,address,uint256,uint256)": EventFragment;
    "EmergencyExitPollExpired(bytes32)": EventFragment;
    "EmergencyExitPollVoted(bytes32,address)": EventFragment;
    "ProposalApproved(bytes32)": EventFragment;
    "ProposalCreated(uint256,uint256,bytes32,tuple,address)": EventFragment;
    "ProposalExecuted(bytes32,bool[],bytes[])": EventFragment;
    "ProposalExpired(bytes32)": EventFragment;
    "ProposalExpiryDurationChanged(uint256)": EventFragment;
    "ProposalRejected(bytes32)": EventFragment;
    "ProposalVoted(bytes32,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitPollApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitPollCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitPollExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitPollVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExpired"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalExpiryDurationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVoted"): EventFragment;
}

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type EmergencyExitPollApprovedEvent = TypedEvent<
  [string],
  { _voteHash: string }
>;

export type EmergencyExitPollApprovedEventFilter =
  TypedEventFilter<EmergencyExitPollApprovedEvent>;

export type EmergencyExitPollCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    _voteHash: string;
    _consensusAddr: string;
    _recipientAfterUnlockedFund: string;
    _requestedAt: BigNumber;
    _expiredAt: BigNumber;
  }
>;

export type EmergencyExitPollCreatedEventFilter =
  TypedEventFilter<EmergencyExitPollCreatedEvent>;

export type EmergencyExitPollExpiredEvent = TypedEvent<
  [string],
  { _voteHash: string }
>;

export type EmergencyExitPollExpiredEventFilter =
  TypedEventFilter<EmergencyExitPollExpiredEvent>;

export type EmergencyExitPollVotedEvent = TypedEvent<
  [string, string],
  { _voteHash: string; _voter: string }
>;

export type EmergencyExitPollVotedEventFilter =
  TypedEventFilter<EmergencyExitPollVotedEvent>;

export type ProposalApprovedEvent = TypedEvent<
  [string],
  { proposalHash: string }
>;

export type ProposalApprovedEventFilter =
  TypedEventFilter<ProposalApprovedEvent>;

export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, ProposalDetailStructOutput, string],
  {
    chainId: BigNumber;
    round: BigNumber;
    proposalHash: string;
    proposal: ProposalDetailStructOutput;
    creator: string;
  }
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export type ProposalExecutedEvent = TypedEvent<
  [string, boolean[], string[]],
  { proposalHash: string; successCalls: boolean[]; returnDatas: string[] }
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export type ProposalExpiredEvent = TypedEvent<
  [string],
  { proposalHash: string }
>;

export type ProposalExpiredEventFilter = TypedEventFilter<ProposalExpiredEvent>;

export type ProposalExpiryDurationChangedEvent = TypedEvent<
  [BigNumber],
  { duration: BigNumber }
>;

export type ProposalExpiryDurationChangedEventFilter =
  TypedEventFilter<ProposalExpiryDurationChangedEvent>;

export type ProposalRejectedEvent = TypedEvent<
  [string],
  { proposalHash: string }
>;

export type ProposalRejectedEventFilter =
  TypedEventFilter<ProposalRejectedEvent>;

export type ProposalVotedEvent = TypedEvent<
  [string, string, number, BigNumber],
  { proposalHash: string; voter: string; support: number; weight: BigNumber }
>;

export type ProposalVotedEventFilter = TypedEventFilter<ProposalVotedEvent>;

export interface RoninGovernanceAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoninGovernanceAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    castProposalBySignatures(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castProposalVoteForCurrentNetwork(
      _proposal: ProposalDetailStruct,
      _support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEmergencyExitPoll(
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteExpired(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyPollVoted(
      _voteHash: BytesLike,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getProposalExpiryDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposalSignatures(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], SignatureStructOutput[]] & {
        _voters: string[];
        _supports: number[];
        _signatures: SignatureStructOutput[];
      }
    >;

    getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<[string]>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposalVoted(
      _chainId: BigNumberish,
      _round: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    propose(
      _chainId: BigNumberish,
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeProposalForCurrentNetwork(
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      _support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeProposalStructAndCastVotes(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roninChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    round(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber] & {
        status: number;
        hash: string;
        againstVoteWeight: BigNumber;
        forVoteWeight: BigNumber;
        expiryTimestamp: BigNumber;
      }
    >;

    voteEmergencyExit(
      _voteHash: BytesLike,
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  castProposalBySignatures(
    _proposal: ProposalDetailStruct,
    _supports: BigNumberish[],
    _signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castProposalVoteForCurrentNetwork(
    _proposal: ProposalDetailStruct,
    _support: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeProxyAdmin(
    _proxy: string,
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEmergencyExitPoll(
    _consensusAddr: string,
    _recipientAfterUnlockedFund: string,
    _requestedAt: BigNumberish,
    _expiredAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteExpired(
    _chainId: BigNumberish,
    _round: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyPollVoted(
    _voteHash: BytesLike,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getProposalSignatures(
    _chainId: BigNumberish,
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], number[], SignatureStructOutput[]] & {
      _voters: string[];
      _supports: number[];
      _signatures: SignatureStructOutput[];
    }
  >;

  getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<string>;

  getProxyImplementation(
    _proxy: string,
    overrides?: CallOverrides
  ): Promise<string>;

  proposalVoted(
    _chainId: BigNumberish,
    _round: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  propose(
    _chainId: BigNumberish,
    _expiryTimestamp: BigNumberish,
    _targets: string[],
    _values: BigNumberish[],
    _calldatas: BytesLike[],
    _gasAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeProposalForCurrentNetwork(
    _expiryTimestamp: BigNumberish,
    _targets: string[],
    _values: BigNumberish[],
    _calldatas: BytesLike[],
    _gasAmounts: BigNumberish[],
    _support: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeProposalStructAndCastVotes(
    _proposal: ProposalDetailStruct,
    _supports: BigNumberish[],
    _signatures: SignatureStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

  round(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProposalExpiryDuration(
    _expiryDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber] & {
      status: number;
      hash: string;
      againstVoteWeight: BigNumber;
      forVoteWeight: BigNumber;
      expiryTimestamp: BigNumber;
    }
  >;

  voteEmergencyExit(
    _voteHash: BytesLike,
    _consensusAddr: string,
    _recipientAfterUnlockedFund: string,
    _requestedAt: BigNumberish,
    _expiredAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    castProposalBySignatures(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    castProposalVoteForCurrentNetwork(
      _proposal: ProposalDetailStruct,
      _support: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createEmergencyExitPoll(
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteExpired(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyPollVoted(
      _voteHash: BytesLike,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalSignatures(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], SignatureStructOutput[]] & {
        _voters: string[];
        _supports: number[];
        _signatures: SignatureStructOutput[];
      }
    >;

    getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<string>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<string>;

    proposalVoted(
      _chainId: BigNumberish,
      _round: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    propose(
      _chainId: BigNumberish,
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposeProposalForCurrentNetwork(
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      _support: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeProposalStructAndCastVotes(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

    round(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber] & {
        status: number;
        hash: string;
        againstVoteWeight: BigNumber;
        forVoteWeight: BigNumber;
        expiryTimestamp: BigNumber;
      }
    >;

    voteEmergencyExit(
      _voteHash: BytesLike,
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "EmergencyExitPollApproved(bytes32)"(
      _voteHash?: null
    ): EmergencyExitPollApprovedEventFilter;
    EmergencyExitPollApproved(
      _voteHash?: null
    ): EmergencyExitPollApprovedEventFilter;

    "EmergencyExitPollCreated(bytes32,address,address,uint256,uint256)"(
      _voteHash?: null,
      _consensusAddr?: null,
      _recipientAfterUnlockedFund?: null,
      _requestedAt?: null,
      _expiredAt?: null
    ): EmergencyExitPollCreatedEventFilter;
    EmergencyExitPollCreated(
      _voteHash?: null,
      _consensusAddr?: null,
      _recipientAfterUnlockedFund?: null,
      _requestedAt?: null,
      _expiredAt?: null
    ): EmergencyExitPollCreatedEventFilter;

    "EmergencyExitPollExpired(bytes32)"(
      _voteHash?: null
    ): EmergencyExitPollExpiredEventFilter;
    EmergencyExitPollExpired(
      _voteHash?: null
    ): EmergencyExitPollExpiredEventFilter;

    "EmergencyExitPollVoted(bytes32,address)"(
      _voteHash?: BytesLike | null,
      _voter?: string | null
    ): EmergencyExitPollVotedEventFilter;
    EmergencyExitPollVoted(
      _voteHash?: BytesLike | null,
      _voter?: string | null
    ): EmergencyExitPollVotedEventFilter;

    "ProposalApproved(bytes32)"(
      proposalHash?: BytesLike | null
    ): ProposalApprovedEventFilter;
    ProposalApproved(
      proposalHash?: BytesLike | null
    ): ProposalApprovedEventFilter;

    "ProposalCreated(uint256,uint256,bytes32,tuple,address)"(
      chainId?: BigNumberish | null,
      round?: BigNumberish | null,
      proposalHash?: BytesLike | null,
      proposal?: null,
      creator?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      chainId?: BigNumberish | null,
      round?: BigNumberish | null,
      proposalHash?: BytesLike | null,
      proposal?: null,
      creator?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(bytes32,bool[],bytes[])"(
      proposalHash?: BytesLike | null,
      successCalls?: null,
      returnDatas?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalHash?: BytesLike | null,
      successCalls?: null,
      returnDatas?: null
    ): ProposalExecutedEventFilter;

    "ProposalExpired(bytes32)"(
      proposalHash?: BytesLike | null
    ): ProposalExpiredEventFilter;
    ProposalExpired(
      proposalHash?: BytesLike | null
    ): ProposalExpiredEventFilter;

    "ProposalExpiryDurationChanged(uint256)"(
      duration?: BigNumberish | null
    ): ProposalExpiryDurationChangedEventFilter;
    ProposalExpiryDurationChanged(
      duration?: BigNumberish | null
    ): ProposalExpiryDurationChangedEventFilter;

    "ProposalRejected(bytes32)"(
      proposalHash?: BytesLike | null
    ): ProposalRejectedEventFilter;
    ProposalRejected(
      proposalHash?: BytesLike | null
    ): ProposalRejectedEventFilter;

    "ProposalVoted(bytes32,address,uint8,uint256)"(
      proposalHash?: BytesLike | null,
      voter?: string | null,
      support?: null,
      weight?: null
    ): ProposalVotedEventFilter;
    ProposalVoted(
      proposalHash?: BytesLike | null,
      voter?: string | null,
      support?: null,
      weight?: null
    ): ProposalVotedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    castProposalBySignatures(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castProposalVoteForCurrentNetwork(
      _proposal: ProposalDetailStruct,
      _support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEmergencyExitPoll(
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteExpired(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyPollVoted(
      _voteHash: BytesLike,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalSignatures(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyAdmin(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalVoted(
      _chainId: BigNumberish,
      _round: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      _chainId: BigNumberish,
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeProposalForCurrentNetwork(
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      _support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeProposalStructAndCastVotes(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

    round(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteEmergencyExit(
      _voteHash: BytesLike,
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    castProposalBySignatures(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castProposalVoteForCurrentNetwork(
      _proposal: ProposalDetailStruct,
      _support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEmergencyExitPoll(
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteExpired(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyPollVoted(
      _voteHash: BytesLike,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalExpiryDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalSignatures(
      _chainId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyAdmin(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalVoted(
      _chainId: BigNumberish,
      _round: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      _chainId: BigNumberish,
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeProposalForCurrentNetwork(
      _expiryTimestamp: BigNumberish,
      _targets: string[],
      _values: BigNumberish[],
      _calldatas: BytesLike[],
      _gasAmounts: BigNumberish[],
      _support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeProposalStructAndCastVotes(
      _proposal: ProposalDetailStruct,
      _supports: BigNumberish[],
      _signatures: SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roninChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    round(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteEmergencyExit(
      _voteHash: BytesLike,
      _consensusAddr: string,
      _recipientAfterUnlockedFund: string,
      _requestedAt: BigNumberish,
      _expiredAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
