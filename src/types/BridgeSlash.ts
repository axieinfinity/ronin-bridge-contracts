/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BridgeSlashInterface extends utils.Interface {
  functions: {
    "MINIMUM_VOTE_THRESHOLD()": FunctionFragment;
    "REMOVE_DURATION_THRESHOLD()": FunctionFragment;
    "TIER_1_PENALTY_DURATION()": FunctionFragment;
    "TIER_2_PENALTY_DURATION()": FunctionFragment;
    "execSlashBridgeOperators(address[],uint256[],uint256,uint256,uint256)": FunctionFragment;
    "getAddedPeriodOf(address[])": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getPenaltyDurations()": FunctionFragment;
    "getSlashTier(uint256,uint256)": FunctionFragment;
    "getSlashUntilPeriodOf(address[])": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "initializeREP2()": FunctionFragment;
    "onBridgeOperatorUpdated(address,address)": FunctionFragment;
    "onBridgeOperatorsAdded(address[],bool[])": FunctionFragment;
    "onBridgeOperatorsRemoved(address[],bool[])": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MINIMUM_VOTE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_DURATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_1_PENALTY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_2_PENALTY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execSlashBridgeOperators",
    values: [string[], BigNumberish[], BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddedPeriodOf",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyDurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSlashTier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlashUntilPeriodOf",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeREP2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onBridgeOperatorUpdated",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onBridgeOperatorsAdded",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onBridgeOperatorsRemoved",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_VOTE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_DURATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_1_PENALTY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_2_PENALTY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execSlashBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddedPeriodOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlashTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlashUntilPeriodOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeREP2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onBridgeOperatorUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onBridgeOperatorsAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onBridgeOperatorsRemoved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "BridgeTrackingIncorrectlyResponded()": EventFragment;
    "ContractUpdated(uint8,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RemovalRequested(uint256,address)": EventFragment;
    "Slashed(uint8,address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BridgeTrackingIncorrectlyResponded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovalRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
}

export type BridgeTrackingIncorrectlyRespondedEvent = TypedEvent<[], {}>;

export type BridgeTrackingIncorrectlyRespondedEventFilter =
  TypedEventFilter<BridgeTrackingIncorrectlyRespondedEvent>;

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type RemovalRequestedEvent = TypedEvent<
  [BigNumber, string],
  { period: BigNumber; bridgeOperator: string }
>;

export type RemovalRequestedEventFilter =
  TypedEventFilter<RemovalRequestedEvent>;

export type SlashedEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  {
    tier: number;
    bridgeOperator: string;
    period: BigNumber;
    slashUntilPeriod: BigNumber;
  }
>;

export type SlashedEventFilter = TypedEventFilter<SlashedEvent>;

export interface BridgeSlash extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeSlashInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINIMUM_VOTE_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    REMOVE_DURATION_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_1_PENALTY_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_2_PENALTY_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    execSlashBridgeOperators(
      operators: string[],
      ballots: BigNumberish[],
      totalBallot: BigNumberish,
      totalVote: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddedPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { addedPeriods: BigNumber[] }>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getPenaltyDurations(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { penaltyDurations: BigNumber[] }>;

    getSlashTier(
      ballot: BigNumberish,
      totalVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tier: number }>;

    getSlashUntilPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { untilPeriods: BigNumber[] }>;

    initialize(
      validatorContract: string,
      bridgeManagerContract: string,
      bridgeTrackingContract: string,
      dposGA: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeREP2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onBridgeOperatorUpdated(
      currentBridgeOperator: string,
      newBridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onBridgeOperatorsAdded(
      bridgeOperators: string[],
      addeds: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onBridgeOperatorsRemoved(
      arg0: string[],
      arg1: boolean[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MINIMUM_VOTE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  REMOVE_DURATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_1_PENALTY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_2_PENALTY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  execSlashBridgeOperators(
    operators: string[],
    ballots: BigNumberish[],
    totalBallot: BigNumberish,
    totalVote: BigNumberish,
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddedPeriodOf(
    bridgeOperators: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPenaltyDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSlashTier(
    ballot: BigNumberish,
    totalVote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getSlashUntilPeriodOf(
    bridgeOperators: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initialize(
    validatorContract: string,
    bridgeManagerContract: string,
    bridgeTrackingContract: string,
    dposGA: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeREP2(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onBridgeOperatorUpdated(
    currentBridgeOperator: string,
    newBridgeOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onBridgeOperatorsAdded(
    bridgeOperators: string[],
    addeds: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onBridgeOperatorsRemoved(
    arg0: string[],
    arg1: boolean[],
    overrides?: CallOverrides
  ): Promise<string>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MINIMUM_VOTE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_DURATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_PENALTY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_PENALTY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    execSlashBridgeOperators(
      operators: string[],
      ballots: BigNumberish[],
      totalBallot: BigNumberish,
      totalVote: BigNumberish,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddedPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPenaltyDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSlashTier(
      ballot: BigNumberish,
      totalVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSlashUntilPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initialize(
      validatorContract: string,
      bridgeManagerContract: string,
      bridgeTrackingContract: string,
      dposGA: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeREP2(overrides?: CallOverrides): Promise<void>;

    onBridgeOperatorUpdated(
      currentBridgeOperator: string,
      newBridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    onBridgeOperatorsAdded(
      bridgeOperators: string[],
      addeds: boolean[],
      overrides?: CallOverrides
    ): Promise<string>;

    onBridgeOperatorsRemoved(
      arg0: string[],
      arg1: boolean[],
      overrides?: CallOverrides
    ): Promise<string>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BridgeTrackingIncorrectlyResponded()"(): BridgeTrackingIncorrectlyRespondedEventFilter;
    BridgeTrackingIncorrectlyResponded(): BridgeTrackingIncorrectlyRespondedEventFilter;

    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RemovalRequested(uint256,address)"(
      period?: BigNumberish | null,
      bridgeOperator?: string | null
    ): RemovalRequestedEventFilter;
    RemovalRequested(
      period?: BigNumberish | null,
      bridgeOperator?: string | null
    ): RemovalRequestedEventFilter;

    "Slashed(uint8,address,uint256,uint256)"(
      tier?: BigNumberish | null,
      bridgeOperator?: string | null,
      period?: BigNumberish | null,
      slashUntilPeriod?: null
    ): SlashedEventFilter;
    Slashed(
      tier?: BigNumberish | null,
      bridgeOperator?: string | null,
      period?: BigNumberish | null,
      slashUntilPeriod?: null
    ): SlashedEventFilter;
  };

  estimateGas: {
    MINIMUM_VOTE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_DURATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_PENALTY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_PENALTY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    execSlashBridgeOperators(
      operators: string[],
      ballots: BigNumberish[],
      totalBallot: BigNumberish,
      totalVote: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddedPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyDurations(overrides?: CallOverrides): Promise<BigNumber>;

    getSlashTier(
      ballot: BigNumberish,
      totalVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlashUntilPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      validatorContract: string,
      bridgeManagerContract: string,
      bridgeTrackingContract: string,
      dposGA: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeREP2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onBridgeOperatorUpdated(
      currentBridgeOperator: string,
      newBridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onBridgeOperatorsAdded(
      bridgeOperators: string[],
      addeds: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onBridgeOperatorsRemoved(
      arg0: string[],
      arg1: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINIMUM_VOTE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_DURATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_1_PENALTY_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_2_PENALTY_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execSlashBridgeOperators(
      operators: string[],
      ballots: BigNumberish[],
      totalBallot: BigNumberish,
      totalVote: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddedPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPenaltyDurations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlashTier(
      ballot: BigNumberish,
      totalVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlashUntilPeriodOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      validatorContract: string,
      bridgeManagerContract: string,
      bridgeTrackingContract: string,
      dposGA: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeREP2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onBridgeOperatorUpdated(
      currentBridgeOperator: string,
      newBridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onBridgeOperatorsAdded(
      bridgeOperators: string[],
      addeds: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onBridgeOperatorsRemoved(
      arg0: string[],
      arg1: boolean[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
