/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ITimingInfoInterface extends utils.Interface {
  functions: {
    "currentPeriod()": FunctionFragment;
    "currentPeriodStartAtBlock()": FunctionFragment;
    "epochEndingAt(uint256)": FunctionFragment;
    "epochOf(uint256)": FunctionFragment;
    "getLastUpdatedBlock()": FunctionFragment;
    "isPeriodEnding()": FunctionFragment;
    "numberOfBlocksInEpoch()": FunctionFragment;
    "tryGetPeriodOfEpoch(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriodStartAtBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochEndingAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPeriodEnding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfBlocksInEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryGetPeriodOfEpoch",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriodStartAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochEndingAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPeriodEnding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfBlocksInEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryGetPeriodOfEpoch",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITimingInfo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITimingInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPeriodEnding(overrides?: CallOverrides): Promise<[boolean]>;

    numberOfBlocksInEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _numberOfBlocks: BigNumber }>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
    >;
  };

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

  epochEndingAt(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  epochOf(_block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  isPeriodEnding(overrides?: CallOverrides): Promise<boolean>;

  numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  tryGetPeriodOfEpoch(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
  >;

  callStatic: {
    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    isPeriodEnding(overrides?: CallOverrides): Promise<boolean>;

    numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _filled: boolean; _periodNumber: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodStartAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    isPeriodEnding(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfBlocksInEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPeriodStartAtBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochEndingAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochOf(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUpdatedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPeriodEnding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfBlocksInEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryGetPeriodOfEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
