/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SlashIndicatorInterface extends utils.Interface {
  functions: {
    "bailOut(address)": FunctionFragment;
    "checkBailedOutAtPeriod(address,uint256)": FunctionFragment;
    "currentUnavailabilityIndicator(address)": FunctionFragment;
    "execResetCreditScores(address[])": FunctionFragment;
    "execSlashBridgeOperator(address,uint256,uint256)": FunctionFragment;
    "getBridgeOperatorSlashingConfigs()": FunctionFragment;
    "getBridgeVotingSlashingConfigs()": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getCreditScore(address)": FunctionFragment;
    "getCreditScoreConfigs()": FunctionFragment;
    "getDoubleSignSlashingConfigs()": FunctionFragment;
    "getFastFinalitySlashingConfigs()": FunctionFragment;
    "getManyCreditScores(address[])": FunctionFragment;
    "getUnavailabilityIndicator(address,uint256)": FunctionFragment;
    "getUnavailabilitySlashingConfigs()": FunctionFragment;
    "initialize(address,address,address,address,uint256[4],uint256[2],uint256[3],uint256[4],uint256[4])": FunctionFragment;
    "initializeV2(address)": FunctionFragment;
    "initializeV3(address)": FunctionFragment;
    "lastUnavailabilitySlashedBlock()": FunctionFragment;
    "precompileValidateDoubleSignAddress()": FunctionFragment;
    "precompileValidateFastFinalityAddress()": FunctionFragment;
    "setBridgeOperatorSlashingConfigs(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setBridgeVotingSlashingConfigs(uint256,uint256)": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setCreditScoreConfigs(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setDoubleSignSlashingConfigs(uint256,uint256,uint256)": FunctionFragment;
    "setFastFinalitySlashingConfigs(uint256,uint256)": FunctionFragment;
    "setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)": FunctionFragment;
    "slashBridgeVoting(address)": FunctionFragment;
    "slashDoubleSign(address,bytes,bytes)": FunctionFragment;
    "slashFastFinality(address,bytes,uint256,bytes32[2],bytes[][2],bytes[2])": FunctionFragment;
    "slashUnavailability(address)": FunctionFragment;
    "updateCreditScores(address[],uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bailOut", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkBailedOutAtPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentUnavailabilityIndicator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "execResetCreditScores",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execSlashBridgeOperator",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperatorSlashingConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeVotingSlashingConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditScore",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditScoreConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDoubleSignSlashingConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFastFinalitySlashingConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManyCreditScores",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnavailabilityIndicator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnavailabilitySlashingConfigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV3",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUnavailabilitySlashedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "precompileValidateDoubleSignAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "precompileValidateFastFinalityAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeOperatorSlashingConfigs",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeVotingSlashingConfigs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditScoreConfigs",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDoubleSignSlashingConfigs",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFastFinalitySlashingConfigs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnavailabilitySlashingConfigs",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashBridgeVoting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashDoubleSign",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashFastFinality",
    values: [
      string,
      BytesLike,
      BigNumberish,
      [BytesLike, BytesLike],
      [BytesLike[], BytesLike[]],
      [BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slashUnavailability",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreditScores",
    values: [string[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bailOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkBailedOutAtPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentUnavailabilityIndicator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execResetCreditScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execSlashBridgeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperatorSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeVotingSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditScoreConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDoubleSignSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFastFinalitySlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManyCreditScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnavailabilityIndicator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnavailabilitySlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUnavailabilitySlashedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "precompileValidateDoubleSignAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "precompileValidateFastFinalityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeOperatorSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeVotingSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditScoreConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDoubleSignSlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFastFinalitySlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnavailabilitySlashingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashBridgeVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashDoubleSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashFastFinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashUnavailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreditScores",
    data: BytesLike
  ): Result;

  events: {
    "BailedOut(address,uint256,uint256)": EventFragment;
    "BridgeOperatorSlashingConfigsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "BridgeVotingSlashingConfigsUpdated(uint256,uint256)": EventFragment;
    "ContractUpdated(uint8,address)": EventFragment;
    "CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "CreditScoresUpdated(address[],uint256[])": EventFragment;
    "DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)": EventFragment;
    "FastFinalitySlashingConfigsUpdated(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Slashed(address,uint8,uint256)": EventFragment;
    "UnavailabilitySlashingConfigsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BailedOut"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BridgeOperatorSlashingConfigsUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BridgeVotingSlashingConfigsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditScoreConfigsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditScoresUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DoubleSignSlashingConfigsUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FastFinalitySlashingConfigsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnavailabilitySlashingConfigsUpdated"
  ): EventFragment;
}

export type BailedOutEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { validator: string; period: BigNumber; usedCreditScore: BigNumber }
>;

export type BailedOutEventFilter = TypedEventFilter<BailedOutEvent>;

export type BridgeOperatorSlashingConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    missingVotesRatioTier1: BigNumber;
    missingVotesRatioTier2: BigNumber;
    jailDurationForMissingVotesRatioTier2: BigNumber;
    skipBridgeOperatorSlashingThreshold: BigNumber;
  }
>;

export type BridgeOperatorSlashingConfigsUpdatedEventFilter =
  TypedEventFilter<BridgeOperatorSlashingConfigsUpdatedEvent>;

export type BridgeVotingSlashingConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { bridgeVotingThreshold: BigNumber; bridgeVotingSlashAmount: BigNumber }
>;

export type BridgeVotingSlashingConfigsUpdatedEventFilter =
  TypedEventFilter<BridgeVotingSlashingConfigsUpdatedEvent>;

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type CreditScoreConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    gainCreditScore: BigNumber;
    maxCreditScore: BigNumber;
    bailOutCostMultiplier: BigNumber;
    cutOffPercentageAfterBailout: BigNumber;
  }
>;

export type CreditScoreConfigsUpdatedEventFilter =
  TypedEventFilter<CreditScoreConfigsUpdatedEvent>;

export type CreditScoresUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { validators: string[]; creditScores: BigNumber[] }
>;

export type CreditScoresUpdatedEventFilter =
  TypedEventFilter<CreditScoresUpdatedEvent>;

export type DoubleSignSlashingConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    slashDoubleSignAmount: BigNumber;
    doubleSigningJailUntilBlock: BigNumber;
    doubleSigningOffsetLimitBlock: BigNumber;
  }
>;

export type DoubleSignSlashingConfigsUpdatedEventFilter =
  TypedEventFilter<DoubleSignSlashingConfigsUpdatedEvent>;

export type FastFinalitySlashingConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { slashFastFinalityAmount: BigNumber; fastFinalityJailUntilBlock: BigNumber }
>;

export type FastFinalitySlashingConfigsUpdatedEventFilter =
  TypedEventFilter<FastFinalitySlashingConfigsUpdatedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type SlashedEvent = TypedEvent<
  [string, number, BigNumber],
  { validator: string; slashType: number; period: BigNumber }
>;

export type SlashedEventFilter = TypedEventFilter<SlashedEvent>;

export type UnavailabilitySlashingConfigsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    unavailabilityTier1Threshold: BigNumber;
    unavailabilityTier2Threshold: BigNumber;
    slashAmountForUnavailabilityTier2Threshold: BigNumber;
    jailDurationForUnavailabilityTier2Threshold: BigNumber;
  }
>;

export type UnavailabilitySlashingConfigsUpdatedEventFilter =
  TypedEventFilter<UnavailabilitySlashingConfigsUpdatedEvent>;

export interface SlashIndicator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SlashIndicatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bailOut(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentUnavailabilityIndicator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    execResetCreditScores(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execSlashBridgeOperator(
      _consensusAddr: string,
      _tier: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBridgeOperatorSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        missingVotesRatioTier1_: BigNumber;
        missingVotesRatioTier2_: BigNumber;
        jailDurationForMissingVotesRatioTier2_: BigNumber;
        skipBridgeOperatorSlashingThreshold_: BigNumber;
      }
    >;

    getBridgeVotingSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bridgeVotingThreshold_: BigNumber;
        bridgeVotingSlashAmount_: BigNumber;
      }
    >;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreditScoreConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        gainCreditScore_: BigNumber;
        maxCreditScore_: BigNumber;
        bailOutCostMultiplier_: BigNumber;
        cutOffPercentageAfterBailout_: BigNumber;
      }
    >;

    getDoubleSignSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slashDoubleSignAmount_: BigNumber;
        doubleSigningJailUntilBlock_: BigNumber;
        doubleSigningOffsetLimitBlock_: BigNumber;
      }
    >;

    getFastFinalitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        slashFastFinalityAmount_: BigNumber;
        fastFinalityJailUntilBlock_: BigNumber;
      }
    >;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _resultList: BigNumber[] }>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnavailabilitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        unavailabilityTier1Threshold_: BigNumber;
        unavailabilityTier2Threshold_: BigNumber;
        slashAmountForUnavailabilityTier2Threshold_: BigNumber;
        jailDurationForUnavailabilityTier2Threshold_: BigNumber;
      }
    >;

    initialize(
      __validatorContract: string,
      __maintenanceContract: string,
      __roninTrustedOrganizationContract: string,
      __roninGovernanceAdminContract: string,
      _bridgeOperatorSlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _bridgeVotingSlashingConfigs: [BigNumberish, BigNumberish],
      _doubleSignSlashingConfigs: [BigNumberish, BigNumberish, BigNumberish],
      _unavailabilitySlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _creditScoreConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeV2(
      roninGovernanceAdminContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeV3(
      profileContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastUnavailabilitySlashedBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    precompileValidateDoubleSignAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    precompileValidateFastFinalityAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    setBridgeOperatorSlashingConfigs(
      _ratioTier1: BigNumberish,
      _ratioTier2: BigNumberish,
      _jailDurationTier2: BigNumberish,
      _skipSlashingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBridgeVotingSlashingConfigs(
      _threshold: BigNumberish,
      _slashAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _offsetLimitBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFastFinalitySlashingConfigs(
      slashAmount: BigNumberish,
      jailUntilBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnavailabilitySlashingConfigs(
      _tier1Threshold: BigNumberish,
      _tier2Threshold: BigNumberish,
      _slashAmountForTier2Threshold: BigNumberish,
      _jailDurationForTier2Threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashBridgeVoting(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashDoubleSign(
      _consensusAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashFastFinality(
      consensusAddr: string,
      voterPublicKey: BytesLike,
      targetBlockNumber: BigNumberish,
      targetBlockHash: [BytesLike, BytesLike],
      listOfPublicKey: [BytesLike[], BytesLike[]],
      aggregatedSignature: [BytesLike, BytesLike],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashUnavailability(
      _validatorAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bailOut(
    _consensusAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkBailedOutAtPeriod(
    _validator: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentUnavailabilityIndicator(
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  execResetCreditScores(
    _validators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execSlashBridgeOperator(
    _consensusAddr: string,
    _tier: BigNumberish,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBridgeOperatorSlashingConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      missingVotesRatioTier1_: BigNumber;
      missingVotesRatioTier2_: BigNumber;
      jailDurationForMissingVotesRatioTier2_: BigNumber;
      skipBridgeOperatorSlashingThreshold_: BigNumber;
    }
  >;

  getBridgeVotingSlashingConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      bridgeVotingThreshold_: BigNumber;
      bridgeVotingSlashAmount_: BigNumber;
    }
  >;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreditScore(
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreditScoreConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      gainCreditScore_: BigNumber;
      maxCreditScore_: BigNumber;
      bailOutCostMultiplier_: BigNumber;
      cutOffPercentageAfterBailout_: BigNumber;
    }
  >;

  getDoubleSignSlashingConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      slashDoubleSignAmount_: BigNumber;
      doubleSigningJailUntilBlock_: BigNumber;
      doubleSigningOffsetLimitBlock_: BigNumber;
    }
  >;

  getFastFinalitySlashingConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      slashFastFinalityAmount_: BigNumber;
      fastFinalityJailUntilBlock_: BigNumber;
    }
  >;

  getManyCreditScores(
    _validators: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUnavailabilityIndicator(
    _validator: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnavailabilitySlashingConfigs(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      unavailabilityTier1Threshold_: BigNumber;
      unavailabilityTier2Threshold_: BigNumber;
      slashAmountForUnavailabilityTier2Threshold_: BigNumber;
      jailDurationForUnavailabilityTier2Threshold_: BigNumber;
    }
  >;

  initialize(
    __validatorContract: string,
    __maintenanceContract: string,
    __roninTrustedOrganizationContract: string,
    __roninGovernanceAdminContract: string,
    _bridgeOperatorSlashingConfigs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _bridgeVotingSlashingConfigs: [BigNumberish, BigNumberish],
    _doubleSignSlashingConfigs: [BigNumberish, BigNumberish, BigNumberish],
    _unavailabilitySlashingConfigs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _creditScoreConfigs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeV2(
    roninGovernanceAdminContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeV3(
    profileContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastUnavailabilitySlashedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  precompileValidateDoubleSignAddress(
    overrides?: CallOverrides
  ): Promise<string>;

  precompileValidateFastFinalityAddress(
    overrides?: CallOverrides
  ): Promise<string>;

  setBridgeOperatorSlashingConfigs(
    _ratioTier1: BigNumberish,
    _ratioTier2: BigNumberish,
    _jailDurationTier2: BigNumberish,
    _skipSlashingThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBridgeVotingSlashingConfigs(
    _threshold: BigNumberish,
    _slashAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditScoreConfigs(
    _gainScore: BigNumberish,
    _maxScore: BigNumberish,
    _bailOutMultiplier: BigNumberish,
    _cutOffPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDoubleSignSlashingConfigs(
    _slashAmount: BigNumberish,
    _jailUntilBlock: BigNumberish,
    _offsetLimitBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFastFinalitySlashingConfigs(
    slashAmount: BigNumberish,
    jailUntilBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnavailabilitySlashingConfigs(
    _tier1Threshold: BigNumberish,
    _tier2Threshold: BigNumberish,
    _slashAmountForTier2Threshold: BigNumberish,
    _jailDurationForTier2Threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashBridgeVoting(
    _consensusAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashDoubleSign(
    _consensusAddr: string,
    _header1: BytesLike,
    _header2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashFastFinality(
    consensusAddr: string,
    voterPublicKey: BytesLike,
    targetBlockNumber: BigNumberish,
    targetBlockHash: [BytesLike, BytesLike],
    listOfPublicKey: [BytesLike[], BytesLike[]],
    aggregatedSignature: [BytesLike, BytesLike],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashUnavailability(
    _validatorAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreditScores(
    _validators: string[],
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bailOut(_consensusAddr: string, overrides?: CallOverrides): Promise<void>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentUnavailabilityIndicator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execResetCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    execSlashBridgeOperator(
      _consensusAddr: string,
      _tier: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBridgeOperatorSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        missingVotesRatioTier1_: BigNumber;
        missingVotesRatioTier2_: BigNumber;
        jailDurationForMissingVotesRatioTier2_: BigNumber;
        skipBridgeOperatorSlashingThreshold_: BigNumber;
      }
    >;

    getBridgeVotingSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bridgeVotingThreshold_: BigNumber;
        bridgeVotingSlashAmount_: BigNumber;
      }
    >;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditScoreConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        gainCreditScore_: BigNumber;
        maxCreditScore_: BigNumber;
        bailOutCostMultiplier_: BigNumber;
        cutOffPercentageAfterBailout_: BigNumber;
      }
    >;

    getDoubleSignSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slashDoubleSignAmount_: BigNumber;
        doubleSigningJailUntilBlock_: BigNumber;
        doubleSigningOffsetLimitBlock_: BigNumber;
      }
    >;

    getFastFinalitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        slashFastFinalityAmount_: BigNumber;
        fastFinalityJailUntilBlock_: BigNumber;
      }
    >;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnavailabilitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        unavailabilityTier1Threshold_: BigNumber;
        unavailabilityTier2Threshold_: BigNumber;
        slashAmountForUnavailabilityTier2Threshold_: BigNumber;
        jailDurationForUnavailabilityTier2Threshold_: BigNumber;
      }
    >;

    initialize(
      __validatorContract: string,
      __maintenanceContract: string,
      __roninTrustedOrganizationContract: string,
      __roninGovernanceAdminContract: string,
      _bridgeOperatorSlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _bridgeVotingSlashingConfigs: [BigNumberish, BigNumberish],
      _doubleSignSlashingConfigs: [BigNumberish, BigNumberish, BigNumberish],
      _unavailabilitySlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _creditScoreConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(
      roninGovernanceAdminContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV3(
      profileContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastUnavailabilitySlashedBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    precompileValidateDoubleSignAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    precompileValidateFastFinalityAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    setBridgeOperatorSlashingConfigs(
      _ratioTier1: BigNumberish,
      _ratioTier2: BigNumberish,
      _jailDurationTier2: BigNumberish,
      _skipSlashingThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeVotingSlashingConfigs(
      _threshold: BigNumberish,
      _slashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _offsetLimitBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFastFinalitySlashingConfigs(
      slashAmount: BigNumberish,
      jailUntilBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnavailabilitySlashingConfigs(
      _tier1Threshold: BigNumberish,
      _tier2Threshold: BigNumberish,
      _slashAmountForTier2Threshold: BigNumberish,
      _jailDurationForTier2Threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashBridgeVoting(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slashDoubleSign(
      _consensusAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    slashFastFinality(
      consensusAddr: string,
      voterPublicKey: BytesLike,
      targetBlockNumber: BigNumberish,
      targetBlockHash: [BytesLike, BytesLike],
      listOfPublicKey: [BytesLike[], BytesLike[]],
      aggregatedSignature: [BytesLike, BytesLike],
      overrides?: CallOverrides
    ): Promise<void>;

    slashUnavailability(
      _validatorAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BailedOut(address,uint256,uint256)"(
      validator?: string | null,
      period?: null,
      usedCreditScore?: null
    ): BailedOutEventFilter;
    BailedOut(
      validator?: string | null,
      period?: null,
      usedCreditScore?: null
    ): BailedOutEventFilter;

    "BridgeOperatorSlashingConfigsUpdated(uint256,uint256,uint256,uint256)"(
      missingVotesRatioTier1?: null,
      missingVotesRatioTier2?: null,
      jailDurationForMissingVotesRatioTier2?: null,
      skipBridgeOperatorSlashingThreshold?: null
    ): BridgeOperatorSlashingConfigsUpdatedEventFilter;
    BridgeOperatorSlashingConfigsUpdated(
      missingVotesRatioTier1?: null,
      missingVotesRatioTier2?: null,
      jailDurationForMissingVotesRatioTier2?: null,
      skipBridgeOperatorSlashingThreshold?: null
    ): BridgeOperatorSlashingConfigsUpdatedEventFilter;

    "BridgeVotingSlashingConfigsUpdated(uint256,uint256)"(
      bridgeVotingThreshold?: null,
      bridgeVotingSlashAmount?: null
    ): BridgeVotingSlashingConfigsUpdatedEventFilter;
    BridgeVotingSlashingConfigsUpdated(
      bridgeVotingThreshold?: null,
      bridgeVotingSlashAmount?: null
    ): BridgeVotingSlashingConfigsUpdatedEventFilter;

    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)"(
      gainCreditScore?: null,
      maxCreditScore?: null,
      bailOutCostMultiplier?: null,
      cutOffPercentageAfterBailout?: null
    ): CreditScoreConfigsUpdatedEventFilter;
    CreditScoreConfigsUpdated(
      gainCreditScore?: null,
      maxCreditScore?: null,
      bailOutCostMultiplier?: null,
      cutOffPercentageAfterBailout?: null
    ): CreditScoreConfigsUpdatedEventFilter;

    "CreditScoresUpdated(address[],uint256[])"(
      validators?: null,
      creditScores?: null
    ): CreditScoresUpdatedEventFilter;
    CreditScoresUpdated(
      validators?: null,
      creditScores?: null
    ): CreditScoresUpdatedEventFilter;

    "DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)"(
      slashDoubleSignAmount?: null,
      doubleSigningJailUntilBlock?: null,
      doubleSigningOffsetLimitBlock?: null
    ): DoubleSignSlashingConfigsUpdatedEventFilter;
    DoubleSignSlashingConfigsUpdated(
      slashDoubleSignAmount?: null,
      doubleSigningJailUntilBlock?: null,
      doubleSigningOffsetLimitBlock?: null
    ): DoubleSignSlashingConfigsUpdatedEventFilter;

    "FastFinalitySlashingConfigsUpdated(uint256,uint256)"(
      slashFastFinalityAmount?: null,
      fastFinalityJailUntilBlock?: null
    ): FastFinalitySlashingConfigsUpdatedEventFilter;
    FastFinalitySlashingConfigsUpdated(
      slashFastFinalityAmount?: null,
      fastFinalityJailUntilBlock?: null
    ): FastFinalitySlashingConfigsUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Slashed(address,uint8,uint256)"(
      validator?: string | null,
      slashType?: null,
      period?: null
    ): SlashedEventFilter;
    Slashed(
      validator?: string | null,
      slashType?: null,
      period?: null
    ): SlashedEventFilter;

    "UnavailabilitySlashingConfigsUpdated(uint256,uint256,uint256,uint256)"(
      unavailabilityTier1Threshold?: null,
      unavailabilityTier2Threshold?: null,
      slashAmountForUnavailabilityTier2Threshold?: null,
      jailDurationForUnavailabilityTier2Threshold?: null
    ): UnavailabilitySlashingConfigsUpdatedEventFilter;
    UnavailabilitySlashingConfigsUpdated(
      unavailabilityTier1Threshold?: null,
      unavailabilityTier2Threshold?: null,
      slashAmountForUnavailabilityTier2Threshold?: null,
      jailDurationForUnavailabilityTier2Threshold?: null
    ): UnavailabilitySlashingConfigsUpdatedEventFilter;
  };

  estimateGas: {
    bailOut(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentUnavailabilityIndicator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execResetCreditScores(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execSlashBridgeOperator(
      _consensusAddr: string,
      _tier: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBridgeOperatorSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeVotingSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditScoreConfigs(overrides?: CallOverrides): Promise<BigNumber>;

    getDoubleSignSlashingConfigs(overrides?: CallOverrides): Promise<BigNumber>;

    getFastFinalitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnavailabilitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      __validatorContract: string,
      __maintenanceContract: string,
      __roninTrustedOrganizationContract: string,
      __roninGovernanceAdminContract: string,
      _bridgeOperatorSlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _bridgeVotingSlashingConfigs: [BigNumberish, BigNumberish],
      _doubleSignSlashingConfigs: [BigNumberish, BigNumberish, BigNumberish],
      _unavailabilitySlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _creditScoreConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeV2(
      roninGovernanceAdminContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeV3(
      profileContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastUnavailabilitySlashedBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    precompileValidateDoubleSignAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    precompileValidateFastFinalityAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBridgeOperatorSlashingConfigs(
      _ratioTier1: BigNumberish,
      _ratioTier2: BigNumberish,
      _jailDurationTier2: BigNumberish,
      _skipSlashingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBridgeVotingSlashingConfigs(
      _threshold: BigNumberish,
      _slashAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _offsetLimitBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFastFinalitySlashingConfigs(
      slashAmount: BigNumberish,
      jailUntilBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnavailabilitySlashingConfigs(
      _tier1Threshold: BigNumberish,
      _tier2Threshold: BigNumberish,
      _slashAmountForTier2Threshold: BigNumberish,
      _jailDurationForTier2Threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashBridgeVoting(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashDoubleSign(
      _consensusAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashFastFinality(
      consensusAddr: string,
      voterPublicKey: BytesLike,
      targetBlockNumber: BigNumberish,
      targetBlockHash: [BytesLike, BytesLike],
      listOfPublicKey: [BytesLike[], BytesLike[]],
      aggregatedSignature: [BytesLike, BytesLike],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashUnavailability(
      _validatorAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bailOut(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkBailedOutAtPeriod(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentUnavailabilityIndicator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execResetCreditScores(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execSlashBridgeOperator(
      _consensusAddr: string,
      _tier: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBridgeOperatorSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeVotingSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditScore(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditScoreConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDoubleSignSlashingConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFastFinalitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyCreditScores(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnavailabilityIndicator(
      _validator: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnavailabilitySlashingConfigs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      __validatorContract: string,
      __maintenanceContract: string,
      __roninTrustedOrganizationContract: string,
      __roninGovernanceAdminContract: string,
      _bridgeOperatorSlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _bridgeVotingSlashingConfigs: [BigNumberish, BigNumberish],
      _doubleSignSlashingConfigs: [BigNumberish, BigNumberish, BigNumberish],
      _unavailabilitySlashingConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _creditScoreConfigs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeV2(
      roninGovernanceAdminContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeV3(
      profileContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastUnavailabilitySlashedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    precompileValidateDoubleSignAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    precompileValidateFastFinalityAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBridgeOperatorSlashingConfigs(
      _ratioTier1: BigNumberish,
      _ratioTier2: BigNumberish,
      _jailDurationTier2: BigNumberish,
      _skipSlashingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeVotingSlashingConfigs(
      _threshold: BigNumberish,
      _slashAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditScoreConfigs(
      _gainScore: BigNumberish,
      _maxScore: BigNumberish,
      _bailOutMultiplier: BigNumberish,
      _cutOffPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDoubleSignSlashingConfigs(
      _slashAmount: BigNumberish,
      _jailUntilBlock: BigNumberish,
      _offsetLimitBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFastFinalitySlashingConfigs(
      slashAmount: BigNumberish,
      jailUntilBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnavailabilitySlashingConfigs(
      _tier1Threshold: BigNumberish,
      _tier2Threshold: BigNumberish,
      _slashAmountForTier2Threshold: BigNumberish,
      _jailDurationForTier2Threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashBridgeVoting(
      _consensusAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashDoubleSign(
      _consensusAddr: string,
      _header1: BytesLike,
      _header2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashFastFinality(
      consensusAddr: string,
      voterPublicKey: BytesLike,
      targetBlockNumber: BigNumberish,
      targetBlockHash: [BytesLike, BytesLike],
      listOfPublicKey: [BytesLike[], BytesLike[]],
      aggregatedSignature: [BytesLike, BytesLike],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashUnavailability(
      _validatorAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreditScores(
      _validators: string[],
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
