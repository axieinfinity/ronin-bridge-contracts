/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type BridgeOperatorSetStruct = {
  period: BigNumberish;
  epoch: BigNumberish;
  operators: string[];
};

export type BridgeOperatorSetStructOutput = [BigNumber, BigNumber, string[]] & {
  period: BigNumber;
  epoch: BigNumber;
  operators: string[];
};

export interface IBridgeAdminProposalInterface extends utils.Interface {
  functions: {
    "lastSyncedBridgeOperatorSetInfo()": FunctionFragment;
    "lastVotedBlock(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lastSyncedBridgeOperatorSetInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastVotedBlock",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "lastSyncedBridgeOperatorSetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastVotedBlock",
    data: BytesLike
  ): Result;

  events: {
    "BridgeOperatorsApproved(uint256,uint256,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeOperatorsApproved"): EventFragment;
}

export type BridgeOperatorsApprovedEvent = TypedEvent<
  [BigNumber, BigNumber, string[]],
  { period: BigNumber; epoch: BigNumber; operators: string[] }
>;

export type BridgeOperatorsApprovedEventFilter =
  TypedEventFilter<BridgeOperatorsApprovedEvent>;

export interface IBridgeAdminProposal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeAdminProposalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lastSyncedBridgeOperatorSetInfo(
      overrides?: CallOverrides
    ): Promise<
      [BridgeOperatorSetStructOutput] & {
        bridgeOperatorSetInfo: BridgeOperatorSetStructOutput;
      }
    >;

    lastVotedBlock(
      bridgeVoter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  lastSyncedBridgeOperatorSetInfo(
    overrides?: CallOverrides
  ): Promise<BridgeOperatorSetStructOutput>;

  lastVotedBlock(
    bridgeVoter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    lastSyncedBridgeOperatorSetInfo(
      overrides?: CallOverrides
    ): Promise<BridgeOperatorSetStructOutput>;

    lastVotedBlock(
      bridgeVoter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BridgeOperatorsApproved(uint256,uint256,address[])"(
      period?: null,
      epoch?: null,
      operators?: null
    ): BridgeOperatorsApprovedEventFilter;
    BridgeOperatorsApproved(
      period?: null,
      epoch?: null,
      operators?: null
    ): BridgeOperatorsApprovedEventFilter;
  };

  estimateGas: {
    lastSyncedBridgeOperatorSetInfo(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastVotedBlock(
      bridgeVoter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lastSyncedBridgeOperatorSetInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastVotedBlock(
      bridgeVoter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
