/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ProposalDetailStruct = {
  nonce: BigNumberish;
  chainId: BigNumberish;
  expiryTimestamp: BigNumberish;
  targets: string[];
  values: BigNumberish[];
  calldatas: BytesLike[];
  gasAmounts: BigNumberish[];
};

export type ProposalDetailStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  BigNumber[],
  string[],
  BigNumber[]
] & {
  nonce: BigNumber;
  chainId: BigNumber;
  expiryTimestamp: BigNumber;
  targets: string[];
  values: BigNumber[];
  calldatas: string[];
  gasAmounts: BigNumber[];
};

export interface GovernanceAdminInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "changeProxyAdmin(address,address)": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getProposalExpiryDuration()": FunctionFragment;
    "getProxyAdmin(address)": FunctionFragment;
    "getProxyImplementation(address)": FunctionFragment;
    "roninChainId()": FunctionFragment;
    "round(uint256)": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setProposalExpiryDuration(uint256)": FunctionFragment;
    "vote(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeProxyAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalExpiryDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "roninChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "round", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalExpiryDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalExpiryDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roninChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "round", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalExpiryDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "ContractUpdated(uint8,address)": EventFragment;
    "ProposalApproved(bytes32)": EventFragment;
    "ProposalCreated(uint256,uint256,bytes32,tuple,address)": EventFragment;
    "ProposalExecuted(bytes32,bool[],bytes[])": EventFragment;
    "ProposalExpired(bytes32)": EventFragment;
    "ProposalExpiryDurationChanged(uint256)": EventFragment;
    "ProposalRejected(bytes32)": EventFragment;
    "ProposalVoted(bytes32,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExpired"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalExpiryDurationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVoted"): EventFragment;
}

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type ProposalApprovedEvent = TypedEvent<
  [string],
  { proposalHash: string }
>;

export type ProposalApprovedEventFilter =
  TypedEventFilter<ProposalApprovedEvent>;

export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, ProposalDetailStructOutput, string],
  {
    chainId: BigNumber;
    round: BigNumber;
    proposalHash: string;
    proposal: ProposalDetailStructOutput;
    creator: string;
  }
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export type ProposalExecutedEvent = TypedEvent<
  [string, boolean[], string[]],
  { proposalHash: string; successCalls: boolean[]; returnDatas: string[] }
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export type ProposalExpiredEvent = TypedEvent<
  [string],
  { proposalHash: string }
>;

export type ProposalExpiredEventFilter = TypedEventFilter<ProposalExpiredEvent>;

export type ProposalExpiryDurationChangedEvent = TypedEvent<
  [BigNumber],
  { duration: BigNumber }
>;

export type ProposalExpiryDurationChangedEventFilter =
  TypedEventFilter<ProposalExpiryDurationChangedEvent>;

export type ProposalRejectedEvent = TypedEvent<
  [string],
  { proposalHash: string }
>;

export type ProposalRejectedEventFilter =
  TypedEventFilter<ProposalRejectedEvent>;

export type ProposalVotedEvent = TypedEvent<
  [string, string, number, BigNumber],
  { proposalHash: string; voter: string; support: number; weight: BigNumber }
>;

export type ProposalVotedEventFilter = TypedEventFilter<ProposalVotedEvent>;

export interface GovernanceAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getProposalExpiryDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<[string]>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    roninChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    round(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber] & {
        status: number;
        hash: string;
        againstVoteWeight: BigNumber;
        forVoteWeight: BigNumber;
        expiryTimestamp: BigNumber;
      }
    >;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  changeProxyAdmin(
    _proxy: string,
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<string>;

  getProxyImplementation(
    _proxy: string,
    overrides?: CallOverrides
  ): Promise<string>;

  roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

  round(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProposalExpiryDuration(
    _expiryDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber] & {
      status: number;
      hash: string;
      againstVoteWeight: BigNumber;
      forVoteWeight: BigNumber;
      expiryTimestamp: BigNumber;
    }
  >;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<string>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<string>;

    roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

    round(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber] & {
        status: number;
        hash: string;
        againstVoteWeight: BigNumber;
        forVoteWeight: BigNumber;
        expiryTimestamp: BigNumber;
      }
    >;
  };

  filters: {
    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "ProposalApproved(bytes32)"(
      proposalHash?: BytesLike | null
    ): ProposalApprovedEventFilter;
    ProposalApproved(
      proposalHash?: BytesLike | null
    ): ProposalApprovedEventFilter;

    "ProposalCreated(uint256,uint256,bytes32,tuple,address)"(
      chainId?: BigNumberish | null,
      round?: BigNumberish | null,
      proposalHash?: BytesLike | null,
      proposal?: null,
      creator?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      chainId?: BigNumberish | null,
      round?: BigNumberish | null,
      proposalHash?: BytesLike | null,
      proposal?: null,
      creator?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(bytes32,bool[],bytes[])"(
      proposalHash?: BytesLike | null,
      successCalls?: null,
      returnDatas?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalHash?: BytesLike | null,
      successCalls?: null,
      returnDatas?: null
    ): ProposalExecutedEventFilter;

    "ProposalExpired(bytes32)"(
      proposalHash?: BytesLike | null
    ): ProposalExpiredEventFilter;
    ProposalExpired(
      proposalHash?: BytesLike | null
    ): ProposalExpiredEventFilter;

    "ProposalExpiryDurationChanged(uint256)"(
      duration?: BigNumberish | null
    ): ProposalExpiryDurationChangedEventFilter;
    ProposalExpiryDurationChanged(
      duration?: BigNumberish | null
    ): ProposalExpiryDurationChangedEventFilter;

    "ProposalRejected(bytes32)"(
      proposalHash?: BytesLike | null
    ): ProposalRejectedEventFilter;
    ProposalRejected(
      proposalHash?: BytesLike | null
    ): ProposalRejectedEventFilter;

    "ProposalVoted(bytes32,address,uint8,uint256)"(
      proposalHash?: BytesLike | null,
      voter?: string | null,
      support?: null,
      weight?: null
    ): ProposalVotedEventFilter;
    ProposalVoted(
      proposalHash?: BytesLike | null,
      voter?: string | null,
      support?: null,
      weight?: null
    ): ProposalVotedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyAdmin(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roninChainId(overrides?: CallOverrides): Promise<BigNumber>;

    round(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeProxyAdmin(
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalExpiryDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyAdmin(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roninChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    round(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProposalExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
