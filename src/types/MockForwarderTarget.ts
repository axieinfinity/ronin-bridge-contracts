/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockForwarderTargetInterface extends utils.Interface {
  functions: {
    "data()": FunctionFragment;
    "foo(uint256)": FunctionFragment;
    "fooCustomErrorRevert()": FunctionFragment;
    "fooPayable(uint256)": FunctionFragment;
    "fooRevert()": FunctionFragment;
    "fooSilentRevert()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "foo", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "fooCustomErrorRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fooPayable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fooRevert", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fooSilentRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fooCustomErrorRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fooPayable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fooRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fooSilentRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "TargetWithdrawn(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TargetWithdrawn"): EventFragment;
}

export type TargetWithdrawnEvent = TypedEvent<
  [string, string, string],
  { _origin: string; _caller: string; _recipient: string }
>;

export type TargetWithdrawnEventFilter = TypedEventFilter<TargetWithdrawnEvent>;

export interface MockForwarderTarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockForwarderTargetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    data(overrides?: CallOverrides): Promise<[BigNumber]>;

    foo(
      _data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fooCustomErrorRevert(overrides?: CallOverrides): Promise<[void]>;

    fooPayable(
      _data: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fooRevert(overrides?: CallOverrides): Promise<[void]>;

    fooSilentRevert(overrides?: CallOverrides): Promise<[void]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  data(overrides?: CallOverrides): Promise<BigNumber>;

  foo(
    _data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fooCustomErrorRevert(overrides?: CallOverrides): Promise<void>;

  fooPayable(
    _data: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fooRevert(overrides?: CallOverrides): Promise<void>;

  fooSilentRevert(overrides?: CallOverrides): Promise<void>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    foo(_data: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fooCustomErrorRevert(overrides?: CallOverrides): Promise<void>;

    fooPayable(_data: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fooRevert(overrides?: CallOverrides): Promise<void>;

    fooSilentRevert(overrides?: CallOverrides): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "TargetWithdrawn(address,address,address)"(
      _origin?: string | null,
      _caller?: string | null,
      _recipient?: string | null
    ): TargetWithdrawnEventFilter;
    TargetWithdrawn(
      _origin?: string | null,
      _caller?: string | null,
      _recipient?: string | null
    ): TargetWithdrawnEventFilter;
  };

  estimateGas: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    foo(
      _data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fooCustomErrorRevert(overrides?: CallOverrides): Promise<BigNumber>;

    fooPayable(
      _data: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fooRevert(overrides?: CallOverrides): Promise<BigNumber>;

    fooSilentRevert(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foo(
      _data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fooCustomErrorRevert(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fooPayable(
      _data: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fooRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fooSilentRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
