/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TrustedOrganizationStruct = {
  consensusAddr: string;
  governor: string;
  bridgeVoter: string;
  weight: BigNumberish;
  addedBlock: BigNumberish;
};

export type TrustedOrganizationStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  consensusAddr: string;
  governor: string;
  bridgeVoter: string;
  weight: BigNumber;
  addedBlock: BigNumber;
};

export interface IRoninTrustedOrganizationInterface extends utils.Interface {
  functions: {
    "addTrustedOrganizations((address,address,address,uint256,uint256)[])": FunctionFragment;
    "checkThreshold(uint256)": FunctionFragment;
    "countTrustedOrganizations()": FunctionFragment;
    "getAllTrustedOrganizations()": FunctionFragment;
    "getBridgeVoterWeight(address)": FunctionFragment;
    "getBridgeVoterWeights(address[])": FunctionFragment;
    "getConsensusWeight(address)": FunctionFragment;
    "getConsensusWeights(address[])": FunctionFragment;
    "getGovernorWeight(address)": FunctionFragment;
    "getGovernorWeights(address[])": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "getTrustedOrganization(address)": FunctionFragment;
    "getTrustedOrganizationAt(uint256)": FunctionFragment;
    "minimumVoteWeight()": FunctionFragment;
    "removeTrustedOrganizations(address[])": FunctionFragment;
    "setThreshold(uint256,uint256)": FunctionFragment;
    "sumBridgeVoterWeights(address[])": FunctionFragment;
    "sumConsensusWeights(address[])": FunctionFragment;
    "sumGovernorWeights(address[])": FunctionFragment;
    "totalWeights()": FunctionFragment;
    "updateTrustedOrganizations((address,address,address,uint256,uint256)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTrustedOrganizations",
    values: [TrustedOrganizationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countTrustedOrganizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTrustedOrganizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeVoterWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeVoterWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedOrganization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedOrganizationAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVoteWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedOrganizations",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sumBridgeVoterWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sumConsensusWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sumGovernorWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrustedOrganizations",
    values: [TrustedOrganizationStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrustedOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countTrustedOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTrustedOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeVoterWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeVoterWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedOrganizationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumBridgeVoterWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumConsensusWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumGovernorWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrustedOrganizations",
    data: BytesLike
  ): Result;

  events: {
    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "TrustedOrganizationsAdded(tuple[])": EventFragment;
    "TrustedOrganizationsRemoved(address[])": EventFragment;
    "TrustedOrganizationsUpdated(tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedOrganizationsAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TrustedOrganizationsRemoved"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TrustedOrganizationsUpdated"
  ): EventFragment;
}

export type ThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type ThresholdUpdatedEventFilter =
  TypedEventFilter<ThresholdUpdatedEvent>;

export type TrustedOrganizationsAddedEvent = TypedEvent<
  [TrustedOrganizationStructOutput[]],
  { orgs: TrustedOrganizationStructOutput[] }
>;

export type TrustedOrganizationsAddedEventFilter =
  TypedEventFilter<TrustedOrganizationsAddedEvent>;

export type TrustedOrganizationsRemovedEvent = TypedEvent<
  [string[]],
  { orgs: string[] }
>;

export type TrustedOrganizationsRemovedEventFilter =
  TypedEventFilter<TrustedOrganizationsRemovedEvent>;

export type TrustedOrganizationsUpdatedEvent = TypedEvent<
  [TrustedOrganizationStructOutput[]],
  { orgs: TrustedOrganizationStructOutput[] }
>;

export type TrustedOrganizationsUpdatedEventFilter =
  TypedEventFilter<TrustedOrganizationsUpdatedEvent>;

export interface IRoninTrustedOrganization extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRoninTrustedOrganizationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTrustedOrganizations(
      arg0: TrustedOrganizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    countTrustedOrganizations(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllTrustedOrganizations(
      overrides?: CallOverrides
    ): Promise<[TrustedOrganizationStructOutput[]]>;

    getBridgeVoterWeight(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getConsensusWeight(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getGovernorWeight(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _num: BigNumber; _denom: BigNumber }>;

    getTrustedOrganization(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<[TrustedOrganizationStructOutput]>;

    getTrustedOrganizationAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TrustedOrganizationStructOutput]>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeTrustedOrganizations(
      _consensusAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sumBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _res: BigNumber }>;

    sumConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _res: BigNumber }>;

    sumGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _res: BigNumber }>;

    totalWeights(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTrustedOrganizations(
      _list: TrustedOrganizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTrustedOrganizations(
    arg0: TrustedOrganizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  countTrustedOrganizations(overrides?: CallOverrides): Promise<BigNumber>;

  getAllTrustedOrganizations(
    overrides?: CallOverrides
  ): Promise<TrustedOrganizationStructOutput[]>;

  getBridgeVoterWeight(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBridgeVoterWeights(
    _list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getConsensusWeight(
    _consensusAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConsensusWeights(
    _list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getGovernorWeight(
    _governor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovernorWeights(
    _list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _num: BigNumber; _denom: BigNumber }>;

  getTrustedOrganization(
    _consensusAddr: string,
    overrides?: CallOverrides
  ): Promise<TrustedOrganizationStructOutput>;

  getTrustedOrganizationAt(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TrustedOrganizationStructOutput>;

  minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

  removeTrustedOrganizations(
    _consensusAddrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sumBridgeVoterWeights(
    _list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sumConsensusWeights(
    _list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sumGovernorWeights(
    _list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalWeights(overrides?: CallOverrides): Promise<BigNumber>;

  updateTrustedOrganizations(
    _list: TrustedOrganizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrustedOrganizations(
      arg0: TrustedOrganizationStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    countTrustedOrganizations(overrides?: CallOverrides): Promise<BigNumber>;

    getAllTrustedOrganizations(
      overrides?: CallOverrides
    ): Promise<TrustedOrganizationStructOutput[]>;

    getBridgeVoterWeight(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getConsensusWeight(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getGovernorWeight(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _num: BigNumber; _denom: BigNumber }>;

    getTrustedOrganization(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<TrustedOrganizationStructOutput>;

    getTrustedOrganizationAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TrustedOrganizationStructOutput>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrustedOrganizations(
      _consensusAddrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _previousNum: BigNumber;
        _previousDenom: BigNumber;
      }
    >;

    sumBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sumConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sumGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalWeights(overrides?: CallOverrides): Promise<BigNumber>;

    updateTrustedOrganizations(
      _list: TrustedOrganizationStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;
    ThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;

    "TrustedOrganizationsAdded(tuple[])"(
      orgs?: null
    ): TrustedOrganizationsAddedEventFilter;
    TrustedOrganizationsAdded(
      orgs?: null
    ): TrustedOrganizationsAddedEventFilter;

    "TrustedOrganizationsRemoved(address[])"(
      orgs?: null
    ): TrustedOrganizationsRemovedEventFilter;
    TrustedOrganizationsRemoved(
      orgs?: null
    ): TrustedOrganizationsRemovedEventFilter;

    "TrustedOrganizationsUpdated(tuple[])"(
      orgs?: null
    ): TrustedOrganizationsUpdatedEventFilter;
    TrustedOrganizationsUpdated(
      orgs?: null
    ): TrustedOrganizationsUpdatedEventFilter;
  };

  estimateGas: {
    addTrustedOrganizations(
      arg0: TrustedOrganizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countTrustedOrganizations(overrides?: CallOverrides): Promise<BigNumber>;

    getAllTrustedOrganizations(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeVoterWeight(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConsensusWeight(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWeight(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedOrganization(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedOrganizationAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrustedOrganizations(
      _consensusAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sumBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sumConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sumGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalWeights(overrides?: CallOverrides): Promise<BigNumber>;

    updateTrustedOrganizations(
      _list: TrustedOrganizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrustedOrganizations(
      arg0: TrustedOrganizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countTrustedOrganizations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllTrustedOrganizations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeVoterWeight(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConsensusWeight(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWeight(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedOrganization(
      _consensusAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedOrganizationAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTrustedOrganizations(
      _consensusAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sumBridgeVoterWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sumConsensusWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sumGovernorWeights(
      _list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTrustedOrganizations(
      _list: TrustedOrganizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
