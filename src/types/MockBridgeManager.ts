/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockBridgeManagerInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "addBridgeOperators(uint96[],address[],address[])": FunctionFragment;
    "checkThreshold(uint256)": FunctionFragment;
    "getBridgeOperatorOf(address[])": FunctionFragment;
    "getBridgeOperatorWeight(address)": FunctionFragment;
    "getBridgeOperators()": FunctionFragment;
    "getCallbackRegisters()": FunctionFragment;
    "getContract(uint8)": FunctionFragment;
    "getFullBridgeOperatorInfos()": FunctionFragment;
    "getGovernorWeight(address)": FunctionFragment;
    "getGovernorWeights(address[])": FunctionFragment;
    "getGovernors()": FunctionFragment;
    "getGovernorsOf(address[])": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "getTotalWeights()": FunctionFragment;
    "isBridgeOperator(address)": FunctionFragment;
    "minimumVoteWeight()": FunctionFragment;
    "registerCallbacks(address[])": FunctionFragment;
    "removeBridgeOperators(address[])": FunctionFragment;
    "setContract(uint8,address)": FunctionFragment;
    "setThreshold(uint256,uint256)": FunctionFragment;
    "sumGovernorsWeight(address[])": FunctionFragment;
    "totalBridgeOperators()": FunctionFragment;
    "unregisterCallbacks(address[])": FunctionFragment;
    "updateBridgeOperator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeOperators",
    values: [BigNumberish[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperatorOf",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperatorWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCallbackRegisters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullBridgeOperatorInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorsOf",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBridgeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVoteWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerCallbacks",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBridgeOperators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sumGovernorsWeight",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBridgeOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterCallbacks",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeOperator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperatorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperatorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallbackRegisters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullBridgeOperatorInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBridgeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCallbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumGovernorsWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterCallbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeOperator",
    data: BytesLike
  ): Result;

  events: {
    "BridgeOperatorUpdated(address,address,address)": EventFragment;
    "BridgeOperatorsAdded(bool[],uint96[],address[],address[])": EventFragment;
    "BridgeOperatorsRemoved(bool[],address[])": EventFragment;
    "ContractUpdated(uint8,address)": EventFragment;
    "Notified(bytes,address[],bool[],bytes[])": EventFragment;
    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeOperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeOperatorsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeOperatorsRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Notified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdUpdated"): EventFragment;
}

export type BridgeOperatorUpdatedEvent = TypedEvent<
  [string, string, string],
  { governor: string; fromBridgeOperator: string; toBridgeOperator: string }
>;

export type BridgeOperatorUpdatedEventFilter =
  TypedEventFilter<BridgeOperatorUpdatedEvent>;

export type BridgeOperatorsAddedEvent = TypedEvent<
  [boolean[], BigNumber[], string[], string[]],
  {
    statuses: boolean[];
    voteWeights: BigNumber[];
    governors: string[];
    bridgeOperators: string[];
  }
>;

export type BridgeOperatorsAddedEventFilter =
  TypedEventFilter<BridgeOperatorsAddedEvent>;

export type BridgeOperatorsRemovedEvent = TypedEvent<
  [boolean[], string[]],
  { statuses: boolean[]; bridgeOperators: string[] }
>;

export type BridgeOperatorsRemovedEventFilter =
  TypedEventFilter<BridgeOperatorsRemovedEvent>;

export type ContractUpdatedEvent = TypedEvent<
  [number, string],
  { contractType: number; addr: string }
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export type NotifiedEvent = TypedEvent<
  [string, string[], boolean[], string[]],
  {
    callData: string;
    registers: string[];
    statuses: boolean[];
    returnDatas: string[];
  }
>;

export type NotifiedEventFilter = TypedEventFilter<NotifiedEvent>;

export type ThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type ThresholdUpdatedEventFilter =
  TypedEventFilter<ThresholdUpdatedEvent>;

export interface MockBridgeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockBridgeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBridgeOperatorOf(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { bridgeOperators: string[] }>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weight: BigNumber }>;

    getBridgeOperators(overrides?: CallOverrides): Promise<[string[]]>;

    getCallbackRegisters(
      overrides?: CallOverrides
    ): Promise<[string[]] & { registers: string[] }>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    getFullBridgeOperatorInfos(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[]] & {
        governors: string[];
        bridgeOperators: string[];
        weights: BigNumber[];
      }
    >;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weight: BigNumber }>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { weights: BigNumber[] }>;

    getGovernors(overrides?: CallOverrides): Promise<[string[]]>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { governors: string[] }>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    getTotalWeights(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBridgeOperator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerCallbacks(
      registers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sum: BigNumber }>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<[BigNumber]>;

    unregisterCallbacks(
      registers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBridgeOperator(
      newBridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  addBridgeOperators(
    voteWeights: BigNumberish[],
    governors: string[],
    bridgeOperators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBridgeOperatorOf(
    governors: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBridgeOperatorWeight(
    bridgeOperator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBridgeOperators(overrides?: CallOverrides): Promise<string[]>;

  getCallbackRegisters(overrides?: CallOverrides): Promise<string[]>;

  getContract(
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFullBridgeOperatorInfos(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[]] & {
      governors: string[];
      bridgeOperators: string[];
      weights: BigNumber[];
    }
  >;

  getGovernorWeight(
    governor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovernorWeights(
    governors: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getGovernors(overrides?: CallOverrides): Promise<string[]>;

  getGovernorsOf(
    bridgeOperators: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

  getTotalWeights(overrides?: CallOverrides): Promise<BigNumber>;

  isBridgeOperator(addr: string, overrides?: CallOverrides): Promise<boolean>;

  minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

  registerCallbacks(
    registers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBridgeOperators(
    bridgeOperators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContract(
    contractType: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sumGovernorsWeight(
    governors: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

  unregisterCallbacks(
    registers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBridgeOperator(
    newBridgeOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBridgeOperatorOf(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOperators(overrides?: CallOverrides): Promise<string[]>;

    getCallbackRegisters(overrides?: CallOverrides): Promise<string[]>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFullBridgeOperatorInfos(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[]] & {
        governors: string[];
        bridgeOperators: string[];
        weights: BigNumber[];
      }
    >;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getGovernors(overrides?: CallOverrides): Promise<string[]>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    getTotalWeights(overrides?: CallOverrides): Promise<BigNumber>;

    isBridgeOperator(addr: string, overrides?: CallOverrides): Promise<boolean>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    registerCallbacks(
      registers: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterCallbacks(
      registers: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    updateBridgeOperator(
      newBridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeOperatorUpdated(address,address,address)"(
      governor?: string | null,
      fromBridgeOperator?: string | null,
      toBridgeOperator?: string | null
    ): BridgeOperatorUpdatedEventFilter;
    BridgeOperatorUpdated(
      governor?: string | null,
      fromBridgeOperator?: string | null,
      toBridgeOperator?: string | null
    ): BridgeOperatorUpdatedEventFilter;

    "BridgeOperatorsAdded(bool[],uint96[],address[],address[])"(
      statuses?: null,
      voteWeights?: null,
      governors?: null,
      bridgeOperators?: null
    ): BridgeOperatorsAddedEventFilter;
    BridgeOperatorsAdded(
      statuses?: null,
      voteWeights?: null,
      governors?: null,
      bridgeOperators?: null
    ): BridgeOperatorsAddedEventFilter;

    "BridgeOperatorsRemoved(bool[],address[])"(
      statuses?: null,
      bridgeOperators?: null
    ): BridgeOperatorsRemovedEventFilter;
    BridgeOperatorsRemoved(
      statuses?: null,
      bridgeOperators?: null
    ): BridgeOperatorsRemovedEventFilter;

    "ContractUpdated(uint8,address)"(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      contractType?: BigNumberish | null,
      addr?: string | null
    ): ContractUpdatedEventFilter;

    "Notified(bytes,address[],bool[],bytes[])"(
      callData?: null,
      registers?: null,
      statuses?: null,
      returnDatas?: null
    ): NotifiedEventFilter;
    Notified(
      callData?: null,
      registers?: null,
      statuses?: null,
      returnDatas?: null
    ): NotifiedEventFilter;

    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;
    ThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOperatorOf(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

    getCallbackRegisters(overrides?: CallOverrides): Promise<BigNumber>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullBridgeOperatorInfos(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernors(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalWeights(overrides?: CallOverrides): Promise<BigNumber>;

    isBridgeOperator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    registerCallbacks(
      registers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterCallbacks(
      registers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBridgeOperator(
      newBridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeOperatorOf(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeOperators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCallbackRegisters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContract(
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullBridgeOperatorInfos(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBridgeOperator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerCallbacks(
      registers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContract(
      contractType: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBridgeOperators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregisterCallbacks(
      registers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBridgeOperator(
      newBridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
