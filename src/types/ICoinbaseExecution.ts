/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICoinbaseExecutionInterface extends utils.Interface {
  functions: {
    "execBailOut(address,uint256)": FunctionFragment;
    "execSlash(address,uint256,uint256,bool)": FunctionFragment;
    "submitBlockReward()": FunctionFragment;
    "wrapUpEpoch()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "execBailOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execSlash",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBlockReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapUpEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "execBailOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execSlash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapUpEpoch",
    data: BytesLike
  ): Result;

  events: {
    "BlockProducerSetUpdated(uint256,uint256,address[])": EventFragment;
    "BlockRewardDeprecated(address,uint256,uint8)": EventFragment;
    "BlockRewardSubmitted(address,uint256,uint256)": EventFragment;
    "BridgeOperatorRewardDistributed(address,address,address,uint256)": EventFragment;
    "BridgeOperatorRewardDistributionFailed(address,address,address,uint256,uint256)": EventFragment;
    "BridgeOperatorSetUpdated(uint256,uint256,address[])": EventFragment;
    "FastFinalityRewardDistributed(address,address,uint256)": EventFragment;
    "FastFinalityRewardDistributionFailed(address,address,uint256,uint256)": EventFragment;
    "MiningRewardDistributed(address,address,uint256)": EventFragment;
    "MiningRewardDistributionFailed(address,address,uint256,uint256)": EventFragment;
    "StakingRewardDistributed(uint256,address[],uint256[])": EventFragment;
    "StakingRewardDistributionFailed(uint256,address[],uint256[],uint256)": EventFragment;
    "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)": EventFragment;
    "ValidatorSetUpdated(uint256,address[])": EventFragment;
    "ValidatorUnjailed(address,uint256)": EventFragment;
    "WrappedUpEpoch(uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockProducerSetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockRewardDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockRewardSubmitted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BridgeOperatorRewardDistributed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BridgeOperatorRewardDistributionFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeOperatorSetUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FastFinalityRewardDistributed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FastFinalityRewardDistributionFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MiningRewardDistributed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MiningRewardDistributionFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingRewardDistributed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakingRewardDistributionFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorPunished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorSetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorUnjailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrappedUpEpoch"): EventFragment;
}

export type BlockProducerSetUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string[]],
  { period: BigNumber; epoch: BigNumber; consensusAddrs: string[] }
>;

export type BlockProducerSetUpdatedEventFilter =
  TypedEventFilter<BlockProducerSetUpdatedEvent>;

export type BlockRewardDeprecatedEvent = TypedEvent<
  [string, BigNumber, number],
  { coinbaseAddr: string; rewardAmount: BigNumber; deprecatedType: number }
>;

export type BlockRewardDeprecatedEventFilter =
  TypedEventFilter<BlockRewardDeprecatedEvent>;

export type BlockRewardSubmittedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { coinbaseAddr: string; submittedAmount: BigNumber; bonusAmount: BigNumber }
>;

export type BlockRewardSubmittedEventFilter =
  TypedEventFilter<BlockRewardSubmittedEvent>;

export type BridgeOperatorRewardDistributedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    consensusAddr: string;
    bridgeOperator: string;
    recipientAddr: string;
    amount: BigNumber;
  }
>;

export type BridgeOperatorRewardDistributedEventFilter =
  TypedEventFilter<BridgeOperatorRewardDistributedEvent>;

export type BridgeOperatorRewardDistributionFailedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    consensusAddr: string;
    bridgeOperator: string;
    recipient: string;
    amount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type BridgeOperatorRewardDistributionFailedEventFilter =
  TypedEventFilter<BridgeOperatorRewardDistributionFailedEvent>;

export type BridgeOperatorSetUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string[]],
  { period: BigNumber; epoch: BigNumber; bridgeOperators: string[] }
>;

export type BridgeOperatorSetUpdatedEventFilter =
  TypedEventFilter<BridgeOperatorSetUpdatedEvent>;

export type FastFinalityRewardDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  { consensusAddr: string; recipient: string; amount: BigNumber }
>;

export type FastFinalityRewardDistributedEventFilter =
  TypedEventFilter<FastFinalityRewardDistributedEvent>;

export type FastFinalityRewardDistributionFailedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    consensusAddr: string;
    recipient: string;
    amount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type FastFinalityRewardDistributionFailedEventFilter =
  TypedEventFilter<FastFinalityRewardDistributionFailedEvent>;

export type MiningRewardDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  { consensusAddr: string; recipient: string; amount: BigNumber }
>;

export type MiningRewardDistributedEventFilter =
  TypedEventFilter<MiningRewardDistributedEvent>;

export type MiningRewardDistributionFailedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    consensusAddr: string;
    recipient: string;
    amount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type MiningRewardDistributionFailedEventFilter =
  TypedEventFilter<MiningRewardDistributionFailedEvent>;

export type StakingRewardDistributedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  { totalAmount: BigNumber; consensusAddrs: string[]; amounts: BigNumber[] }
>;

export type StakingRewardDistributedEventFilter =
  TypedEventFilter<StakingRewardDistributedEvent>;

export type StakingRewardDistributionFailedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], BigNumber],
  {
    totalAmount: BigNumber;
    consensusAddrs: string[];
    amounts: BigNumber[];
    contractBalance: BigNumber;
  }
>;

export type StakingRewardDistributionFailedEventFilter =
  TypedEventFilter<StakingRewardDistributionFailedEvent>;

export type ValidatorPunishedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, boolean],
  {
    consensusAddr: string;
    period: BigNumber;
    jailedUntil: BigNumber;
    deductedStakingAmount: BigNumber;
    blockProducerRewardDeprecated: boolean;
    bridgeOperatorRewardDeprecated: boolean;
  }
>;

export type ValidatorPunishedEventFilter =
  TypedEventFilter<ValidatorPunishedEvent>;

export type ValidatorSetUpdatedEvent = TypedEvent<
  [BigNumber, string[]],
  { period: BigNumber; consensusAddrs: string[] }
>;

export type ValidatorSetUpdatedEventFilter =
  TypedEventFilter<ValidatorSetUpdatedEvent>;

export type ValidatorUnjailedEvent = TypedEvent<
  [string, BigNumber],
  { validator: string; period: BigNumber }
>;

export type ValidatorUnjailedEventFilter =
  TypedEventFilter<ValidatorUnjailedEvent>;

export type WrappedUpEpochEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  { periodNumber: BigNumber; epochNumber: BigNumber; periodEnding: boolean }
>;

export type WrappedUpEpochEventFilter = TypedEventFilter<WrappedUpEpochEvent>;

export interface ICoinbaseExecution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICoinbaseExecutionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitBlockReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapUpEpoch(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  execBailOut(
    _validatorAddr: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execSlash(
    validatorAddr: string,
    newJailedUntil: BigNumberish,
    slashAmount: BigNumberish,
    cannotBailout: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitBlockReward(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapUpEpoch(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submitBlockReward(overrides?: CallOverrides): Promise<void>;

    wrapUpEpoch(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BlockProducerSetUpdated(uint256,uint256,address[])"(
      period?: BigNumberish | null,
      epoch?: BigNumberish | null,
      consensusAddrs?: null
    ): BlockProducerSetUpdatedEventFilter;
    BlockProducerSetUpdated(
      period?: BigNumberish | null,
      epoch?: BigNumberish | null,
      consensusAddrs?: null
    ): BlockProducerSetUpdatedEventFilter;

    "BlockRewardDeprecated(address,uint256,uint8)"(
      coinbaseAddr?: string | null,
      rewardAmount?: null,
      deprecatedType?: null
    ): BlockRewardDeprecatedEventFilter;
    BlockRewardDeprecated(
      coinbaseAddr?: string | null,
      rewardAmount?: null,
      deprecatedType?: null
    ): BlockRewardDeprecatedEventFilter;

    "BlockRewardSubmitted(address,uint256,uint256)"(
      coinbaseAddr?: string | null,
      submittedAmount?: null,
      bonusAmount?: null
    ): BlockRewardSubmittedEventFilter;
    BlockRewardSubmitted(
      coinbaseAddr?: string | null,
      submittedAmount?: null,
      bonusAmount?: null
    ): BlockRewardSubmittedEventFilter;

    "BridgeOperatorRewardDistributed(address,address,address,uint256)"(
      consensusAddr?: string | null,
      bridgeOperator?: string | null,
      recipientAddr?: string | null,
      amount?: null
    ): BridgeOperatorRewardDistributedEventFilter;
    BridgeOperatorRewardDistributed(
      consensusAddr?: string | null,
      bridgeOperator?: string | null,
      recipientAddr?: string | null,
      amount?: null
    ): BridgeOperatorRewardDistributedEventFilter;

    "BridgeOperatorRewardDistributionFailed(address,address,address,uint256,uint256)"(
      consensusAddr?: string | null,
      bridgeOperator?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): BridgeOperatorRewardDistributionFailedEventFilter;
    BridgeOperatorRewardDistributionFailed(
      consensusAddr?: string | null,
      bridgeOperator?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): BridgeOperatorRewardDistributionFailedEventFilter;

    "BridgeOperatorSetUpdated(uint256,uint256,address[])"(
      period?: BigNumberish | null,
      epoch?: BigNumberish | null,
      bridgeOperators?: null
    ): BridgeOperatorSetUpdatedEventFilter;
    BridgeOperatorSetUpdated(
      period?: BigNumberish | null,
      epoch?: BigNumberish | null,
      bridgeOperators?: null
    ): BridgeOperatorSetUpdatedEventFilter;

    "FastFinalityRewardDistributed(address,address,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null
    ): FastFinalityRewardDistributedEventFilter;
    FastFinalityRewardDistributed(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null
    ): FastFinalityRewardDistributedEventFilter;

    "FastFinalityRewardDistributionFailed(address,address,uint256,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): FastFinalityRewardDistributionFailedEventFilter;
    FastFinalityRewardDistributionFailed(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): FastFinalityRewardDistributionFailedEventFilter;

    "MiningRewardDistributed(address,address,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null
    ): MiningRewardDistributedEventFilter;
    MiningRewardDistributed(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null
    ): MiningRewardDistributedEventFilter;

    "MiningRewardDistributionFailed(address,address,uint256,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): MiningRewardDistributionFailedEventFilter;
    MiningRewardDistributionFailed(
      consensusAddr?: string | null,
      recipient?: string | null,
      amount?: null,
      contractBalance?: null
    ): MiningRewardDistributionFailedEventFilter;

    "StakingRewardDistributed(uint256,address[],uint256[])"(
      totalAmount?: null,
      consensusAddrs?: null,
      amounts?: null
    ): StakingRewardDistributedEventFilter;
    StakingRewardDistributed(
      totalAmount?: null,
      consensusAddrs?: null,
      amounts?: null
    ): StakingRewardDistributedEventFilter;

    "StakingRewardDistributionFailed(uint256,address[],uint256[],uint256)"(
      totalAmount?: null,
      consensusAddrs?: null,
      amounts?: null,
      contractBalance?: null
    ): StakingRewardDistributionFailedEventFilter;
    StakingRewardDistributionFailed(
      totalAmount?: null,
      consensusAddrs?: null,
      amounts?: null,
      contractBalance?: null
    ): StakingRewardDistributionFailedEventFilter;

    "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)"(
      consensusAddr?: string | null,
      period?: BigNumberish | null,
      jailedUntil?: null,
      deductedStakingAmount?: null,
      blockProducerRewardDeprecated?: null,
      bridgeOperatorRewardDeprecated?: null
    ): ValidatorPunishedEventFilter;
    ValidatorPunished(
      consensusAddr?: string | null,
      period?: BigNumberish | null,
      jailedUntil?: null,
      deductedStakingAmount?: null,
      blockProducerRewardDeprecated?: null,
      bridgeOperatorRewardDeprecated?: null
    ): ValidatorPunishedEventFilter;

    "ValidatorSetUpdated(uint256,address[])"(
      period?: BigNumberish | null,
      consensusAddrs?: null
    ): ValidatorSetUpdatedEventFilter;
    ValidatorSetUpdated(
      period?: BigNumberish | null,
      consensusAddrs?: null
    ): ValidatorSetUpdatedEventFilter;

    "ValidatorUnjailed(address,uint256)"(
      validator?: string | null,
      period?: null
    ): ValidatorUnjailedEventFilter;
    ValidatorUnjailed(
      validator?: string | null,
      period?: null
    ): ValidatorUnjailedEventFilter;

    "WrappedUpEpoch(uint256,uint256,bool)"(
      periodNumber?: BigNumberish | null,
      epochNumber?: BigNumberish | null,
      periodEnding?: null
    ): WrappedUpEpochEventFilter;
    WrappedUpEpoch(
      periodNumber?: BigNumberish | null,
      epochNumber?: BigNumberish | null,
      periodEnding?: null
    ): WrappedUpEpochEventFilter;
  };

  estimateGas: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitBlockReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapUpEpoch(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitBlockReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapUpEpoch(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
