/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Pausable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721PresetMinterPauserAutoId",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721PresetMinterPauserAutoId__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BridgeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeManager__factory>;
    getContractFactory(
      name: "BridgeManagerCallbackRegister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeManagerCallbackRegister__factory>;
    getContractFactory(
      name: "BridgeTrackingHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeTrackingHelper__factory>;
    getContractFactory(
      name: "HasContracts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasContracts__factory>;
    getContractFactory(
      name: "GlobalConfigConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlobalConfigConsumer__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "GatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayV3__factory>;
    getContractFactory(
      name: "GovernanceAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceAdmin__factory>;
    getContractFactory(
      name: "MinimumWithdrawal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimumWithdrawal__factory>;
    getContractFactory(
      name: "RONTransferHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RONTransferHelper__factory>;
    getContractFactory(
      name: "CoreGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoreGovernance__factory>;
    getContractFactory(
      name: "GlobalCoreGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlobalCoreGovernance__factory>;
    getContractFactory(
      name: "CommonGovernanceProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommonGovernanceProposal__factory>;
    getContractFactory(
      name: "GlobalGovernanceProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlobalGovernanceProposal__factory>;
    getContractFactory(
      name: "GovernanceProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceProposal__factory>;
    getContractFactory(
      name: "CommonGovernanceRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommonGovernanceRelay__factory>;
    getContractFactory(
      name: "GlobalGovernanceRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlobalGovernanceRelay__factory>;
    getContractFactory(
      name: "GovernanceRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceRelay__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxyV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxyV2__factory>;
    getContractFactory(
      name: "ConditionalImplementControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalImplementControl__factory>;
    getContractFactory(
      name: "WithdrawalLimitation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawalLimitation__factory>;
    getContractFactory(
      name: "IBridgeManagerEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeManagerEvents__factory>;
    getContractFactory(
      name: "IBridgeRewardEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeRewardEvents__factory>;
    getContractFactory(
      name: "IBridgeSlashEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeSlashEvents__factory>;
    getContractFactory(
      name: "IBridgeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeManager__factory>;
    getContractFactory(
      name: "IBridgeManagerCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeManagerCallback__factory>;
    getContractFactory(
      name: "IBridgeManagerCallbackRegister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeManagerCallbackRegister__factory>;
    getContractFactory(
      name: "IBridgeReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeReward__factory>;
    getContractFactory(
      name: "IBridgeSlash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeSlash__factory>;
    getContractFactory(
      name: "IBridgeTracking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeTracking__factory>;
    getContractFactory(
      name: "IHasContracts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasContracts__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IBridgeAdminProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeAdminProposal__factory>;
    getContractFactory(
      name: "IERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Mintable__factory>;
    getContractFactory(
      name: "IERC721Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Mintable__factory>;
    getContractFactory(
      name: "IFastFinalityTracking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFastFinalityTracking__factory>;
    getContractFactory(
      name: "IMainchainGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMainchainGatewayV3__factory>;
    getContractFactory(
      name: "IMaintenance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMaintenance__factory>;
    getContractFactory(
      name: "IPauseTarget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPauseTarget__factory>;
    getContractFactory(
      name: "IProfile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProfile__factory>;
    getContractFactory(
      name: "IQuorum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuorum__factory>;
    getContractFactory(
      name: "IRoninGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoninGatewayV3__factory>;
    getContractFactory(
      name: "IRoninGovernanceAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoninGovernanceAdmin__factory>;
    getContractFactory(
      name: "IRoninTrustedOrganization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoninTrustedOrganization__factory>;
    getContractFactory(
      name: "IStakingVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingVesting__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IBaseSlash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseSlash__factory>;
    getContractFactory(
      name: "ICreditScore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreditScore__factory>;
    getContractFactory(
      name: "ISlashBridgeOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashBridgeOperator__factory>;
    getContractFactory(
      name: "ISlashBridgeVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashBridgeVoting__factory>;
    getContractFactory(
      name: "ISlashDoubleSign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashDoubleSign__factory>;
    getContractFactory(
      name: "ISlashFastFinality",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashFastFinality__factory>;
    getContractFactory(
      name: "ISlashIndicator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashIndicator__factory>;
    getContractFactory(
      name: "ISlashUnavailability",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashUnavailability__factory>;
    getContractFactory(
      name: "IBaseStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseStaking__factory>;
    getContractFactory(
      name: "ICandidateStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICandidateStaking__factory>;
    getContractFactory(
      name: "IDelegatorStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegatorStaking__factory>;
    getContractFactory(
      name: "IRewardPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardPool__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "ICandidateManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICandidateManager__factory>;
    getContractFactory(
      name: "ICoinbaseExecution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoinbaseExecution__factory>;
    getContractFactory(
      name: "IEmergencyExit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmergencyExit__factory>;
    getContractFactory(
      name: "ICommonInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICommonInfo__factory>;
    getContractFactory(
      name: "IJailingInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJailingInfo__factory>;
    getContractFactory(
      name: "ITimingInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimingInfo__factory>;
    getContractFactory(
      name: "IValidatorInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidatorInfo__factory>;
    getContractFactory(
      name: "IValidatorInfoV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidatorInfoV2__factory>;
    getContractFactory(
      name: "IRoninValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoninValidatorSet__factory>;
    getContractFactory(
      name: "ISlashingExecution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashingExecution__factory>;
    getContractFactory(
      name: "IConditionalImplementControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConditionalImplementControl__factory>;
    getContractFactory(
      name: "AddressArrayUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressArrayUtils__factory>;
    getContractFactory(
      name: "BridgeOperatorsBallot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeOperatorsBallot__factory>;
    getContractFactory(
      name: "GlobalProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlobalProposal__factory>;
    getContractFactory(
      name: "Proposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proposal__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "Transfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transfer__factory>;
    getContractFactory(
      name: "MainchainBridgeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MainchainBridgeManager__factory>;
    getContractFactory(
      name: "MainchainGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MainchainGatewayV3__factory>;
    getContractFactory(
      name: "MockForwarderTarget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockForwarderTarget__factory>;
    getContractFactory(
      name: "MockBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBridge__factory>;
    getContractFactory(
      name: "MockERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC721__factory>;
    getContractFactory(
      name: "MockGatewayForTracking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockGatewayForTracking__factory>;
    getContractFactory(
      name: "MockPrecompile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPrecompile__factory>;
    getContractFactory(
      name: "MockSlashIndicatorExtended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSlashIndicatorExtended__factory>;
    getContractFactory(
      name: "MockStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStaking__factory>;
    getContractFactory(
      name: "MockPaymentFallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPaymentFallback__factory>;
    getContractFactory(
      name: "MockPaymentFallbackExpensive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPaymentFallbackExpensive__factory>;
    getContractFactory(
      name: "MockTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTransfer__factory>;
    getContractFactory(
      name: "MockPCUPickValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPCUPickValidatorSet__factory>;
    getContractFactory(
      name: "MockPCUSortValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPCUSortValidators__factory>;
    getContractFactory(
      name: "MockPCUValidateDoubleSign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPCUValidateDoubleSign__factory>;
    getContractFactory(
      name: "MockPCUValidateFastFinality",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPCUValidateFastFinality__factory>;
    getContractFactory(
      name: "MockBridgeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBridgeManager__factory>;
    getContractFactory(
      name: "MockBridgeReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBridgeReward__factory>;
    getContractFactory(
      name: "MockBridgeSlash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBridgeSlash__factory>;
    getContractFactory(
      name: "MockRoninBridgeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRoninBridgeManager__factory>;
    getContractFactory(
      name: "MockRoninGatewayV3Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRoninGatewayV3Extended__factory>;
    getContractFactory(
      name: "MockValidatorContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockValidatorContract__factory>;
    getContractFactory(
      name: "MockSorting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSorting__factory>;
    getContractFactory(
      name: "MockTUint256Slot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTUint256Slot__factory>;
    getContractFactory(
      name: "MockActor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockActor__factory>;
    getContractFactory(
      name: "MockConditionalImplementControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockConditionalImplementControl__factory>;
    getContractFactory(
      name: "ILogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILogic__factory>;
    getContractFactory(
      name: "MockLogicBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLogicBase__factory>;
    getContractFactory(
      name: "MockLogicV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLogicV1__factory>;
    getContractFactory(
      name: "MockLogicV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLogicV2__factory>;
    getContractFactory(
      name: "ILogicValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILogicValidatorSet__factory>;
    getContractFactory(
      name: "MockLogicValidatorSetCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLogicValidatorSetCore__factory>;
    getContractFactory(
      name: "MockLogicValidatorSetV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLogicValidatorSetV1__factory>;
    getContractFactory(
      name: "MockLogicValidatorSetV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLogicValidatorSetV2__factory>;
    getContractFactory(
      name: "MockRoninValidatorSetExtended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRoninValidatorSetExtended__factory>;
    getContractFactory(
      name: "MockRoninValidatorSetOverridePrecompile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRoninValidatorSetOverridePrecompile__factory>;
    getContractFactory(
      name: "MockValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockValidatorSet__factory>;
    getContractFactory(
      name: "RoninTrustedOrganization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoninTrustedOrganization__factory>;
    getContractFactory(
      name: "PCUPickValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PCUPickValidatorSet__factory>;
    getContractFactory(
      name: "PCUSortValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PCUSortValidators__factory>;
    getContractFactory(
      name: "PCUValidateDoubleSign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PCUValidateDoubleSign__factory>;
    getContractFactory(
      name: "PCUValidateFastFinality",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PCUValidateFastFinality__factory>;
    getContractFactory(
      name: "PrecompiledUsage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrecompiledUsage__factory>;
    getContractFactory(
      name: "FastFinalityTracking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FastFinalityTracking__factory>;
    getContractFactory(
      name: "BridgeReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeReward__factory>;
    getContractFactory(
      name: "BridgeSlash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeSlash__factory>;
    getContractFactory(
      name: "BridgeTracking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeTracking__factory>;
    getContractFactory(
      name: "PauseEnforcer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PauseEnforcer__factory>;
    getContractFactory(
      name: "RoninBridgeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoninBridgeManager__factory>;
    getContractFactory(
      name: "RoninGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoninGatewayV3__factory>;
    getContractFactory(
      name: "Maintenance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Maintenance__factory>;
    getContractFactory(
      name: "Profile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Profile__factory>;
    getContractFactory(
      name: "ProfileHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileHandler__factory>;
    getContractFactory(
      name: "ProfileStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileStorage__factory>;
    getContractFactory(
      name: "RoninGovernanceAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoninGovernanceAdmin__factory>;
    getContractFactory(
      name: "CreditScore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreditScore__factory>;
    getContractFactory(
      name: "SlashBridgeOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashBridgeOperator__factory>;
    getContractFactory(
      name: "SlashBridgeVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashBridgeVoting__factory>;
    getContractFactory(
      name: "SlashDoubleSign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashDoubleSign__factory>;
    getContractFactory(
      name: "SlashFastFinality",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashFastFinality__factory>;
    getContractFactory(
      name: "SlashIndicator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashIndicator__factory>;
    getContractFactory(
      name: "SlashUnavailability",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashUnavailability__factory>;
    getContractFactory(
      name: "BaseStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStaking__factory>;
    getContractFactory(
      name: "CandidateStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CandidateStaking__factory>;
    getContractFactory(
      name: "DelegatorStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegatorStaking__factory>;
    getContractFactory(
      name: "RewardCalculation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardCalculation__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "StakingVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingVesting__factory>;
    getContractFactory(
      name: "CandidateManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CandidateManager__factory>;
    getContractFactory(
      name: "CoinbaseExecution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoinbaseExecution__factory>;
    getContractFactory(
      name: "EmergencyExit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyExit__factory>;
    getContractFactory(
      name: "NotifiedMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NotifiedMigrator__factory>;
    getContractFactory(
      name: "RoninValidatorSetTimedMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoninValidatorSetTimedMigrator__factory>;
    getContractFactory(
      name: "RoninValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoninValidatorSet__factory>;
    getContractFactory(
      name: "SlashingExecution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlashingExecution__factory>;
    getContractFactory(
      name: "CommonStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommonStorage__factory>;
    getContractFactory(
      name: "JailingStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JailingStorage__factory>;
    getContractFactory(
      name: "TimingStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimingStorage__factory>;
    getContractFactory(
      name: "ValidatorInfoStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorInfoStorage__factory>;
    getContractFactory(
      name: "ValidatorInfoStorageV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorInfoStorageV2__factory>;
    getContractFactory(
      name: "VaultForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultForwarder__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Pausable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721PresetMinterPauserAutoId",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721PresetMinterPauserAutoId>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BridgeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeManager>;
    getContractAt(
      name: "BridgeManagerCallbackRegister",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeManagerCallbackRegister>;
    getContractAt(
      name: "BridgeTrackingHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeTrackingHelper>;
    getContractAt(
      name: "HasContracts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasContracts>;
    getContractAt(
      name: "GlobalConfigConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlobalConfigConsumer>;
    getContractAt(
      name: "Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Forwarder>;
    getContractAt(
      name: "GatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayV3>;
    getContractAt(
      name: "GovernanceAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceAdmin>;
    getContractAt(
      name: "MinimumWithdrawal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimumWithdrawal>;
    getContractAt(
      name: "RONTransferHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RONTransferHelper>;
    getContractAt(
      name: "CoreGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoreGovernance>;
    getContractAt(
      name: "GlobalCoreGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlobalCoreGovernance>;
    getContractAt(
      name: "CommonGovernanceProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommonGovernanceProposal>;
    getContractAt(
      name: "GlobalGovernanceProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlobalGovernanceProposal>;
    getContractAt(
      name: "GovernanceProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceProposal>;
    getContractAt(
      name: "CommonGovernanceRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommonGovernanceRelay>;
    getContractAt(
      name: "GlobalGovernanceRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlobalGovernanceRelay>;
    getContractAt(
      name: "GovernanceRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceRelay>;
    getContractAt(
      name: "TransparentUpgradeableProxyV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxyV2>;
    getContractAt(
      name: "ConditionalImplementControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalImplementControl>;
    getContractAt(
      name: "WithdrawalLimitation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawalLimitation>;
    getContractAt(
      name: "IBridgeManagerEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeManagerEvents>;
    getContractAt(
      name: "IBridgeRewardEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeRewardEvents>;
    getContractAt(
      name: "IBridgeSlashEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeSlashEvents>;
    getContractAt(
      name: "IBridgeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeManager>;
    getContractAt(
      name: "IBridgeManagerCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeManagerCallback>;
    getContractAt(
      name: "IBridgeManagerCallbackRegister",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeManagerCallbackRegister>;
    getContractAt(
      name: "IBridgeReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeReward>;
    getContractAt(
      name: "IBridgeSlash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeSlash>;
    getContractAt(
      name: "IBridgeTracking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeTracking>;
    getContractAt(
      name: "IHasContracts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasContracts>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IBridgeAdminProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeAdminProposal>;
    getContractAt(
      name: "IERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Mintable>;
    getContractAt(
      name: "IERC721Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Mintable>;
    getContractAt(
      name: "IFastFinalityTracking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFastFinalityTracking>;
    getContractAt(
      name: "IMainchainGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMainchainGatewayV3>;
    getContractAt(
      name: "IMaintenance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMaintenance>;
    getContractAt(
      name: "IPauseTarget",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPauseTarget>;
    getContractAt(
      name: "IProfile",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProfile>;
    getContractAt(
      name: "IQuorum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuorum>;
    getContractAt(
      name: "IRoninGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoninGatewayV3>;
    getContractAt(
      name: "IRoninGovernanceAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoninGovernanceAdmin>;
    getContractAt(
      name: "IRoninTrustedOrganization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoninTrustedOrganization>;
    getContractAt(
      name: "IStakingVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingVesting>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IBaseSlash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseSlash>;
    getContractAt(
      name: "ICreditScore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreditScore>;
    getContractAt(
      name: "ISlashBridgeOperator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashBridgeOperator>;
    getContractAt(
      name: "ISlashBridgeVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashBridgeVoting>;
    getContractAt(
      name: "ISlashDoubleSign",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashDoubleSign>;
    getContractAt(
      name: "ISlashFastFinality",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashFastFinality>;
    getContractAt(
      name: "ISlashIndicator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashIndicator>;
    getContractAt(
      name: "ISlashUnavailability",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashUnavailability>;
    getContractAt(
      name: "IBaseStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseStaking>;
    getContractAt(
      name: "ICandidateStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICandidateStaking>;
    getContractAt(
      name: "IDelegatorStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegatorStaking>;
    getContractAt(
      name: "IRewardPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardPool>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "ICandidateManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICandidateManager>;
    getContractAt(
      name: "ICoinbaseExecution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoinbaseExecution>;
    getContractAt(
      name: "IEmergencyExit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmergencyExit>;
    getContractAt(
      name: "ICommonInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICommonInfo>;
    getContractAt(
      name: "IJailingInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJailingInfo>;
    getContractAt(
      name: "ITimingInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimingInfo>;
    getContractAt(
      name: "IValidatorInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidatorInfo>;
    getContractAt(
      name: "IValidatorInfoV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidatorInfoV2>;
    getContractAt(
      name: "IRoninValidatorSet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoninValidatorSet>;
    getContractAt(
      name: "ISlashingExecution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashingExecution>;
    getContractAt(
      name: "IConditionalImplementControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConditionalImplementControl>;
    getContractAt(
      name: "AddressArrayUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressArrayUtils>;
    getContractAt(
      name: "BridgeOperatorsBallot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeOperatorsBallot>;
    getContractAt(
      name: "GlobalProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlobalProposal>;
    getContractAt(
      name: "Proposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proposal>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "Transfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Transfer>;
    getContractAt(
      name: "MainchainBridgeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MainchainBridgeManager>;
    getContractAt(
      name: "MainchainGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MainchainGatewayV3>;
    getContractAt(
      name: "MockForwarderTarget",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockForwarderTarget>;
    getContractAt(
      name: "MockBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBridge>;
    getContractAt(
      name: "MockERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC721>;
    getContractAt(
      name: "MockGatewayForTracking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockGatewayForTracking>;
    getContractAt(
      name: "MockPrecompile",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPrecompile>;
    getContractAt(
      name: "MockSlashIndicatorExtended",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSlashIndicatorExtended>;
    getContractAt(
      name: "MockStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStaking>;
    getContractAt(
      name: "MockPaymentFallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPaymentFallback>;
    getContractAt(
      name: "MockPaymentFallbackExpensive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPaymentFallbackExpensive>;
    getContractAt(
      name: "MockTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockTransfer>;
    getContractAt(
      name: "MockPCUPickValidatorSet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPCUPickValidatorSet>;
    getContractAt(
      name: "MockPCUSortValidators",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPCUSortValidators>;
    getContractAt(
      name: "MockPCUValidateDoubleSign",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPCUValidateDoubleSign>;
    getContractAt(
      name: "MockPCUValidateFastFinality",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPCUValidateFastFinality>;
    getContractAt(
      name: "MockBridgeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBridgeManager>;
    getContractAt(
      name: "MockBridgeReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBridgeReward>;
    getContractAt(
      name: "MockBridgeSlash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBridgeSlash>;
    getContractAt(
      name: "MockRoninBridgeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRoninBridgeManager>;
    getContractAt(
      name: "MockRoninGatewayV3Extended",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRoninGatewayV3Extended>;
    getContractAt(
      name: "MockValidatorContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockValidatorContract>;
    getContractAt(
      name: "MockSorting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSorting>;
    getContractAt(
      name: "MockTUint256Slot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockTUint256Slot>;
    getContractAt(
      name: "MockActor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockActor>;
    getContractAt(
      name: "MockConditionalImplementControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockConditionalImplementControl>;
    getContractAt(
      name: "ILogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILogic>;
    getContractAt(
      name: "MockLogicBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLogicBase>;
    getContractAt(
      name: "MockLogicV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLogicV1>;
    getContractAt(
      name: "MockLogicV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLogicV2>;
    getContractAt(
      name: "ILogicValidatorSet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILogicValidatorSet>;
    getContractAt(
      name: "MockLogicValidatorSetCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLogicValidatorSetCore>;
    getContractAt(
      name: "MockLogicValidatorSetV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLogicValidatorSetV1>;
    getContractAt(
      name: "MockLogicValidatorSetV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLogicValidatorSetV2>;
    getContractAt(
      name: "MockRoninValidatorSetExtended",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRoninValidatorSetExtended>;
    getContractAt(
      name: "MockRoninValidatorSetOverridePrecompile",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRoninValidatorSetOverridePrecompile>;
    getContractAt(
      name: "MockValidatorSet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockValidatorSet>;
    getContractAt(
      name: "RoninTrustedOrganization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoninTrustedOrganization>;
    getContractAt(
      name: "PCUPickValidatorSet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PCUPickValidatorSet>;
    getContractAt(
      name: "PCUSortValidators",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PCUSortValidators>;
    getContractAt(
      name: "PCUValidateDoubleSign",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PCUValidateDoubleSign>;
    getContractAt(
      name: "PCUValidateFastFinality",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PCUValidateFastFinality>;
    getContractAt(
      name: "PrecompiledUsage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrecompiledUsage>;
    getContractAt(
      name: "FastFinalityTracking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FastFinalityTracking>;
    getContractAt(
      name: "BridgeReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeReward>;
    getContractAt(
      name: "BridgeSlash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeSlash>;
    getContractAt(
      name: "BridgeTracking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeTracking>;
    getContractAt(
      name: "PauseEnforcer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PauseEnforcer>;
    getContractAt(
      name: "RoninBridgeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoninBridgeManager>;
    getContractAt(
      name: "RoninGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoninGatewayV3>;
    getContractAt(
      name: "Maintenance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Maintenance>;
    getContractAt(
      name: "Profile",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Profile>;
    getContractAt(
      name: "ProfileHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileHandler>;
    getContractAt(
      name: "ProfileStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileStorage>;
    getContractAt(
      name: "RoninGovernanceAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoninGovernanceAdmin>;
    getContractAt(
      name: "CreditScore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CreditScore>;
    getContractAt(
      name: "SlashBridgeOperator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashBridgeOperator>;
    getContractAt(
      name: "SlashBridgeVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashBridgeVoting>;
    getContractAt(
      name: "SlashDoubleSign",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashDoubleSign>;
    getContractAt(
      name: "SlashFastFinality",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashFastFinality>;
    getContractAt(
      name: "SlashIndicator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashIndicator>;
    getContractAt(
      name: "SlashUnavailability",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashUnavailability>;
    getContractAt(
      name: "BaseStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStaking>;
    getContractAt(
      name: "CandidateStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CandidateStaking>;
    getContractAt(
      name: "DelegatorStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegatorStaking>;
    getContractAt(
      name: "RewardCalculation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardCalculation>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "StakingVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingVesting>;
    getContractAt(
      name: "CandidateManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CandidateManager>;
    getContractAt(
      name: "CoinbaseExecution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoinbaseExecution>;
    getContractAt(
      name: "EmergencyExit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyExit>;
    getContractAt(
      name: "NotifiedMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NotifiedMigrator>;
    getContractAt(
      name: "RoninValidatorSetTimedMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoninValidatorSetTimedMigrator>;
    getContractAt(
      name: "RoninValidatorSet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoninValidatorSet>;
    getContractAt(
      name: "SlashingExecution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlashingExecution>;
    getContractAt(
      name: "CommonStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommonStorage>;
    getContractAt(
      name: "JailingStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JailingStorage>;
    getContractAt(
      name: "TimingStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimingStorage>;
    getContractAt(
      name: "ValidatorInfoStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorInfoStorage>;
    getContractAt(
      name: "ValidatorInfoStorageV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorInfoStorageV2>;
    getContractAt(
      name: "VaultForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultForwarder>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
