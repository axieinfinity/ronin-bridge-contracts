/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MinimumWithdrawalInterface extends utils.Interface {
  functions: {
    "minimumThreshold(address)": FunctionFragment;
    "setMinimumThresholds(address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "minimumThreshold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumThresholds",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "minimumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumThresholds",
    data: BytesLike
  ): Result;

  events: {
    "MinimumThresholdsUpdated(address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MinimumThresholdsUpdated"): EventFragment;
}

export type MinimumThresholdsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; threshold: BigNumber[] }
>;

export type MinimumThresholdsUpdatedEventFilter =
  TypedEventFilter<MinimumThresholdsUpdatedEvent>;

export interface MinimumWithdrawal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinimumWithdrawalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  minimumThreshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setMinimumThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MinimumThresholdsUpdated(address[],uint256[])"(
      tokens?: null,
      threshold?: null
    ): MinimumThresholdsUpdatedEventFilter;
    MinimumThresholdsUpdated(
      tokens?: null,
      threshold?: null
    ): MinimumThresholdsUpdatedEventFilter;
  };

  estimateGas: {
    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    minimumThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinimumThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
