/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ISlashingExecutionInterface extends utils.Interface {
  functions: {
    "execBailOut(address,uint256)": FunctionFragment;
    "execSlash(address,uint256,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "execBailOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execSlash",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "execBailOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execSlash", data: BytesLike): Result;

  events: {
    "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)": EventFragment;
    "ValidatorUnjailed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValidatorPunished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorUnjailed"): EventFragment;
}

export type ValidatorPunishedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, boolean],
  {
    consensusAddr: string;
    period: BigNumber;
    jailedUntil: BigNumber;
    deductedStakingAmount: BigNumber;
    blockProducerRewardDeprecated: boolean;
    bridgeOperatorRewardDeprecated: boolean;
  }
>;

export type ValidatorPunishedEventFilter =
  TypedEventFilter<ValidatorPunishedEvent>;

export type ValidatorUnjailedEvent = TypedEvent<
  [string, BigNumber],
  { validator: string; period: BigNumber }
>;

export type ValidatorUnjailedEventFilter =
  TypedEventFilter<ValidatorUnjailedEvent>;

export interface ISlashingExecution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISlashingExecutionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  execBailOut(
    _validatorAddr: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execSlash(
    validatorAddr: string,
    newJailedUntil: BigNumberish,
    slashAmount: BigNumberish,
    cannotBailout: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)"(
      consensusAddr?: string | null,
      period?: BigNumberish | null,
      jailedUntil?: null,
      deductedStakingAmount?: null,
      blockProducerRewardDeprecated?: null,
      bridgeOperatorRewardDeprecated?: null
    ): ValidatorPunishedEventFilter;
    ValidatorPunished(
      consensusAddr?: string | null,
      period?: BigNumberish | null,
      jailedUntil?: null,
      deductedStakingAmount?: null,
      blockProducerRewardDeprecated?: null,
      bridgeOperatorRewardDeprecated?: null
    ): ValidatorPunishedEventFilter;

    "ValidatorUnjailed(address,uint256)"(
      validator?: string | null,
      period?: null
    ): ValidatorUnjailedEventFilter;
    ValidatorUnjailed(
      validator?: string | null,
      period?: null
    ): ValidatorUnjailedEventFilter;
  };

  estimateGas: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execBailOut(
      _validatorAddr: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execSlash(
      validatorAddr: string,
      newJailedUntil: BigNumberish,
      slashAmount: BigNumberish,
      cannotBailout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
