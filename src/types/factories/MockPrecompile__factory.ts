/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockPrecompile,
  MockPrecompileInterface,
} from "../MockPrecompile";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_candidates",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_weights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_trustedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_maxValidatorNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxPrioritizedValidatorNumber",
        type: "uint256",
      },
    ],
    name: "pickValidatorSet",
    outputs: [
      {
        internalType: "address[]",
        name: "_result",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_validators",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_weights",
        type: "uint256[]",
      },
    ],
    name: "sortValidators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32[2]",
        name: "",
        type: "bytes32[2]",
      },
      {
        internalType: "bytes[][2]",
        name: "",
        type: "bytes[][2]",
      },
      {
        internalType: "bytes[2]",
        name: "",
        type: "bytes[2]",
      },
    ],
    name: "validateFinalityVoteProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "validatingDoubleSignProof",
    outputs: [
      {
        internalType: "bool",
        name: "_validEvidence",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611037806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637794151214610051578063788341af1461007a5780637b47d06b1461008d5780637fc35677146100b7575b600080fd5b61006461005f366004610c1f565b6100d0565b6040516100719190610cb9565b60405180910390f35b610064610088366004610d06565b61010a565b6100a761009b366004610dbd565b60019695505050505050565b6040519015158152602001610071565b6100a76100c5366004610e68565b600195945050505050565b60606100dd86868661011f565b809550819250505060006100f2848351610349565b90506101008286838661035f565b5095945050505050565b60606101168383610527565b90505b92915050565b60608084518451148015610134575084518351145b6101855760405162461bcd60e51b815260206004820152601d60248201527f536f7274696e673a20696e76616c6964206172726179206c656e67746800000060448201526064015b60405180910390fd5b8451600003610198575083905081610341565b6000855167ffffffffffffffff8111156101b4576101b4610acb565b60405190808252806020026020018201604052801561020957816020015b6101f660405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816101d25790505b50905060005b81518110156102b757604051806060016040528088838151811061023557610235610ee9565b60200260200101516001600160a01b0316815260200187838151811061025d5761025d610ee9565b6020026020010151815260200186838151811061027c5761027c610ee9565b602002602001015181525082828151811061029957610299610ee9565b602002602001018190525080806102af90610f15565b91505061020f565b506102d1816000600184516102cc9190610f2e565b610704565b5060005b8151811015610338578181815181106102f0576102f0610ee9565b60200260200101516000015187828151811061030e5761030e610ee9565b6001600160a01b03909216602092830291909101909101528061033081610f15565b9150506102d5565b50858492509250505b935093915050565b60008183106103585781610116565b5090919050565b6000845167ffffffffffffffff81111561037b5761037b610acb565b6040519080825280602002602001820160405280156103a4578160200160208202803683370190505b50905060008060005b87518110156104ab5760008782815181106103ca576103ca610ee9565b60200260200101511180156103de57508482105b15610440578781815181106103f5576103f5610ee9565b602002602001015188838061040990610f15565b94508151811061041b5761041b610ee9565b60200260200101906001600160a01b031690816001600160a01b031681525050610499565b87818151811061045257610452610ee9565b602002602001015184848061046690610f15565b95508151811061047857610478610ee9565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806104a381610f15565b9150506103ad565b5060009150805b8581101561051b5783836104c581610f15565b9450815181106104d7576104d7610ee9565b60200260200101518882815181106104f1576104f1610ee9565b6001600160a01b03909216602092830291909101909101528061051381610f15565b9150506104b2565b50505091909352505050565b6060825182511461057a5760405162461bcd60e51b815260206004820152601d60248201527f536f7274696e673a20696e76616c6964206172726179206c656e677468000000604482015260640161017c565b825160000361058a575081610119565b6000835167ffffffffffffffff8111156105a6576105a6610acb565b6040519080825280602002602001820160405280156105eb57816020015b60408051808201909152600080825260208201528152602001906001900390816105c45790505b50905060005b815181101561067a57604051806040016040528086838151811061061757610617610ee9565b60200260200101516001600160a01b0316815260200185838151811061063f5761063f610ee9565b602002602001015181525082828151811061065c5761065c610ee9565b6020026020010181905250808061067290610f15565b9150506105f1565b506106948160006001845161068f9190610f2e565b6108ae565b5060005b81518110156106fb578181815181106106b3576106b3610ee9565b6020026020010151600001518582815181106106d1576106d1610ee9565b6001600160a01b0390921660209283029190910190910152806106f381610f15565b915050610698565b50929392505050565b606082828082036107195785925050506108a7565b60008660026107288888610f41565b6107329190610f68565b61073c9088610fa4565b8151811061074c5761074c610ee9565b602002602001015190505b818313610874575b806020015187848151811061077657610776610ee9565b602002602001015160200151111561079a578261079281610fcc565b93505061075f565b8682815181106107ac576107ac610ee9565b602002602001015160200151816020015111156107d557816107cd81610fe4565b92505061079a565b81831361086f576108188784815181106107f1576107f1610ee9565b602002602001015188848151811061080b5761080b610ee9565b6020026020010151610a47565b88858151811061082a5761082a610ee9565b6020026020010189858151811061084357610843610ee9565b602002602001018290528290525050828061085d90610fcc565b935050818061086b90610fe4565b9250505b610757565b8186121561088a57610887878784610704565b96505b848312156108a05761089d878487610704565b96505b8693505050505b9392505050565b606082828082036108c35785925050506108a7565b60008660026108d28888610f41565b6108dc9190610f68565b6108e69088610fa4565b815181106108f6576108f6610ee9565b602002602001015190505b818313610a1e575b806020015187848151811061092057610920610ee9565b6020026020010151602001511115610944578261093c81610fcc565b935050610909565b86828151811061095657610956610ee9565b6020026020010151602001518160200151111561097f578161097781610fe4565b925050610944565b818313610a19576109c287848151811061099b5761099b610ee9565b60200260200101518884815181106109b5576109b5610ee9565b6020026020010151610a9e565b8885815181106109d4576109d4610ee9565b602002602001018985815181106109ed576109ed610ee9565b6020026020010182905282905250508280610a0790610fcc565b9350508180610a1590610fe4565b9250505b610901565b81861215610a3457610a318787846108ae565b96505b848312156108a05761089d8784876108ae565b610a6b60405180606001604052806000815260200160008152602001600081525090565b610a8f60405180606001604052806000815260200160008152602001600081525090565b509091905081815b9250929050565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610a8f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b0a57610b0a610acb565b604052919050565b600067ffffffffffffffff821115610b2c57610b2c610acb565b5060051b60200190565b80356001600160a01b0381168114610b4d57600080fd5b919050565b600082601f830112610b6357600080fd5b81356020610b78610b7383610b12565b610ae1565b82815260059290921b84018101918181019086841115610b9757600080fd5b8286015b84811015610bb957610bac81610b36565b8352918301918301610b9b565b509695505050505050565b600082601f830112610bd557600080fd5b81356020610be5610b7383610b12565b82815260059290921b84018101918181019086841115610c0457600080fd5b8286015b84811015610bb95780358352918301918301610c08565b600080600080600060a08688031215610c3757600080fd5b853567ffffffffffffffff80821115610c4f57600080fd5b610c5b89838a01610b52565b96506020880135915080821115610c7157600080fd5b610c7d89838a01610bc4565b95506040880135915080821115610c9357600080fd5b50610ca088828901610bc4565b9598949750949560608101359550608001359392505050565b6020808252825182820181905260009190848201906040850190845b81811015610cfa5783516001600160a01b031683529284019291840191600101610cd5565b50909695505050505050565b60008060408385031215610d1957600080fd5b823567ffffffffffffffff80821115610d3157600080fd5b610d3d86838701610b52565b93506020850135915080821115610d5357600080fd5b50610d6085828601610bc4565b9150509250929050565b60008083601f840112610d7c57600080fd5b50813567ffffffffffffffff811115610d9457600080fd5b602083019150836020828501011115610a9757600080fd5b806040810183101561011957600080fd5b60008060008060008060c08789031215610dd657600080fd5b863567ffffffffffffffff80821115610dee57600080fd5b610dfa8a838b01610d6a565b909850965060208901359550869150610e168a60408b01610dac565b94506080890135915080821115610e2c57600080fd5b610e388a838b01610dac565b935060a0890135915080821115610e4e57600080fd5b50610e5b89828a01610dac565b9150509295509295509295565b600080600080600060608688031215610e8057600080fd5b610e8986610b36565b9450602086013567ffffffffffffffff80821115610ea657600080fd5b610eb289838a01610d6a565b90965094506040880135915080821115610ecb57600080fd5b50610ed888828901610d6a565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610f2757610f27610eff565b5060010190565b8181038181111561011957610119610eff565b8181036000831280158383131683831282161715610f6157610f61610eff565b5092915050565b600082610f8557634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610f9f57610f9f610eff565b500590565b8082018281126000831280158216821582161715610fc457610fc4610eff565b505092915050565b60006001600160ff1b018201610f2757610f27610eff565b6000600160ff1b8201610ff957610ff9610eff565b50600019019056fea26469706673582212201c5b1b848db7d0a82612bef3b3f8aa763f07c1592527ff31c04013229160018264736f6c63430008110033";

type MockPrecompileConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPrecompileConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPrecompile__factory extends ContractFactory {
  constructor(...args: MockPrecompileConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPrecompile> {
    return super.deploy(overrides || {}) as Promise<MockPrecompile>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockPrecompile {
    return super.attach(address) as MockPrecompile;
  }
  connect(signer: Signer): MockPrecompile__factory {
    return super.connect(signer) as MockPrecompile__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPrecompileInterface {
    return new utils.Interface(_abi) as MockPrecompileInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPrecompile {
    return new Contract(address, _abi, signerOrProvider) as MockPrecompile;
  }
}
