/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AddressArrayUtils,
  AddressArrayUtilsInterface,
} from "../AddressArrayUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrDuplicated",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203f4836f4d530ad7df61980948c8d8b2e66b01bb9c7c179a9870131785f9368db64736f6c63430008110033";

type AddressArrayUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressArrayUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressArrayUtils__factory extends ContractFactory {
  constructor(...args: AddressArrayUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AddressArrayUtils> {
    return super.deploy(overrides || {}) as Promise<AddressArrayUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AddressArrayUtils {
    return super.attach(address) as AddressArrayUtils;
  }
  connect(signer: Signer): AddressArrayUtils__factory {
    return super.connect(signer) as AddressArrayUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressArrayUtilsInterface {
    return new utils.Interface(_abi) as AddressArrayUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressArrayUtils {
    return new Contract(address, _abi, signerOrProvider) as AddressArrayUtils;
  }
}
