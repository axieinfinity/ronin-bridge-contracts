/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockBridge, MockBridgeInterface } from "../MockBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bridgeOperatorAddedBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "bridgeOperators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBridgeOperators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_list",
        type: "address[]",
      },
    ],
    name: "replaceBridgeOperators",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610517806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631ce7171e14610051578063901d62771461008157806399ec7d2d146100965780639b19dbfd146100c4575b600080fd5b61006461005f366004610362565b6100d9565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f36600461037b565b610103565b005b6100b66100a43660046103f0565b60006020819052908152604090205481565b604051908152602001610078565b6100cc610300565b6040516100789190610420565b600181815481106100e957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805b828110156101cf578383828181106101215761012161046d565b905060200201602081019061013691906103f0565b6001600160a01b038116600090815260208190526040812054919350036101a2576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0382166000908152602081905260409020439055806101c781610499565b915050610107565b5060005b6001548110156102fa57600181815481106101f0576101f061046d565b60009182526020808320909101546001600160a01b0316808352908290526040909120549092504311156102e8576001600160a01b038216600090815260208190526040812055600180546102469082906104b2565b815481106102565761025661046d565b600091825260209091200154600180546001600160a01b0390921691839081106102825761028261046d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060018054806102c1576102c16104cb565b600082815260209020810160001990810180546001600160a01b03191690550190556101d3565b806102f281610499565b9150506101d3565b50505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561035857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161033a575b5050505050905090565b60006020828403121561037457600080fd5b5035919050565b6000806020838503121561038e57600080fd5b823567ffffffffffffffff808211156103a657600080fd5b818501915085601f8301126103ba57600080fd5b8135818111156103c957600080fd5b8660208260051b85010111156103de57600080fd5b60209290920196919550909350505050565b60006020828403121561040257600080fd5b81356001600160a01b038116811461041957600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156104615783516001600160a01b03168352928401929184019160010161043c565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016104ab576104ab610483565b5060010190565b818103818111156104c5576104c5610483565b92915050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220eeb63b69b895a1ff88a152b6faaf0d03110b986fe2203c50a2f7569cabd1389964736f6c63430008110033";

type MockBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBridge__factory extends ContractFactory {
  constructor(...args: MockBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBridge> {
    return super.deploy(overrides || {}) as Promise<MockBridge>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockBridge {
    return super.attach(address) as MockBridge;
  }
  connect(signer: Signer): MockBridge__factory {
    return super.connect(signer) as MockBridge__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBridgeInterface {
    return new utils.Interface(_abi) as MockBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBridge {
    return new Contract(address, _abi, signerOrProvider) as MockBridge;
  }
}
