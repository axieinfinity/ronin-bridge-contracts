/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IBaseStaking, IBaseStakingInterface } from "../IBaseStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "ErrAdminOfAnyActivePoolForbidden",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrCannotTransferRON",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddr",
        type: "address",
      },
    ],
    name: "ErrInactivePool",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrInvalidArrays",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrOnlyPoolAdminAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrPoolAdminForbidden",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrZeroValue",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "minSecs",
        type: "uint256",
      },
    ],
    name: "CooldownSecsToUndelegateUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "secs",
        type: "uint256",
      },
    ],
    name: "WaitingSecsToRevokeUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "cooldownSecsToUndelegate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "getManySelfStakings",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_poolAdminAddr",
        type: "address",
      },
    ],
    name: "getPoolAddressOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getPoolDetail",
    outputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_stakingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_stakingTotal",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_poolAdminAddr",
        type: "address",
      },
    ],
    name: "isAdminOfActivePool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_cooldownSecs",
        type: "uint256",
      },
    ],
    name: "setCooldownSecsToUndelegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_secs",
        type: "uint256",
      },
    ],
    name: "setWaitingSecsToRevoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "waitingSecsToRevoke",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IBaseStaking__factory {
  static readonly abi = _abi;
  static createInterface(): IBaseStakingInterface {
    return new utils.Interface(_abi) as IBaseStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBaseStaking {
    return new Contract(address, _abi, signerOrProvider) as IBaseStaking;
  }
}
