/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockPCUPickValidatorSet,
  MockPCUPickValidatorSetInterface,
} from "../MockPCUPickValidatorSet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_precompile",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ErrCallPrecompiled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_candidates",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_weights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_trustedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_maxValidatorNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxPrioritizedValidatorNumber",
        type: "uint256",
      },
    ],
    name: "callPrecompile",
    outputs: [
      {
        internalType: "address[]",
        name: "_result",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "precompilePickValidatorSetAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "setPrecompileSortValidatorAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161058b38038061058b83398101604081905261002f91610050565b600080546001600160a01b0319166001600160a01b03831617905550610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b6104fc8061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063326bc856146100465780633b3159b6146100785780636b354b0d14610098575b600080fd5b6100766100543660046101c8565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100ab6100a63660046102b5565b6100b8565b60405161008f91906103ef565b60606100c786868686866100d2565b509695505050505050565b60606000806100e96000546001600160a01b031690565b905060008888888888604051602401610106959493929190610432565b60408051601f19818403018152919052602080820180516001600160e01b0316633bca0a8960e11b17905281518b51929350600192909160009161014991610496565b6101549060406104b3565b90506020840181888483895afa61016a57600093505b503d61017557600092505b6020870196508261019957604051630fc2632160e01b815260040160405180910390fd5b8651955050505050509550959350505050565b80356001600160a01b03811681146101c357600080fd5b919050565b6000602082840312156101da57600080fd5b6101e3826101ac565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610229576102296101ea565b604052919050565b600067ffffffffffffffff82111561024b5761024b6101ea565b5060051b60200190565b600082601f83011261026657600080fd5b8135602061027b61027683610231565b610200565b82815260059290921b8401810191818101908684111561029a57600080fd5b8286015b848110156100c7578035835291830191830161029e565b600080600080600060a086880312156102cd57600080fd5b853567ffffffffffffffff808211156102e557600080fd5b818801915088601f8301126102f957600080fd5b8135602061030961027683610231565b82815260059290921b8401810191818101908c84111561032857600080fd5b948201945b8386101561034d5761033e866101ac565b8252948201949082019061032d565b9950508901359250508082111561036357600080fd5b61036f89838a01610255565b9550604088013591508082111561038557600080fd5b5061039288828901610255565b9598949750949560608101359550608001359392505050565b600081518084526020808501945080840160005b838110156103e45781516001600160a01b0316875295820195908201906001016103bf565b509495945050505050565b6020815260006101e360208301846103ab565b600081518084526020808501945080840160005b838110156103e457815187529582019590820190600101610416565b60a08152600061044560a08301886103ab565b82810360208401526104578188610402565b9050828103604084015261046b8187610402565b60608401959095525050608001529392505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104ad576104ad610480565b92915050565b808201808211156104ad576104ad61048056fea2646970667358221220937f508c98f4c2faf04ac0c0776048d7770a69b869bb4be90e901fd6f823d85464736f6c63430008110033";

type MockPCUPickValidatorSetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPCUPickValidatorSetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPCUPickValidatorSet__factory extends ContractFactory {
  constructor(...args: MockPCUPickValidatorSetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _precompile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPCUPickValidatorSet> {
    return super.deploy(
      _precompile,
      overrides || {}
    ) as Promise<MockPCUPickValidatorSet>;
  }
  getDeployTransaction(
    _precompile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_precompile, overrides || {});
  }
  attach(address: string): MockPCUPickValidatorSet {
    return super.attach(address) as MockPCUPickValidatorSet;
  }
  connect(signer: Signer): MockPCUPickValidatorSet__factory {
    return super.connect(signer) as MockPCUPickValidatorSet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPCUPickValidatorSetInterface {
    return new utils.Interface(_abi) as MockPCUPickValidatorSetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPCUPickValidatorSet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockPCUPickValidatorSet;
  }
}
