/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IConditionalImplementControl,
  IConditionalImplementControlInterface,
} from "../IConditionalImplementControl";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ErrDelegateFromUnknownOrigin",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "selfUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "args",
        type: "bytes[]",
      },
    ],
    name: "setCallDatas",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IConditionalImplementControl__factory {
  static readonly abi = _abi;
  static createInterface(): IConditionalImplementControlInterface {
    return new utils.Interface(_abi) as IConditionalImplementControlInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IConditionalImplementControl {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IConditionalImplementControl;
  }
}
