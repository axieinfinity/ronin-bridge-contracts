/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Proposal, ProposalInterface } from "../Proposal";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalHash",
        type: "bytes32",
      },
    ],
    name: "ErrInsufficientGas",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrInvalidExpiryTimestamp",
    type: "error",
  },
  {
    inputs: [],
    name: "TYPE_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806364d4c819146038575b600080fd5b605e7fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a81565b60405190815260200160405180910390f3fea2646970667358221220cc1552129f058ae213abca7352015c9c92bbbab61aec3cd29e9069e9daf0208e64736f6c63430008110033";

type ProposalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProposalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proposal__factory extends ContractFactory {
  constructor(...args: ProposalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Proposal> {
    return super.deploy(overrides || {}) as Promise<Proposal>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Proposal {
    return super.attach(address) as Proposal;
  }
  connect(signer: Signer): Proposal__factory {
    return super.connect(signer) as Proposal__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProposalInterface {
    return new utils.Interface(_abi) as ProposalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Proposal {
    return new Contract(address, _abi, signerOrProvider) as Proposal;
  }
}
