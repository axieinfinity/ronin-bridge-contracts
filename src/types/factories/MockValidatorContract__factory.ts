/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockValidatorContract,
  MockValidatorContractInterface,
} from "../MockValidatorContract";

const _abi = [
  {
    inputs: [],
    name: "currentPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
    ],
    name: "setCurrentPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ac8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80630604061814603757806329a9c91d14604c575b600080fd5b60005460405190815260200160405180910390f35b605c6057366004605e565b600055565b005b600060208284031215606f57600080fd5b503591905056fea264697066735822122077b7d057ecbf305a07c94a8b5859e3aeff417d38fcbaa2f6e15d3908af15ab1864736f6c63430008110033";

type MockValidatorContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockValidatorContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockValidatorContract__factory extends ContractFactory {
  constructor(...args: MockValidatorContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockValidatorContract> {
    return super.deploy(overrides || {}) as Promise<MockValidatorContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockValidatorContract {
    return super.attach(address) as MockValidatorContract;
  }
  connect(signer: Signer): MockValidatorContract__factory {
    return super.connect(signer) as MockValidatorContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockValidatorContractInterface {
    return new utils.Interface(_abi) as MockValidatorContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockValidatorContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockValidatorContract;
  }
}
