/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockTransfer, MockTransferInterface } from "../MockTransfer";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sendAmount",
        type: "uint256",
      },
    ],
    name: "ErrInsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrRecipientRevert",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "fooTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "track",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052610193806100136000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637db78a971461003b5780639d0ac07b14610050575b600080fd5b61004e6100493660046100f5565b61006b565b005b61005960005481565b60405190815260200160405180910390f35b610076838383610095565b156100905760008054908061008a83610136565b91905055505b505050565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d80600081146100e5576040519150601f19603f3d011682016040523d82523d6000602084013e6100ea565b606091505b509095945050505050565b60008060006060848603121561010a57600080fd5b83356001600160a01b038116811461012157600080fd5b95602085013595506040909401359392505050565b60006001820161015657634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205eaea4b733ccc89dce197b3da7586fcc76440bd009ed74a93cb0817d4ec4babc64736f6c63430008110033";

type MockTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTransfer__factory extends ContractFactory {
  constructor(...args: MockTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<MockTransfer> {
    return super.deploy(overrides || {}) as Promise<MockTransfer>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockTransfer {
    return super.attach(address) as MockTransfer;
  }
  connect(signer: Signer): MockTransfer__factory {
    return super.connect(signer) as MockTransfer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTransferInterface {
    return new utils.Interface(_abi) as MockTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTransfer {
    return new Contract(address, _abi, signerOrProvider) as MockTransfer;
  }
}
