/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IBridgeManagerCallback,
  IBridgeManagerCallbackInterface,
} from "../IBridgeManagerCallback";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "currentBridgeOperator",
        type: "address",
      },
      {
        internalType: "address",
        name: "newbridgeOperator",
        type: "address",
      },
    ],
    name: "onBridgeOperatorUpdated",
    outputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "addeds",
        type: "bool[]",
      },
    ],
    name: "onBridgeOperatorsAdded",
    outputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "removeds",
        type: "bool[]",
      },
    ],
    name: "onBridgeOperatorsRemoved",
    outputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IBridgeManagerCallback__factory {
  static readonly abi = _abi;
  static createInterface(): IBridgeManagerCallbackInterface {
    return new utils.Interface(_abi) as IBridgeManagerCallbackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBridgeManagerCallback {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IBridgeManagerCallback;
  }
}
