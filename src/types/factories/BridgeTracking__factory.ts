/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeTracking,
  BridgeTrackingInterface,
} from "../BridgeTracking";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "ErrContractTypeNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "enum RoleAccess",
        name: "expectedRole",
        type: "uint8",
      },
    ],
    name: "ErrUnauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "enum ContractType",
        name: "expectedContractType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "actual",
        type: "address",
      },
    ],
    name: "ErrUnexpectedInternalCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ErrZeroCodeContract",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ContractUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "reason",
        type: "bytes",
      },
    ],
    name: "ExternalCallFailed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "address",
        name: "contract_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "operators",
        type: "address[]",
      },
    ],
    name: "getManyTotalBallots",
    outputs: [
      {
        internalType: "uint256[]",
        name: "_res",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IBridgeTracking.VoteKind",
        name: "kind",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "handleVoteApproved",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bridgeContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "validatorContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "startedAtBlock_",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeREP2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeV2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bridgeManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "bridgeSlash",
        type: "address",
      },
      {
        internalType: "address",
        name: "bridgeReward",
        type: "address",
      },
      {
        internalType: "address",
        name: "dposGA",
        type: "address",
      },
    ],
    name: "initializeV3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IBridgeTracking.VoteKind",
        name: "kind",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "recordVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startedAtBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
    ],
    name: "totalBallot",
    outputs: [
      {
        internalType: "uint256",
        name: "totalBallot_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "bridgeOperator",
        type: "address",
      },
    ],
    name: "totalBallotOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
    ],
    name: "totalVote",
    outputs: [
      {
        internalType: "uint256",
        name: "totalVote_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100eb565b600154600160a81b900460ff161561008c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60015460ff600160a01b909104811610156100e9576001805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611ad9806100fa6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c7c4fea91161008c578063de981f1b11610066578063de981f1b1461017e578063e2a75f36146101a9578063f67e8152146101bc578063f84bd121146101dc57600080fd5b8063c7c4fea914610145578063ca21287e14610158578063d25ed4c61461016b57600080fd5b80631794bb3c146100d4578063229f88ea146100e95780633b154455146100fc5780634ac0bcda146101045780635cd8a76b1461012a578063865e6fd314610132575b600080fd5b6100e76100e23660046114e5565b6101e4565b005b6100e76100f7366004611535565b6102e4565b6100e761048c565b61011761011236600461155f565b61055c565b6040519081526020015b60405180910390f35b6100e761057a565b6100e761014036600461159e565b610673565b6100e76101533660046115ca565b610692565b6100e761016636600461160a565b610a71565b610117610179366004611666565b610b5c565b61019161018c36600461167f565b610b91565b6040516001600160a01b039091168152602001610121565b6101176101b7366004611666565b610c07565b6101cf6101ca36600461169a565b610c31565b6040516101219190611754565b600254610117565b600154600160a81b900460ff161580801561020a575060018054600160a01b900460ff16105b8061022a5750303b15801561022a575060018054600160a01b900460ff16145b61024f5760405162461bcd60e51b815260040161024690611767565b60405180910390fd5b6001805460ff60a01b1916600160a01b179055801561027c576001805460ff60a81b1916600160a81b1790555b610287600285610c78565b610292600884610c78565b600282905580156102de576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60026102ef81610d1c565b6102f7610d68565b6000600a600085600281111561030f5761030f6117b5565b6002811115610320576103206117b5565b81526020019081526020016000206000848152602001908152602001600020905080600001546000036102de57610355610d76565b60006103616008610b91565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c291906117cb565b808355600480546001818101835560009290925260029081027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054939450928892849260ff1990921691849081111561041f5761041f6117b5565b02179055506001808201869055830160005b81548110156104745761046c8888848481548110610451576104516117e4565b6000918252602090912001546001600160a01b031687611018565b600101610431565b50610483600185016000611458565b50505050505050565b600461049781610d1c565b600019600b54146104df5760405162461bcd60e51b815260206004820152601260248201527130b63932b0b23c9034b734ba103932b8101960711b6044820152606401610246565b6104e96008610b91565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a91906117cb565b600b5561055960046000610c78565b50565b6000610571838361056c86611198565b6112be565b90505b92915050565b600154600290600160a81b900460ff161580156105a5575060015460ff808316600160a01b90920416105b6105c15760405162461bcd60e51b815260040161024690611767565b6001805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b179055600054610601906002906001600160a01b0316610c78565b600154610619906008906001600160a01b0316610c78565b600080546001600160a01b031916905560018054600161ff0160a01b031916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61067b611314565b6106848161136e565b61068e8282610c78565b5050565b600261069d81610d1c565b6106a5610d68565b60006106b16008610b91565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906117cb565b905061071c610d76565b6000600a6000876002811115610734576107346117b5565b6002811115610745576107456117b5565b81526020019081526020016000206000868152602001908152602001600020905080600001546000036107a7576001908101805491820181556000908152602090200180546001600160a01b0319166001600160a01b038516179055506102de565b6107b386868685611018565b600b548281101561048357600b8381556000906107cf90610b91565b6001600160a01b0316639b19dbfd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610834919081019061181b565b9050600061084283836113a4565b9050600061084f84610c07565b9050600061085c85610b5c565b9050600061086a600c610b91565b9050600080826001600160a01b0316878786888c6040516024016108929594939291906118e0565b60408051601f198184030181529181526020820180516001600160e01b0316634dca592560e01b179052516108c79190611979565b6000604051808303816000865af19150503d8060008114610904576040519150601f19603f3d011682016040523d82523d6000602084013e610909565b606091505b50915091508161096057604051634dca592560e01b906001600160a01b038516907feaa424ccc38ebcf22402729592dedf8315790e0128cb577cdeff1a3ee627f82790610957908590611995565b60405180910390a35b600061096c600d610b91565b9050806001600160a01b0316888887898d6040516024016109919594939291906118e0565b60408051601f198184030181529181526020820180516001600160e01b03166335e5b7eb60e11b179052516109c69190611979565b6000604051808303816000865af19150503d8060008114610a03576040519150601f19603f3d011682016040523d82523d6000602084013e610a08565b606091505b50909350915082610a60576040516335e5b7eb60e11b906001600160a01b038316907feaa424ccc38ebcf22402729592dedf8315790e0128cb577cdeff1a3ee627f82790610a57908690611995565b60405180910390a35b505050505050505050505050505050565b600154600390600160a81b900460ff16158015610a9c575060015460ff808316600160a01b90920416105b610ab85760405162461bcd60e51b815260040161024690611767565b6001805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b179055610aeb600b86610c78565b610af6600c85610c78565b610b01600d84610c78565b610b0c600483610c78565b600019600b556001805460ff60a81b1916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b600081815260096020526040902060010154610b7782611198565b15610b8c57600654610b8990826119c8565b90505b919050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610bc857610bc86117b5565b60ff1681526020810191909152604001600020546001600160a01b0316905080610b8c578160405163409140df60e11b815260040161024691906119fd565b600081815260096020526040902054610c1f82611198565b15610b8c57600454610b8990826119c8565b6060610c70848484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506113a492505050565b949350505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115610cae57610cae6117b5565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115610cef57610cef6117b5565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b610d2581610b91565b6001600160a01b0316336001600160a01b031614610559576000356001600160e01b03191681336040516320e0f98d60e21b815260040161024693929190611a0b565b600254431015610d7457005b565b6000610d826008610b91565b60405163a3d545f560e01b81524360048201529091506000906001600160a01b0383169063a3d545f590602401602060405180830381865afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df091906117cb565b905080600360000154101561068e576000826001600160a01b031663468c96ae6003600001546001610e2291906119c8565b6040518263ffffffff1660e01b8152600401610e4091815260200190565b6040805180830381865afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e809190611a42565b60038490556000818152600960205260408120600454815493955090935091839190610ead9084906119c8565b9091555050600654600182018054600090610ec99084906119c8565b90915550600090505b600854811015610f5957600880546000919083908110610ef457610ef46117e4565b60009182526020808320909101546001600160a01b0316808352600782526040808420546002880190935283208054919450919290610f349084906119c8565b90915550506001600160a01b0316600090815260076020526040812055600101610ed2565b5060005b600454811015610feb57600060036001018281548110610f7f57610f7f6117e4565b6000918252602082206002918202018054909350600a91839160ff1690811115610fab57610fab6117b5565b6002811115610fbc57610fbc6117b5565b815260208082019290925260409081016000908120600195860154825290925290206003018590555001610f5d565b50610ff860046000611476565b60006005818155600682905590611010600882611458565b505050505050565b6000600a6000866002811115611030576110306117b5565b6002811115611041576110416117b5565b81526020808201929092526040908101600090812087825283528181206001600160a01b038716825260028101909352205490915060ff161561108457506102de565b6001600160a01b03831660009081526002820160205260408120805460ff19166001179055600382015490819003611151576001600160a01b038416600090815260076020526040812054900361112157600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0386161790555b6006805460019081019091556001600160a01b038516600090815260076020526040902080549091019055611010565b82810361101057600090815260096020908152604080832060018082018054820190556001600160a01b039790971684526002019091529020805490930190925550505050565b6000806111a56008610b91565b60405163a3d545f560e01b81524360048201529091506000906001600160a01b0383169063a3d545f590602401602060405180830381865afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121391906117cb565b9050600080836001600160a01b031663468c96ae600360000154600161123991906119c8565b6040518263ffffffff1660e01b815260040161125791815260200190565b6040805180830381865afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112979190611a42565b915091508180156112a757508086145b80156112b4575060035483115b9695505050505050565b60008381526009602090815260408083206001600160a01b0386168452600201909152902054811561130d576001600160a01b038316600090815260076020526040902054610c7090826119c8565b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610d74576000356001600160e01b0319166001604051620f948f60ea1b8152600401610246929190611a75565b806001600160a01b03163b60000361055957604051630bfc64a360e21b81526001600160a01b0382166004820152602401610246565b80516060908067ffffffffffffffff8111156113c2576113c26117fa565b6040519080825280602002602001820160405280156113eb578160200160208202803683370190505b50915060006113f985611198565b905060005b8281101561144f5761142a8686838151811061141c5761141c6117e4565b6020026020010151846112be565b84828151811061143c5761143c6117e4565b60209081029190910101526001016113fe565b50505092915050565b50805460008255906000526020600020908101906105599190611497565b508054600082556002029060005260206000209081019061055991906114b0565b5b808211156114ac5760008155600101611498565b5090565b5b808211156114ac57805460ff19168155600060018201556002016114b1565b6001600160a01b038116811461055957600080fd5b6000806000606084860312156114fa57600080fd5b8335611505816114d0565b92506020840135611515816114d0565b929592945050506040919091013590565b803560038110610b8c57600080fd5b6000806040838503121561154857600080fd5b61155183611526565b946020939093013593505050565b6000806040838503121561157257600080fd5b823591506020830135611584816114d0565b809150509250929050565b803560108110610b8c57600080fd5b600080604083850312156115b157600080fd5b6115ba8361158f565b91506020830135611584816114d0565b6000806000606084860312156115df57600080fd5b6115e884611526565b92506020840135915060408401356115ff816114d0565b809150509250925092565b6000806000806080858703121561162057600080fd5b843561162b816114d0565b9350602085013561163b816114d0565b9250604085013561164b816114d0565b9150606085013561165b816114d0565b939692955090935050565b60006020828403121561167857600080fd5b5035919050565b60006020828403121561169157600080fd5b6105718261158f565b6000806000604084860312156116af57600080fd5b83359250602084013567ffffffffffffffff808211156116ce57600080fd5b818601915086601f8301126116e257600080fd5b8135818111156116f157600080fd5b8760208260051b850101111561170657600080fd5b6020830194508093505050509250925092565b600081518084526020808501945080840160005b838110156117495781518752958201959082019060010161172d565b509495945050505050565b6020815260006105716020830184611719565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156117dd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8051610b8c816114d0565b6000602080838503121561182e57600080fd5b825167ffffffffffffffff8082111561184657600080fd5b818501915085601f83011261185a57600080fd5b81518181111561186c5761186c6117fa565b8060051b604051601f19603f83011681018181108582111715611891576118916117fa565b6040529182528482019250838101850191888311156118af57600080fd5b938501935b828510156118d4576118c585611810565b845293850193928501926118b4565b98975050505050505050565b60a0808252865190820181905260009060209060c0840190828a01845b828110156119225781516001600160a01b0316845292840192908401906001016118fd565b505050838103828501526119368189611719565b6040850197909752505050606081019290925260809091015292915050565b60005b83811015611970578181015183820152602001611958565b50506000910152565b6000825161198b818460208701611955565b9190910192915050565b60208152600082518060208401526119b4816040850160208701611955565b601f01601f19169190910160400192915050565b8082018082111561057457634e487b7160e01b600052601160045260246000fd5b601081106119f9576119f96117b5565b9052565b6020810161057482846119e9565b6001600160e01b03198416815260608101611a2960208301856119e9565b6001600160a01b03929092166040919091015292915050565b60008060408385031215611a5557600080fd5b82518015158114611a6557600080fd5b6020939093015192949293505050565b6001600160e01b03198316815260408101600b8310611a9657611a966117b5565b826020830152939250505056fea2646970667358221220214190675e3264777a7c9fbfa844e56b0d469c6b624a2b476fe85c9235ee809a64736f6c63430008110033";

type BridgeTrackingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeTrackingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeTracking__factory extends ContractFactory {
  constructor(...args: BridgeTrackingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeTracking> {
    return super.deploy(overrides || {}) as Promise<BridgeTracking>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BridgeTracking {
    return super.attach(address) as BridgeTracking;
  }
  connect(signer: Signer): BridgeTracking__factory {
    return super.connect(signer) as BridgeTracking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeTrackingInterface {
    return new utils.Interface(_abi) as BridgeTrackingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeTracking {
    return new Contract(address, _abi, signerOrProvider) as BridgeTracking;
  }
}
