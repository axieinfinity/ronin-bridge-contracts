/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockActor, MockActorInterface } from "../MockActor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101a63803806101a683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610113806100936000396000f3fe60806040526000805460405182916001600160a01b03169034906024908490369060cd565b60006040518083038185875af1925050503d8060008114605f576040519150601f19603f3d011682016040523d82523d6000602084013e6064565b606091505b50909250905060818215156001600160e01b031960003516836089565b805160208201f35b6001600160e01b0319600035168360c7578151801560a8578060208401fd5b50604051638e3eda2b81528160208201528360408201526044601c8201fd5b50505050565b818382376000910190815291905056fea2646970667358221220603355f6db419dbf38e41f1976d1a77c26fe28212cd43a434092b30da746cbf364736f6c63430008110033";

type MockActorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockActorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockActor__factory extends ContractFactory {
  constructor(...args: MockActorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockActor> {
    return super.deploy(target, overrides || {}) as Promise<MockActor>;
  }
  getDeployTransaction(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(target, overrides || {});
  }
  attach(address: string): MockActor {
    return super.attach(address) as MockActor;
  }
  connect(signer: Signer): MockActor__factory {
    return super.connect(signer) as MockActor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockActorInterface {
    return new utils.Interface(_abi) as MockActorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockActor {
    return new Contract(address, _abi, signerOrProvider) as MockActor;
  }
}
