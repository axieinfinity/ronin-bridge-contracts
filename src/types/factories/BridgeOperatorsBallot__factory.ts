/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeOperatorsBallot,
  BridgeOperatorsBallotInterface,
} from "../BridgeOperatorsBallot";

const _abi = [
  {
    inputs: [],
    name: "ErrInvalidOrderOfBridgeOperator",
    type: "error",
  },
  {
    inputs: [],
    name: "BRIDGE_OPERATORS_BALLOT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80634fd908ac146038575b600080fd5b605e7fd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a81565b60405190815260200160405180910390f3fea26469706673582212206309279ba8acb0b308dc5a32f60f3930ea546f50d2060a2871e8fe647f0c1b2964736f6c63430008110033";

type BridgeOperatorsBallotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeOperatorsBallotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeOperatorsBallot__factory extends ContractFactory {
  constructor(...args: BridgeOperatorsBallotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeOperatorsBallot> {
    return super.deploy(overrides || {}) as Promise<BridgeOperatorsBallot>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BridgeOperatorsBallot {
    return super.attach(address) as BridgeOperatorsBallot;
  }
  connect(signer: Signer): BridgeOperatorsBallot__factory {
    return super.connect(signer) as BridgeOperatorsBallot__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeOperatorsBallotInterface {
    return new utils.Interface(_abi) as BridgeOperatorsBallotInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeOperatorsBallot {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BridgeOperatorsBallot;
  }
}
