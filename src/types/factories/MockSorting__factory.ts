/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockSorting, MockSortingInterface } from "../MockSorting";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_data",
        type: "uint256[]",
      },
    ],
    name: "addData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "data",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_data",
        type: "uint256[]",
      },
    ],
    name: "sort",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addrs",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_values",
        type: "uint256[]",
      },
    ],
    name: "sortAddressesAndValues",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "sortOnStorage",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c1f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630cc74ab21461005c5780638e285b6c146100855780639ec8b0261461009b578063d3a2d050146100bb578063f0ba8440146100d0575b600080fd5b61006f61006a3660046108bb565b6100f1565b60405161007c9190610927565b60405180910390f35b61008d610169565b60405161007c9291906109af565b6100ae6100a93660046109e7565b61023a565b60405161007c9190610aa5565b6100ce6100c93660046109e7565b61024b565b005b6100e36100de366004610ab8565b6102a0565b60405190815260200161007c565b6060610160858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506102c192505050565b95945050505050565b606060008060008054806020026020016040519081016040528092919081815260200182805480156101ba57602002820191906000526020600020905b8154815260200190600101908083116101a6575b505050505090506101ca816104a2565b80516101de91600091602090910190610816565b506000805460408051602080840282018101909252828152908390839083018282801561022a57602002820191906000526020600020905b815481526020019060010190808311610216575b5050505050915092509250509091565b6060610245826104a2565b92915050565b60005b815181101561029c57600082828151811061026b5761026b610ad1565b602090810291909101810151825460018101845560009384529190922001558061029481610afd565b91505061024e565b5050565b600081815481106102b057600080fd5b600091825260209091200154905081565b606082518251146103185760405162461bcd60e51b815260206004820152601d60248201527f536f7274696e673a20696e76616c6964206172726179206c656e677468000000604482015260640160405180910390fd5b8251600003610328575081610245565b6000835167ffffffffffffffff811115610344576103446109d1565b60405190808252806020026020018201604052801561038957816020015b60408051808201909152600080825260208201528152602001906001900390816103625790505b50905060005b81518110156104185760405180604001604052808683815181106103b5576103b5610ad1565b60200260200101516001600160a01b031681526020018583815181106103dd576103dd610ad1565b60200260200101518152508282815181106103fa576103fa610ad1565b6020026020010181905250808061041090610afd565b91505061038f565b506104328160006001845161042d9190610b16565b6104bd565b5060005b81518110156104995781818151811061045157610451610ad1565b60200260200101516000015185828151811061046f5761046f610ad1565b6001600160a01b03909216602092830291909101909101528061049181610afd565b915050610436565b50929392505050565b6060610245826000600185516104b89190610b16565b610667565b606082828082036104d2578592505050610660565b60008660026104e18888610b29565b6104eb9190610b50565b6104f59088610b8c565b8151811061050557610505610ad1565b602002602001015190505b81831361062d575b806020015187848151811061052f5761052f610ad1565b6020026020010151602001511115610553578261054b81610bb4565b935050610518565b86828151811061056557610565610ad1565b6020026020010151602001518160200151111561058e578161058681610bcc565b925050610553565b818313610628576105d18784815181106105aa576105aa610ad1565b60200260200101518884815181106105c4576105c4610ad1565b60200260200101516107e7565b8885815181106105e3576105e3610ad1565b602002602001018985815181106105fc576105fc610ad1565b602002602001018290528290525050828061061690610bb4565b935050818061062490610bcc565b9250505b610510565b81861215610643576106408787846104bd565b96505b84831215610659576106568784876104bd565b96505b8693505050505b9392505050565b6060828280820361067c578592505050610660565b600086600261068b8888610b29565b6106959190610b50565b61069f9088610b8c565b815181106106af576106af610ad1565b602002602001015190505b8183136107be575b808784815181106106d5576106d5610ad1565b602002602001015111156106f557826106ed81610bb4565b9350506106c2565b86828151811061070757610707610ad1565b6020026020010151811115610728578161072081610bcc565b9250506106f5565b8183136107b95786828151811061074157610741610ad1565b602002602001015187848151811061075b5761075b610ad1565b602002602001015188858151811061077557610775610ad1565b6020026020010189858151811061078e5761078e610ad1565b602090810291909101019190915252826107a781610bb4565b93505081806107b590610bcc565b9250505b6106ba565b818612156107d4576107d1878784610667565b96505b8483121561065957610656878487610667565b6040805180820182526000808252602091820181905282518084019093528083529101529081815b9250929050565b828054828255906000526020600020908101928215610851579160200282015b82811115610851578251825591602001919060010190610836565b5061085d929150610861565b5090565b5b8082111561085d5760008155600101610862565b60008083601f84011261088857600080fd5b50813567ffffffffffffffff8111156108a057600080fd5b6020830191508360208260051b850101111561080f57600080fd5b600080600080604085870312156108d157600080fd5b843567ffffffffffffffff808211156108e957600080fd5b6108f588838901610876565b9096509450602087013591508082111561090e57600080fd5b5061091b87828801610876565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156109685783516001600160a01b031683529284019291840191600101610943565b50909695505050505050565b600081518084526020808501945080840160005b838110156109a457815187529582019590820190600101610988565b509495945050505050565b6040815260006109c26040830185610974565b90508260208301529392505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156109fa57600080fd5b823567ffffffffffffffff80821115610a1257600080fd5b818501915085601f830112610a2657600080fd5b813581811115610a3857610a386109d1565b8060051b604051601f19603f83011681018181108582111715610a5d57610a5d6109d1565b604052918252848201925083810185019188831115610a7b57600080fd5b938501935b82851015610a9957843584529385019392850192610a80565b98975050505050505050565b6020815260006106606020830184610974565b600060208284031215610aca57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610b0f57610b0f610ae7565b5060010190565b8181038181111561024557610245610ae7565b8181036000831280158383131683831282161715610b4957610b49610ae7565b5092915050565b600082610b6d57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610b8757610b87610ae7565b500590565b8082018281126000831280158216821582161715610bac57610bac610ae7565b505092915050565b60006001600160ff1b018201610b0f57610b0f610ae7565b6000600160ff1b8201610be157610be1610ae7565b50600019019056fea2646970667358221220f6ed6b9ca02d174dc942d2bd9338044e45e9928241ffe3851433f589a2f8f5f264736f6c63430008110033";

type MockSortingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSortingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSorting__factory extends ContractFactory {
  constructor(...args: MockSortingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockSorting> {
    return super.deploy(overrides || {}) as Promise<MockSorting>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSorting {
    return super.attach(address) as MockSorting;
  }
  connect(signer: Signer): MockSorting__factory {
    return super.connect(signer) as MockSorting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSortingInterface {
    return new utils.Interface(_abi) as MockSortingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSorting {
    return new Contract(address, _abi, signerOrProvider) as MockSorting;
  }
}
