/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockGatewayForTracking,
  MockGatewayForTrackingInterface,
} from "../MockGatewayForTracking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bridgeTrackingContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "ErrContractTypeNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "enum RoleAccess",
        name: "expectedRole",
        type: "uint8",
      },
    ],
    name: "ErrUnauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ErrZeroCodeContract",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ContractUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "address",
        name: "contract_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IBridgeTracking.VoteKind",
        name: "kind",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "sendApprovedVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IBridgeTracking.VoteKind",
        name: "kind",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "voters",
        type: "address[]",
      },
    ],
    name: "sendBallot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107b73803806107b783398101604081905261002f916100e4565b61003a600382610040565b5061012a565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561007657610076610114565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156100b7576100b7610114565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6000602082840312156100f657600080fd5b81516001600160a01b038116811461010d57600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b61067e806101396000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636ea9310d14610051578063865e6fd3146100665780639683908414610079578063de981f1b1461008c575b600080fd5b61006461005f3660046103c2565b6100bb565b005b610064610074366004610412565b610128565b61006461008736600461045b565b610147565b61009f61009a36600461053c565b6101f6565b6040516001600160a01b03909116815260200160405180910390f35b6100c560036101f6565b6001600160a01b031663229f88ea83836040518363ffffffff1660e01b81526004016100f2929190610588565b600060405180830381600087803b15801561010c57600080fd5b505af1158015610120573d6000803e3d6000fd5b505050505050565b61013061027a565b610139816102d6565b610143828261030f565b5050565b600061015360036101f6565b905060005b82518110156101ef57816001600160a01b031663c7c4fea98686868581518110610184576101846105a3565b60200260200101516040518463ffffffff1660e01b81526004016101aa939291906105b9565b600060405180830381600087803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b5050505080806101e7906105e6565b915050610158565b5050505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f81111561022d5761022d61055e565b60ff1681526020810191909152604001600020546001600160a01b0316905080610275578160405163409140df60e11b815260040161026c919061060d565b60405180910390fd5b919050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146102d4576000356001600160e01b0319166001604051620f948f60ea1b815260040161026c929190610627565b565b806001600160a01b03163b60000361030c57604051630bfc64a360e21b81526001600160a01b038216600482015260240161026c565b50565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f8111156103455761034561055e565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156103865761038661055e565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b80356003811061027557600080fd5b600080604083850312156103d557600080fd5b6103de836103b3565b946020939093013593505050565b80356010811061027557600080fd5b80356001600160a01b038116811461027557600080fd5b6000806040838503121561042557600080fd5b61042e836103ec565b915061043c602084016103fb565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561047057600080fd5b610479846103b3565b92506020808501359250604085013567ffffffffffffffff8082111561049e57600080fd5b818701915087601f8301126104b257600080fd5b8135818111156104c4576104c4610445565b8060051b604051601f19603f830116810181811085821117156104e9576104e9610445565b60405291825284820192508381018501918a83111561050757600080fd5b938501935b8285101561052c5761051d856103fb565b8452938501939285019261050c565b8096505050505050509250925092565b60006020828403121561054e57600080fd5b610557826103ec565b9392505050565b634e487b7160e01b600052602160045260246000fd5b600381106105845761058461055e565b9052565b604081016105968285610574565b8260208301529392505050565b634e487b7160e01b600052603260045260246000fd5b606081016105c78286610574565b60208201939093526001600160a01b0391909116604090910152919050565b60006001820161060657634e487b7160e01b600052601160045260246000fd5b5060010190565b60208101601083106106215761062161055e565b91905290565b6001600160e01b03198316815260408101600b83106105965761059661055e56fea2646970667358221220ffe5217d342ecdf38a8c14893f510bfe124822d8439be2e5af66f913a972281264736f6c63430008110033";

type MockGatewayForTrackingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGatewayForTrackingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGatewayForTracking__factory extends ContractFactory {
  constructor(...args: MockGatewayForTrackingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    bridgeTrackingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockGatewayForTracking> {
    return super.deploy(
      bridgeTrackingContract,
      overrides || {}
    ) as Promise<MockGatewayForTracking>;
  }
  getDeployTransaction(
    bridgeTrackingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(bridgeTrackingContract, overrides || {});
  }
  attach(address: string): MockGatewayForTracking {
    return super.attach(address) as MockGatewayForTracking;
  }
  connect(signer: Signer): MockGatewayForTracking__factory {
    return super.connect(signer) as MockGatewayForTracking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGatewayForTrackingInterface {
    return new utils.Interface(_abi) as MockGatewayForTrackingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockGatewayForTracking {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockGatewayForTracking;
  }
}
