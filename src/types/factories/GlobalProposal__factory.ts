/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GlobalProposal,
  GlobalProposalInterface,
} from "../GlobalProposal";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "targetNumber",
        type: "uint256",
      },
    ],
    name: "ErrUnsupportedTarget",
    type: "error",
  },
  {
    inputs: [],
    name: "TYPE_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806364d4c819146038575b600080fd5b605e7f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee9114135081565b60405190815260200160405180910390f3fea264697066735822122082c546a5522973fb96eb218bef16d28a00e686b10983fcae3264f69dab7232d764736f6c63430008110033";

type GlobalProposalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GlobalProposalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GlobalProposal__factory extends ContractFactory {
  constructor(...args: GlobalProposalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GlobalProposal> {
    return super.deploy(overrides || {}) as Promise<GlobalProposal>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GlobalProposal {
    return super.attach(address) as GlobalProposal;
  }
  connect(signer: Signer): GlobalProposal__factory {
    return super.connect(signer) as GlobalProposal__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GlobalProposalInterface {
    return new utils.Interface(_abi) as GlobalProposalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlobalProposal {
    return new Contract(address, _abi, signerOrProvider) as GlobalProposal;
  }
}
