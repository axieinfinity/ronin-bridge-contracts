/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockPCUValidateDoubleSign,
  MockPCUValidateDoubleSignInterface,
} from "../MockPCUValidateDoubleSign";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_precompile",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ErrCallPrecompiled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_consensusAddr",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_header1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_header2",
        type: "bytes",
      },
    ],
    name: "callPrecompile",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "precompileValidateDoubleSignAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "setPrecompileValidateDoubleSignAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103ea3803806103ea83398101604081905261002f91610050565b600080546001600160a01b0319166001600160a01b03831617905550610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b61035b8061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632dc2b60e14610046578063580c61e61461006e5780637c2b55a0146100a0575b600080fd5b610059610054366004610215565b6100bb565b60405190151581526020015b60405180910390f35b61009e61007c366004610296565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b6000546040516001600160a01b039091168152602001610065565b60006100ca86868686866100d4565b9695505050505050565b6000806100e96000546001600160a01b031690565b90506000600190506000888888888860405160240161010c9594939291906102e1565b60408051601f198184030181529190526020810180516001600160e01b0316637fc3567760e01b1790528051909150610143610192565b602083016020828483895afa61015857600094505b503d61016357600093505b8361018157604051630fc2632160e01b815260040160405180910390fd5b5115159a9950505050505050505050565b60405180602001604052806001906020820280368337509192915050565b80356001600160a01b03811681146101c757600080fd5b919050565b60008083601f8401126101de57600080fd5b50813567ffffffffffffffff8111156101f657600080fd5b60208301915083602082850101111561020e57600080fd5b9250929050565b60008060008060006060868803121561022d57600080fd5b610236866101b0565b9450602086013567ffffffffffffffff8082111561025357600080fd5b61025f89838a016101cc565b9096509450604088013591508082111561027857600080fd5b50610285888289016101cc565b969995985093965092949392505050565b6000602082840312156102a857600080fd5b6102b1826101b0565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038616815260606020820181905260009061030690830186886102b8565b82810360408401526103198185876102b8565b9897505050505050505056fea2646970667358221220a2add6f240c280dbb7117aa93d17745c40f08ca81c5bc7bbeb8480441a25806964736f6c63430008110033";

type MockPCUValidateDoubleSignConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPCUValidateDoubleSignConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPCUValidateDoubleSign__factory extends ContractFactory {
  constructor(...args: MockPCUValidateDoubleSignConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _precompile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPCUValidateDoubleSign> {
    return super.deploy(
      _precompile,
      overrides || {}
    ) as Promise<MockPCUValidateDoubleSign>;
  }
  getDeployTransaction(
    _precompile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_precompile, overrides || {});
  }
  attach(address: string): MockPCUValidateDoubleSign {
    return super.attach(address) as MockPCUValidateDoubleSign;
  }
  connect(signer: Signer): MockPCUValidateDoubleSign__factory {
    return super.connect(signer) as MockPCUValidateDoubleSign__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPCUValidateDoubleSignInterface {
    return new utils.Interface(_abi) as MockPCUValidateDoubleSignInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPCUValidateDoubleSign {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockPCUValidateDoubleSign;
  }
}
