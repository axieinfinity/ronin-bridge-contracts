/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { BridgeManager, BridgeManagerInterface } from "../BridgeManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bridgeOperator",
        type: "address",
      },
    ],
    name: "ErrBridgeOperatorAlreadyExisted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bridgeOperator",
        type: "address",
      },
    ],
    name: "ErrBridgeOperatorUpdateFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "ErrContractTypeNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrDuplicated",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrInvalidArguments",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrInvalidThreshold",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrInvalidVoteWeight",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrLengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrOnlySelfCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "enum RoleAccess",
        name: "expectedRole",
        type: "uint8",
      },
    ],
    name: "ErrUnauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ErrUnsupportedInterface",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ErrZeroCodeContract",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "governor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromBridgeOperator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toBridgeOperator",
        type: "address",
      },
    ],
    name: "BridgeOperatorUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool[]",
        name: "statuses",
        type: "bool[]",
      },
      {
        indexed: false,
        internalType: "uint96[]",
        name: "voteWeights",
        type: "uint96[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "governors",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
    ],
    name: "BridgeOperatorsAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool[]",
        name: "statuses",
        type: "bool[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
    ],
    name: "BridgeOperatorsRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ContractUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "registers",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bool[]",
        name: "statuses",
        type: "bool[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "returnDatas",
        type: "bytes[]",
      },
    ],
    name: "Notified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "numerator",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "previousNumerator",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "previousDenominator",
        type: "uint256",
      },
    ],
    name: "ThresholdUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint96[]",
        name: "voteWeights",
        type: "uint96[]",
      },
      {
        internalType: "address[]",
        name: "governors",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
    ],
    name: "addBridgeOperators",
    outputs: [
      {
        internalType: "bool[]",
        name: "addeds",
        type: "bool[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_voteWeight",
        type: "uint256",
      },
    ],
    name: "checkThreshold",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "governors",
        type: "address[]",
      },
    ],
    name: "getBridgeOperatorOf",
    outputs: [
      {
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bridgeOperator",
        type: "address",
      },
    ],
    name: "getBridgeOperatorWeight",
    outputs: [
      {
        internalType: "uint96",
        name: "weight",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBridgeOperators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCallbackRegisters",
    outputs: [
      {
        internalType: "address[]",
        name: "registers",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "address",
        name: "contract_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFullBridgeOperatorInfos",
    outputs: [
      {
        internalType: "address[]",
        name: "governors",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
      {
        internalType: "uint96[]",
        name: "weights",
        type: "uint96[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "governor",
        type: "address",
      },
    ],
    name: "getGovernorWeight",
    outputs: [
      {
        internalType: "uint96",
        name: "weight",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "governors",
        type: "address[]",
      },
    ],
    name: "getGovernorWeights",
    outputs: [
      {
        internalType: "uint96[]",
        name: "weights",
        type: "uint96[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGovernors",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
    ],
    name: "getGovernorsOf",
    outputs: [
      {
        internalType: "address[]",
        name: "governors",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "num_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denom_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalWeights",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "isBridgeOperator",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumVoteWeight",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "registers",
        type: "address[]",
      },
    ],
    name: "registerCallbacks",
    outputs: [
      {
        internalType: "bool[]",
        name: "registereds",
        type: "bool[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "bridgeOperators",
        type: "address[]",
      },
    ],
    name: "removeBridgeOperators",
    outputs: [
      {
        internalType: "bool[]",
        name: "removeds",
        type: "bool[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "numerator",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "setThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "governors",
        type: "address[]",
      },
    ],
    name: "sumGovernorsWeight",
    outputs: [
      {
        internalType: "uint256",
        name: "sum",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBridgeOperators",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "registers",
        type: "address[]",
      },
    ],
    name: "unregisterCallbacks",
    outputs: [
      {
        internalType: "bool[]",
        name: "unregistereds",
        type: "bool[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newBridgeOperator",
        type: "address",
      },
    ],
    name: "updateBridgeOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class BridgeManager__factory {
  static readonly abi = _abi;
  static createInterface(): BridgeManagerInterface {
    return new utils.Interface(_abi) as BridgeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeManager {
    return new Contract(address, _abi, signerOrProvider) as BridgeManager;
  }
}
