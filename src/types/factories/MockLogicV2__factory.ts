/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockLogicV2, MockLogicV2Interface } from "../MockLogicV2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    inputs: [],
    name: "get",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "magicNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setAndGet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101c5806100206000396000f3fe60806040526004361061004e5760003560e01c8063021644b41461008e57806306fdde03146100b657806341837a2f146100ec5780636d4ce63c14610100578063b8e010de1461011557600080fd5b3661008957604051600281527fa8142743f8f70a4c26f3691cf4ed59718381fb2f18070ec52be1f1022d8555579060200160405180910390a1005b600080fd5b34801561009a57600080fd5b506100a361012e565b6040519081526020015b60405180910390f35b3480156100c257600080fd5b5060408051808201825260078152662637b3b4b1ab1960c91b602082015290516100ad9190610141565b3480156100f857600080fd5b5060026100a3565b34801561010c57600080fd5b506000546100a3565b34801561012157600080fd5b5061012c6002600055565b005b600061013a6002600055565b5060005490565b600060208083528351808285015260005b8181101561016e57858101830151858201604001528201610152565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220ec3d99924fee872bf5b5a05822a3c4b3e3511c359e901db4f52d46a0298001e964736f6c63430008110033";

type MockLogicV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLogicV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLogicV2__factory extends ContractFactory {
  constructor(...args: MockLogicV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockLogicV2> {
    return super.deploy(overrides || {}) as Promise<MockLogicV2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockLogicV2 {
    return super.attach(address) as MockLogicV2;
  }
  connect(signer: Signer): MockLogicV2__factory {
    return super.connect(signer) as MockLogicV2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLogicV2Interface {
    return new utils.Interface(_abi) as MockLogicV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLogicV2 {
    return new Contract(address, _abi, signerOrProvider) as MockLogicV2;
  }
}
