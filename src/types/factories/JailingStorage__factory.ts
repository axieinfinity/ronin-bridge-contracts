/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  JailingStorage,
  JailingStorageInterface,
} from "../JailingStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "checkJailed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_blockNum",
        type: "uint256",
      },
    ],
    name: "checkJailedAtBlock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addrList",
        type: "address[]",
      },
    ],
    name: "checkManyJailed",
    outputs: [
      {
        internalType: "bool[]",
        name: "_result",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_blockProducer",
        type: "address",
      },
    ],
    name: "checkMiningRewardDeprecated",
    outputs: [
      {
        internalType: "bool",
        name: "_result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_blockProducer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_period",
        type: "uint256",
      },
    ],
    name: "checkMiningRewardDeprecatedAtPeriod",
    outputs: [
      {
        internalType: "bool",
        name: "_result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_block",
        type: "uint256",
      },
    ],
    name: "epochOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "getJailedTimeLeft",
    outputs: [
      {
        internalType: "bool",
        name: "isJailed_",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "blockLeft_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "epochLeft_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_blockNum",
        type: "uint256",
      },
    ],
    name: "getJailedTimeLeftAtBlock",
    outputs: [
      {
        internalType: "bool",
        name: "isJailed_",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "blockLeft_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "epochLeft_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class JailingStorage__factory {
  static readonly abi = _abi;
  static createInterface(): JailingStorageInterface {
    return new utils.Interface(_abi) as JailingStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): JailingStorage {
    return new Contract(address, _abi, signerOrProvider) as JailingStorage;
  }
}
