/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockForwarderTarget,
  MockForwarderTargetInterface,
} from "../MockForwarderTarget";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_data",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sendAmount",
        type: "uint256",
      },
    ],
    name: "ErrInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrIntentionally",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
    ],
    name: "ErrRecipientRevert",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "enum RoleAccess",
        name: "expectedRole",
        type: "uint8",
      },
    ],
    name: "ErrUnauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_origin",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "TargetWithdrawn",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_data",
        type: "uint256",
      },
    ],
    name: "foo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fooCustomErrorRevert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_data",
        type: "uint256",
      },
    ],
    name: "fooPayable",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fooRevert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fooSilentRevert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526040516105d33803806105d38339810160408190526100229161004b565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155610085565b6000806040838503121561005e57600080fd5b82516001600160a01b038116811461007557600080fd5b6020939093015192949293505050565b61053f806100946000396000f3fe60806040526004361061008a5760003560e01c8063853828b611610059578063853828b61461010e5780638da5cb5b14610123578063b490199f1461015b578063ee171cfd14610169578063fc12b9931461017e57610099565b806312065fe0146100a157806322e94c44146100c35780632fbebd38146100d857806373d4a13a146100f857610099565b3661009957610097610193565b005b610097610193565b3480156100ad57600080fd5b50475b6040519081526020015b60405180910390f35b3480156100cf57600080fd5b506100976101ef565b3480156100e457600080fd5b506100976100f33660046104b4565b61022f565b34801561010457600080fd5b506100b060015481565b34801561011a57600080fd5b5061009761026f565b34801561012f57600080fd5b50600054610143906001600160a01b031681565b6040516001600160a01b0390911681526020016100ba565b6100976100f33660046104b4565b34801561017557600080fd5b506100976102e5565b34801561018a57600080fd5b5061009761037c565b60405162461bcd60e51b815260206004820152602660248201527f4d6f636b466f72776172645461726765743a2068656c6c6f2066726f6d2066616044820152656c6c6261636b60d01b60648201526084015b60405180910390fd5b6000546001600160a01b0316331461022a576000356001600160e01b0319166001604051620f948f60ea1b81526004016101e69291906104cd565b600080fd5b6000546001600160a01b0316331461026a576000356001600160e01b0319166001604051620f948f60ea1b81526004016101e69291906104cd565b600155565b6000546001600160a01b031633146102aa576000356001600160e01b0319166001604051620f948f60ea1b81526004016101e69291906104cd565b6040513390819032907fe6d695112d1caba84e63b30e957f33da4143f0428ac4fedcf000f4fb907e79ed90600090a46102e333476103d0565b565b6000546001600160a01b03163314610320576000356001600160e01b0319166001604051620f948f60ea1b81526004016101e69291906104cd565b60405162461bcd60e51b815260206004820152602b60248201527f4d6f636b466f72776172646572436f6e74726163743a2072657665727420696e60448201526a74656e74696f6e616c6c7960a81b60648201526084016101e6565b6000546001600160a01b031633146103b7576000356001600160e01b0319166001604051620f948f60ea1b81526004016101e69291906104cd565b604051630a3a4c3d60e31b815260040160405180910390fd5b6103da8282610409565b610405576040516303b97b7760e41b81526001600160e01b03196000351660048201526024016101e6565b5050565b600081471015610447576040516302631c4f60e61b81526001600160e01b0319600035166004820152476024820152604481018390526064016101e6565b6104518383610458565b9392505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104a5576040519150601f19603f3d011682016040523d82523d6000602084013e6104aa565b606091505b5090949350505050565b6000602082840312156104c657600080fd5b5035919050565b6001600160e01b03198316815260408101600b83106104fc57634e487b7160e01b600052602160045260246000fd5b826020830152939250505056fea264697066735822122050898a8dc764829418ff670e63075bb4f7544be0157410f19c44e84ad1681cf464736f6c63430008110033";

type MockForwarderTargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockForwarderTargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockForwarderTarget__factory extends ContractFactory {
  constructor(...args: MockForwarderTargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _owner: string,
    _data: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<MockForwarderTarget> {
    return super.deploy(
      _owner,
      _data,
      overrides || {}
    ) as Promise<MockForwarderTarget>;
  }
  getDeployTransaction(
    _owner: string,
    _data: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, _data, overrides || {});
  }
  attach(address: string): MockForwarderTarget {
    return super.attach(address) as MockForwarderTarget;
  }
  connect(signer: Signer): MockForwarderTarget__factory {
    return super.connect(signer) as MockForwarderTarget__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockForwarderTargetInterface {
    return new utils.Interface(_abi) as MockForwarderTargetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockForwarderTarget {
    return new Contract(address, _abi, signerOrProvider) as MockForwarderTarget;
  }
}
