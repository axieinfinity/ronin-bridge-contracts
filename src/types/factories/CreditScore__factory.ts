/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { CreditScore, CreditScoreInterface } from "../CreditScore";

const _abi = [
  {
    inputs: [],
    name: "ErrCallerMustBeJailedInTheCurrentPeriod",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "ErrContractTypeNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrInsufficientCreditScoreToBailOut",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrInvalidCreditScoreConfig",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrInvalidCutOffPercentageConfig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "enum RoleAccess",
        name: "expectedRole",
        type: "uint8",
      },
    ],
    name: "ErrUnauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "msgSig",
        type: "bytes4",
      },
      {
        internalType: "enum ContractType",
        name: "expectedContractType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "actual",
        type: "address",
      },
    ],
    name: "ErrUnexpectedInternalCall",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrValidatorHasBailedOutPreviously",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ErrZeroCodeContract",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "usedCreditScore",
        type: "uint256",
      },
    ],
    name: "BailedOut",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ContractUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gainCreditScore",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxCreditScore",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bailOutCostMultiplier",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cutOffPercentageAfterBailout",
        type: "uint256",
      },
    ],
    name: "CreditScoreConfigsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "validators",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "creditScores",
        type: "uint256[]",
      },
    ],
    name: "CreditScoresUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_consensusAddr",
        type: "address",
      },
    ],
    name: "bailOut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_validator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_period",
        type: "uint256",
      },
    ],
    name: "checkBailedOutAtPeriod",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_validators",
        type: "address[]",
      },
    ],
    name: "execResetCreditScores",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "address",
        name: "contract_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_validator",
        type: "address",
      },
    ],
    name: "getCreditScore",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCreditScoreConfigs",
    outputs: [
      {
        internalType: "uint256",
        name: "gainCreditScore_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxCreditScore_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bailOutCostMultiplier_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cutOffPercentageAfterBailout_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_validators",
        type: "address[]",
      },
    ],
    name: "getManyCreditScores",
    outputs: [
      {
        internalType: "uint256[]",
        name: "_resultList",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_validator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_period",
        type: "uint256",
      },
    ],
    name: "getUnavailabilityIndicator",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ContractType",
        name: "contractType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gainScore",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxScore",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bailOutMultiplier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_cutOffPercentage",
        type: "uint256",
      },
    ],
    name: "setCreditScoreConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_validators",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_period",
        type: "uint256",
      },
    ],
    name: "updateCreditScores",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class CreditScore__factory {
  static readonly abi = _abi;
  static createInterface(): CreditScoreInterface {
    return new utils.Interface(_abi) as CreditScoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreditScore {
    return new Contract(address, _abi, signerOrProvider) as CreditScore;
  }
}
