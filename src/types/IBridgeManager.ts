/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBridgeManagerInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "addBridgeOperators(uint96[],address[],address[])": FunctionFragment;
    "getBridgeOperatorOf(address[])": FunctionFragment;
    "getBridgeOperatorWeight(address)": FunctionFragment;
    "getBridgeOperators()": FunctionFragment;
    "getFullBridgeOperatorInfos()": FunctionFragment;
    "getGovernorWeight(address)": FunctionFragment;
    "getGovernorWeights(address[])": FunctionFragment;
    "getGovernors()": FunctionFragment;
    "getGovernorsOf(address[])": FunctionFragment;
    "getTotalWeights()": FunctionFragment;
    "isBridgeOperator(address)": FunctionFragment;
    "removeBridgeOperators(address[])": FunctionFragment;
    "sumGovernorsWeight(address[])": FunctionFragment;
    "totalBridgeOperators()": FunctionFragment;
    "updateBridgeOperator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeOperators",
    values: [BigNumberish[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperatorOf",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperatorWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFullBridgeOperatorInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWeights",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorsOf",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBridgeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBridgeOperators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sumGovernorsWeight",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBridgeOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeOperator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperatorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperatorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullBridgeOperatorInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBridgeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumGovernorsWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeOperator",
    data: BytesLike
  ): Result;

  events: {
    "BridgeOperatorUpdated(address,address,address)": EventFragment;
    "BridgeOperatorsAdded(bool[],uint96[],address[],address[])": EventFragment;
    "BridgeOperatorsRemoved(bool[],address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeOperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeOperatorsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeOperatorsRemoved"): EventFragment;
}

export type BridgeOperatorUpdatedEvent = TypedEvent<
  [string, string, string],
  { governor: string; fromBridgeOperator: string; toBridgeOperator: string }
>;

export type BridgeOperatorUpdatedEventFilter =
  TypedEventFilter<BridgeOperatorUpdatedEvent>;

export type BridgeOperatorsAddedEvent = TypedEvent<
  [boolean[], BigNumber[], string[], string[]],
  {
    statuses: boolean[];
    voteWeights: BigNumber[];
    governors: string[];
    bridgeOperators: string[];
  }
>;

export type BridgeOperatorsAddedEventFilter =
  TypedEventFilter<BridgeOperatorsAddedEvent>;

export type BridgeOperatorsRemovedEvent = TypedEvent<
  [boolean[], string[]],
  { statuses: boolean[]; bridgeOperators: string[] }
>;

export type BridgeOperatorsRemovedEventFilter =
  TypedEventFilter<BridgeOperatorsRemovedEvent>;

export interface IBridgeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBridgeOperatorOf(
      gorvernors: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { bridgeOperators_: string[] }>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weight: BigNumber }>;

    getBridgeOperators(overrides?: CallOverrides): Promise<[string[]]>;

    getFullBridgeOperatorInfos(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[]] & {
        governors: string[];
        bridgeOperators: string[];
        weights: BigNumber[];
      }
    >;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { weights: BigNumber[] }>;

    getGovernors(overrides?: CallOverrides): Promise<[string[]]>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { governors: string[] }>;

    getTotalWeights(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBridgeOperator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sum: BigNumber }>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateBridgeOperator(
      bridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  addBridgeOperators(
    voteWeights: BigNumberish[],
    governors: string[],
    bridgeOperators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBridgeOperatorOf(
    gorvernors: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBridgeOperatorWeight(
    bridgeOperator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBridgeOperators(overrides?: CallOverrides): Promise<string[]>;

  getFullBridgeOperatorInfos(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[]] & {
      governors: string[];
      bridgeOperators: string[];
      weights: BigNumber[];
    }
  >;

  getGovernorWeight(
    governor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovernorWeights(
    governors: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getGovernors(overrides?: CallOverrides): Promise<string[]>;

  getGovernorsOf(
    bridgeOperators: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalWeights(overrides?: CallOverrides): Promise<BigNumber>;

  isBridgeOperator(addr: string, overrides?: CallOverrides): Promise<boolean>;

  removeBridgeOperators(
    bridgeOperators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sumGovernorsWeight(
    governors: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

  updateBridgeOperator(
    bridgeOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    getBridgeOperatorOf(
      gorvernors: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOperators(overrides?: CallOverrides): Promise<string[]>;

    getFullBridgeOperatorInfos(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[]] & {
        governors: string[];
        bridgeOperators: string[];
        weights: BigNumber[];
      }
    >;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getGovernors(overrides?: CallOverrides): Promise<string[]>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalWeights(overrides?: CallOverrides): Promise<BigNumber>;

    isBridgeOperator(addr: string, overrides?: CallOverrides): Promise<boolean>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

    updateBridgeOperator(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeOperatorUpdated(address,address,address)"(
      governor?: string | null,
      fromBridgeOperator?: string | null,
      toBridgeOperator?: string | null
    ): BridgeOperatorUpdatedEventFilter;
    BridgeOperatorUpdated(
      governor?: string | null,
      fromBridgeOperator?: string | null,
      toBridgeOperator?: string | null
    ): BridgeOperatorUpdatedEventFilter;

    "BridgeOperatorsAdded(bool[],uint96[],address[],address[])"(
      statuses?: null,
      voteWeights?: null,
      governors?: null,
      bridgeOperators?: null
    ): BridgeOperatorsAddedEventFilter;
    BridgeOperatorsAdded(
      statuses?: null,
      voteWeights?: null,
      governors?: null,
      bridgeOperators?: null
    ): BridgeOperatorsAddedEventFilter;

    "BridgeOperatorsRemoved(bool[],address[])"(
      statuses?: null,
      bridgeOperators?: null
    ): BridgeOperatorsRemovedEventFilter;
    BridgeOperatorsRemoved(
      statuses?: null,
      bridgeOperators?: null
    ): BridgeOperatorsRemovedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBridgeOperatorOf(
      gorvernors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

    getFullBridgeOperatorInfos(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernors(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWeights(overrides?: CallOverrides): Promise<BigNumber>;

    isBridgeOperator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBridgeOperators(overrides?: CallOverrides): Promise<BigNumber>;

    updateBridgeOperator(
      bridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addBridgeOperators(
      voteWeights: BigNumberish[],
      governors: string[],
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBridgeOperatorOf(
      gorvernors: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeOperatorWeight(
      bridgeOperator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeOperators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullBridgeOperatorInfos(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWeight(
      governor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWeights(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovernorsOf(
      bridgeOperators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBridgeOperator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBridgeOperators(
      bridgeOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sumGovernorsWeight(
      governors: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBridgeOperators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBridgeOperator(
      bridgeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
