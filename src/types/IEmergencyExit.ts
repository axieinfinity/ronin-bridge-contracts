/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IEmergencyExitInterface extends utils.Interface {
  functions: {
    "emergencyExitLockedAmount()": FunctionFragment;
    "emergencyExpiryDuration()": FunctionFragment;
    "execEmergencyExit(address,uint256)": FunctionFragment;
    "execReleaseLockedFundForEmergencyExitRequest(address,address)": FunctionFragment;
    "setEmergencyExitLockedAmount(uint256)": FunctionFragment;
    "setEmergencyExpiryDuration(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emergencyExitLockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExpiryDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execEmergencyExit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execReleaseLockedFundForEmergencyExitRequest",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyExitLockedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyExpiryDuration",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "emergencyExitLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExpiryDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execEmergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execReleaseLockedFundForEmergencyExitRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyExitLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyExpiryDuration",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyExitLockedAmountUpdated(uint256)": EventFragment;
    "EmergencyExitLockedFundReleased(address,address,uint256)": EventFragment;
    "EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)": EventFragment;
    "EmergencyExitRequested(address,uint256)": EventFragment;
    "EmergencyExpiryDurationUpdated(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "EmergencyExitLockedAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyExitLockedFundReleased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyExitLockedFundReleasingFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitRequested"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyExpiryDurationUpdated"
  ): EventFragment;
}

export type EmergencyExitLockedAmountUpdatedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type EmergencyExitLockedAmountUpdatedEventFilter =
  TypedEventFilter<EmergencyExitLockedAmountUpdatedEvent>;

export type EmergencyExitLockedFundReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  { consensusAddr: string; recipient: string; unlockedAmount: BigNumber }
>;

export type EmergencyExitLockedFundReleasedEventFilter =
  TypedEventFilter<EmergencyExitLockedFundReleasedEvent>;

export type EmergencyExitLockedFundReleasingFailedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    consensusAddr: string;
    recipient: string;
    unlockedAmount: BigNumber;
    contractBalance: BigNumber;
  }
>;

export type EmergencyExitLockedFundReleasingFailedEventFilter =
  TypedEventFilter<EmergencyExitLockedFundReleasingFailedEvent>;

export type EmergencyExitRequestedEvent = TypedEvent<
  [string, BigNumber],
  { consensusAddr: string; lockedAmount: BigNumber }
>;

export type EmergencyExitRequestedEventFilter =
  TypedEventFilter<EmergencyExitRequestedEvent>;

export type EmergencyExpiryDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type EmergencyExpiryDurationUpdatedEventFilter =
  TypedEventFilter<EmergencyExpiryDurationUpdatedEvent>;

export interface IEmergencyExit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEmergencyExitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emergencyExitLockedAmount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyExpiryDuration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  emergencyExitLockedAmount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyExpiryDuration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execEmergencyExit(
    _consensusAddr: string,
    _secLeftToRevoke: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execReleaseLockedFundForEmergencyExitRequest(
    _consensusAddr: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyExitLockedAmount(
    _emergencyExitLockedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyExpiryDuration(
    _emergencyExpiryDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emergencyExitLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExpiryDuration(overrides?: CallOverrides): Promise<BigNumber>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmergencyExitLockedAmountUpdated(uint256)"(
      amount?: null
    ): EmergencyExitLockedAmountUpdatedEventFilter;
    EmergencyExitLockedAmountUpdated(
      amount?: null
    ): EmergencyExitLockedAmountUpdatedEventFilter;

    "EmergencyExitLockedFundReleased(address,address,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null
    ): EmergencyExitLockedFundReleasedEventFilter;
    EmergencyExitLockedFundReleased(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null
    ): EmergencyExitLockedFundReleasedEventFilter;

    "EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)"(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null,
      contractBalance?: null
    ): EmergencyExitLockedFundReleasingFailedEventFilter;
    EmergencyExitLockedFundReleasingFailed(
      consensusAddr?: string | null,
      recipient?: string | null,
      unlockedAmount?: null,
      contractBalance?: null
    ): EmergencyExitLockedFundReleasingFailedEventFilter;

    "EmergencyExitRequested(address,uint256)"(
      consensusAddr?: string | null,
      lockedAmount?: null
    ): EmergencyExitRequestedEventFilter;
    EmergencyExitRequested(
      consensusAddr?: string | null,
      lockedAmount?: null
    ): EmergencyExitRequestedEventFilter;

    "EmergencyExpiryDurationUpdated(uint256)"(
      amount?: null
    ): EmergencyExpiryDurationUpdatedEventFilter;
    EmergencyExpiryDurationUpdated(
      amount?: null
    ): EmergencyExpiryDurationUpdatedEventFilter;
  };

  estimateGas: {
    emergencyExitLockedAmount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyExpiryDuration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emergencyExitLockedAmount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyExpiryDuration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execEmergencyExit(
      _consensusAddr: string,
      _secLeftToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execReleaseLockedFundForEmergencyExitRequest(
      _consensusAddr: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyExitLockedAmount(
      _emergencyExitLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyExpiryDuration(
      _emergencyExpiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
