/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WithdrawalLimitationInterface extends utils.Interface {
  functions: {
    "_MAX_PERCENTAGE()": FunctionFragment;
    "checkHighTierVoteWeightThreshold(uint256)": FunctionFragment;
    "checkThreshold(uint256)": FunctionFragment;
    "dailyWithdrawalLimit(address)": FunctionFragment;
    "emergencyPauser()": FunctionFragment;
    "getHighTierVoteWeightThreshold()": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "highTierThreshold(address)": FunctionFragment;
    "lastDateSynced(address)": FunctionFragment;
    "lastSyncedWithdrawal(address)": FunctionFragment;
    "lockedThreshold(address)": FunctionFragment;
    "minimumVoteWeight()": FunctionFragment;
    "nonce()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "reachedWithdrawalLimit(address,uint256)": FunctionFragment;
    "setDailyWithdrawalLimits(address[],uint256[])": FunctionFragment;
    "setEmergencyPauser(address)": FunctionFragment;
    "setHighTierThresholds(address[],uint256[])": FunctionFragment;
    "setHighTierVoteWeightThreshold(uint256,uint256)": FunctionFragment;
    "setLockedThresholds(address[],uint256[])": FunctionFragment;
    "setThreshold(uint256,uint256)": FunctionFragment;
    "setUnlockFeePercentages(address[],uint256[])": FunctionFragment;
    "unlockFeePercentages(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkHighTierVoteWeightThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyWithdrawalLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHighTierVoteWeightThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highTierThreshold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDateSynced",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSyncedWithdrawal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedThreshold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVoteWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reachedWithdrawalLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyWithdrawalLimits",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHighTierThresholds",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setHighTierVoteWeightThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedThresholds",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlockFeePercentages",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFeePercentages",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkHighTierVoteWeightThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighTierVoteWeightThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highTierThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDateSynced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSyncedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reachedWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyWithdrawalLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHighTierThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHighTierVoteWeightThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockFeePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFeePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "DailyWithdrawalLimitsUpdated(address[],uint256[])": EventFragment;
    "HighTierThresholdsUpdated(address[],uint256[])": EventFragment;
    "HighTierVoteWeightThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LockedThresholdsUpdated(address[],uint256[])": EventFragment;
    "Paused(address)": EventFragment;
    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UnlockFeePercentagesUpdated(address[],uint256[])": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DailyWithdrawalLimitsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighTierThresholdsUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "HighTierVoteWeightThresholdUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedThresholdsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnlockFeePercentagesUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type DailyWithdrawalLimitsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; limits: BigNumber[] }
>;

export type DailyWithdrawalLimitsUpdatedEventFilter =
  TypedEventFilter<DailyWithdrawalLimitsUpdatedEvent>;

export type HighTierThresholdsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; thresholds: BigNumber[] }
>;

export type HighTierThresholdsUpdatedEventFilter =
  TypedEventFilter<HighTierThresholdsUpdatedEvent>;

export type HighTierVoteWeightThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type HighTierVoteWeightThresholdUpdatedEventFilter =
  TypedEventFilter<HighTierVoteWeightThresholdUpdatedEvent>;

export type LockedThresholdsUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; thresholds: BigNumber[] }
>;

export type LockedThresholdsUpdatedEventFilter =
  TypedEventFilter<LockedThresholdsUpdatedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type ThresholdUpdatedEventFilter =
  TypedEventFilter<ThresholdUpdatedEvent>;

export type UnlockFeePercentagesUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { tokens: string[]; percentages: BigNumber[] }
>;

export type UnlockFeePercentagesUpdatedEventFilter =
  TypedEventFilter<UnlockFeePercentagesUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawalLimitation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WithdrawalLimitationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyPauser(overrides?: CallOverrides): Promise<[string]>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastDateSynced(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  checkHighTierVoteWeightThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dailyWithdrawalLimit(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyPauser(overrides?: CallOverrides): Promise<string>;

  getHighTierVoteWeightThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

  highTierThreshold(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastDateSynced(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lastSyncedWithdrawal(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedThreshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  reachedWithdrawalLimit(
    _token: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setDailyWithdrawalLimits(
    _tokens: string[],
    _limits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyPauser(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHighTierThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHighTierVoteWeightThreshold(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockedThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnlockFeePercentages(
    _tokens: string[],
    _percentages: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockFeePercentages(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyPauser(overrides?: CallOverrides): Promise<string>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastDateSynced(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyPauser(_addr: string, overrides?: CallOverrides): Promise<void>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _previousNum: BigNumber;
        _previousDenom: BigNumber;
      }
    >;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _previousNum: BigNumber;
        _previousDenom: BigNumber;
      }
    >;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DailyWithdrawalLimitsUpdated(address[],uint256[])"(
      tokens?: null,
      limits?: null
    ): DailyWithdrawalLimitsUpdatedEventFilter;
    DailyWithdrawalLimitsUpdated(
      tokens?: null,
      limits?: null
    ): DailyWithdrawalLimitsUpdatedEventFilter;

    "HighTierThresholdsUpdated(address[],uint256[])"(
      tokens?: null,
      thresholds?: null
    ): HighTierThresholdsUpdatedEventFilter;
    HighTierThresholdsUpdated(
      tokens?: null,
      thresholds?: null
    ): HighTierThresholdsUpdatedEventFilter;

    "HighTierVoteWeightThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): HighTierVoteWeightThresholdUpdatedEventFilter;
    HighTierVoteWeightThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): HighTierVoteWeightThresholdUpdatedEventFilter;

    "LockedThresholdsUpdated(address[],uint256[])"(
      tokens?: null,
      thresholds?: null
    ): LockedThresholdsUpdatedEventFilter;
    LockedThresholdsUpdated(
      tokens?: null,
      thresholds?: null
    ): LockedThresholdsUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;
    ThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;

    "UnlockFeePercentagesUpdated(address[],uint256[])"(
      tokens?: null,
      percentages?: null
    ): UnlockFeePercentagesUpdatedEventFilter;
    UnlockFeePercentagesUpdated(
      tokens?: null,
      percentages?: null
    ): UnlockFeePercentagesUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyPauser(overrides?: CallOverrides): Promise<BigNumber>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastDateSynced(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkHighTierVoteWeightThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyWithdrawalLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHighTierVoteWeightThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highTierThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDateSynced(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSyncedWithdrawal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedThreshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reachedWithdrawalLimit(
      _token: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDailyWithdrawalLimits(
      _tokens: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHighTierThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHighTierVoteWeightThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockedThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnlockFeePercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockFeePercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
