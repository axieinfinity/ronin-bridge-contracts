/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IDelegatorStakingInterface extends utils.Interface {
  functions: {
    "bulkUndelegate(address[],uint256[])": FunctionFragment;
    "claimRewards(address[])": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateRewards(address[],address)": FunctionFragment;
    "getManyStakingAmounts(address[],address[])": FunctionFragment;
    "getManyStakingTotals(address[])": FunctionFragment;
    "getReward(address,address)": FunctionFragment;
    "getRewards(address,address[])": FunctionFragment;
    "getStakingAmount(address,address)": FunctionFragment;
    "getStakingTotal(address)": FunctionFragment;
    "redelegate(address,address,uint256)": FunctionFragment;
    "undelegate(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bulkUndelegate",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateRewards",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getManyStakingAmounts",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getManyStakingTotals",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingTotal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "bulkUndelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManyStakingAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManyStakingTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;

  events: {
    "Delegated(address,address,uint256)": EventFragment;
    "PoolSharesUpdated(uint256,address,uint256)": EventFragment;
    "PoolsUpdateConflicted(uint256,address[])": EventFragment;
    "PoolsUpdateFailed(uint256,address[],uint256[])": EventFragment;
    "PoolsUpdated(uint256,address[],uint256[],uint256[])": EventFragment;
    "RewardClaimed(address,address,uint256)": EventFragment;
    "Undelegated(address,address,uint256)": EventFragment;
    "UserRewardUpdated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolSharesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsUpdateConflicted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsUpdateFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Undelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRewardUpdated"): EventFragment;
}

export type DelegatedEvent = TypedEvent<
  [string, string, BigNumber],
  { delegator: string; consensuAddr: string; amount: BigNumber }
>;

export type DelegatedEventFilter = TypedEventFilter<DelegatedEvent>;

export type PoolSharesUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; poolAddr: string; shares: BigNumber }
>;

export type PoolSharesUpdatedEventFilter =
  TypedEventFilter<PoolSharesUpdatedEvent>;

export type PoolsUpdateConflictedEvent = TypedEvent<
  [BigNumber, string[]],
  { period: BigNumber; poolAddrs: string[] }
>;

export type PoolsUpdateConflictedEventFilter =
  TypedEventFilter<PoolsUpdateConflictedEvent>;

export type PoolsUpdateFailedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  { period: BigNumber; poolAddrs: string[]; rewards: BigNumber[] }
>;

export type PoolsUpdateFailedEventFilter =
  TypedEventFilter<PoolsUpdateFailedEvent>;

export type PoolsUpdatedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], BigNumber[]],
  {
    period: BigNumber;
    poolAddrs: string[];
    aRps: BigNumber[];
    shares: BigNumber[];
  }
>;

export type PoolsUpdatedEventFilter = TypedEventFilter<PoolsUpdatedEvent>;

export type RewardClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  { poolAddr: string; user: string; amount: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type UndelegatedEvent = TypedEvent<
  [string, string, BigNumber],
  { delegator: string; consensuAddr: string; amount: BigNumber }
>;

export type UndelegatedEventFilter = TypedEventFilter<UndelegatedEvent>;

export type UserRewardUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  { poolAddr: string; user: string; debited: BigNumber }
>;

export type UserRewardUpdatedEventFilter =
  TypedEventFilter<UserRewardUpdatedEvent>;

export interface IDelegatorStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDelegatorStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bulkUndelegate(
      _consensusAddrs: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      _consensusAddrList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      _consensusAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateRewards(
      _consensusAddrList: string[],
      _consensusAddrDst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewards(
      _user: string,
      _poolAddrList: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _rewards: BigNumber[] }>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redelegate(
      _consensusAddrSrc: string,
      _consensusAddrDst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undelegate(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bulkUndelegate(
    _consensusAddrs: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    _consensusAddrList: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    _consensusAddr: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateRewards(
    _consensusAddrList: string[],
    _consensusAddrDst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getManyStakingAmounts(
    _poolAddrs: string[],
    _userList: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getManyStakingTotals(
    _poolAddrs: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getReward(
    _poolAddr: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewards(
    _user: string,
    _poolAddrList: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getStakingAmount(
    _poolAddr: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingTotal(
    _poolAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redelegate(
    _consensusAddrSrc: string,
    _consensusAddrDst: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undelegate(
    _consensusAddr: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bulkUndelegate(
      _consensusAddrs: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      _consensusAddrList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(_consensusAddr: string, overrides?: CallOverrides): Promise<void>;

    delegateRewards(
      _consensusAddrList: string[],
      _consensusAddrDst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(
      _user: string,
      _poolAddrList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redelegate(
      _consensusAddrSrc: string,
      _consensusAddrDst: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    undelegate(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Delegated(address,address,uint256)"(
      delegator?: string | null,
      consensuAddr?: string | null,
      amount?: null
    ): DelegatedEventFilter;
    Delegated(
      delegator?: string | null,
      consensuAddr?: string | null,
      amount?: null
    ): DelegatedEventFilter;

    "PoolSharesUpdated(uint256,address,uint256)"(
      period?: BigNumberish | null,
      poolAddr?: string | null,
      shares?: null
    ): PoolSharesUpdatedEventFilter;
    PoolSharesUpdated(
      period?: BigNumberish | null,
      poolAddr?: string | null,
      shares?: null
    ): PoolSharesUpdatedEventFilter;

    "PoolsUpdateConflicted(uint256,address[])"(
      period?: BigNumberish | null,
      poolAddrs?: null
    ): PoolsUpdateConflictedEventFilter;
    PoolsUpdateConflicted(
      period?: BigNumberish | null,
      poolAddrs?: null
    ): PoolsUpdateConflictedEventFilter;

    "PoolsUpdateFailed(uint256,address[],uint256[])"(
      period?: BigNumberish | null,
      poolAddrs?: null,
      rewards?: null
    ): PoolsUpdateFailedEventFilter;
    PoolsUpdateFailed(
      period?: BigNumberish | null,
      poolAddrs?: null,
      rewards?: null
    ): PoolsUpdateFailedEventFilter;

    "PoolsUpdated(uint256,address[],uint256[],uint256[])"(
      period?: BigNumberish | null,
      poolAddrs?: null,
      aRps?: null,
      shares?: null
    ): PoolsUpdatedEventFilter;
    PoolsUpdated(
      period?: BigNumberish | null,
      poolAddrs?: null,
      aRps?: null,
      shares?: null
    ): PoolsUpdatedEventFilter;

    "RewardClaimed(address,address,uint256)"(
      poolAddr?: string | null,
      user?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      poolAddr?: string | null,
      user?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;

    "Undelegated(address,address,uint256)"(
      delegator?: string | null,
      consensuAddr?: string | null,
      amount?: null
    ): UndelegatedEventFilter;
    Undelegated(
      delegator?: string | null,
      consensuAddr?: string | null,
      amount?: null
    ): UndelegatedEventFilter;

    "UserRewardUpdated(address,address,uint256)"(
      poolAddr?: string | null,
      user?: string | null,
      debited?: null
    ): UserRewardUpdatedEventFilter;
    UserRewardUpdated(
      poolAddr?: string | null,
      user?: string | null,
      debited?: null
    ): UserRewardUpdatedEventFilter;
  };

  estimateGas: {
    bulkUndelegate(
      _consensusAddrs: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      _consensusAddrList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      _consensusAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateRewards(
      _consensusAddrList: string[],
      _consensusAddrDst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(
      _user: string,
      _poolAddrList: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redelegate(
      _consensusAddrSrc: string,
      _consensusAddrDst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undelegate(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bulkUndelegate(
      _consensusAddrs: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _consensusAddrList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      _consensusAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateRewards(
      _consensusAddrList: string[],
      _consensusAddrDst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getManyStakingAmounts(
      _poolAddrs: string[],
      _userList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyStakingTotals(
      _poolAddrs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(
      _user: string,
      _poolAddrList: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAmount(
      _poolAddr: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingTotal(
      _poolAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redelegate(
      _consensusAddrSrc: string,
      _consensusAddrDst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undelegate(
      _consensusAddr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
