/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GatewayV3Interface extends utils.Interface {
  functions: {
    "checkThreshold(uint256)": FunctionFragment;
    "emergencyPauser()": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "minimumVoteWeight()": FunctionFragment;
    "nonce()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setEmergencyPauser(address)": FunctionFragment;
    "setThreshold(uint256,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVoteWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Paused(address)": EventFragment;
    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    previousNumerator: BigNumber;
    previousDenominator: BigNumber;
  }
>;

export type ThresholdUpdatedEventFilter =
  TypedEventFilter<ThresholdUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GatewayV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GatewayV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emergencyPauser(overrides?: CallOverrides): Promise<[string]>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkThreshold(
    _voteWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  emergencyPauser(overrides?: CallOverrides): Promise<string>;

  getThreshold(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

  minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setEmergencyPauser(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyPauser(overrides?: CallOverrides): Promise<string>;

    getThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num_: BigNumber; denom_: BigNumber }>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setEmergencyPauser(_addr: string, overrides?: CallOverrides): Promise<void>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)"(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;
    ThresholdUpdated(
      nonce?: BigNumberish | null,
      numerator?: BigNumberish | null,
      denominator?: BigNumberish | null,
      previousNumerator?: null,
      previousDenominator?: null
    ): ThresholdUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyPauser(overrides?: CallOverrides): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkThreshold(
      _voteWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumVoteWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmergencyPauser(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
